Перем	ЮТест;
Перем	_ГуидНовогоСправочника;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	ЮТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("Тест_ДолженСоздатьПростойСправочник");
	ВсеТесты.Добавить("Тест_ДолженСоздатьПростойСправочникЧерезМетод_СоздатьДанныеПоМакетам");
	ВсеТесты.Добавить("Тест_ДолженСоздатьПростойСправочникВРежимеОбменДаннымиЗагрузка");
	ВсеТесты.Добавить("Тест_ДолженСоздатьПростойСправочникВРежимеОбменДаннымиЗагрузка_ТЧ");
	ВсеТесты.Добавить("Тест_ДолженСоздатьИерархическийСправочникСПомощьюДополнительныхСвойств");
	ВсеТесты.Добавить("Тест_ДолженСоздатьИерархическийСправочникСПомощьюДополнительныхСвойствПоНаименованию");
	ВсеТесты.Добавить("Тест_ДолженСоздатьСправочник2_СРеквизитом_ПланСчетов");
	ВсеТесты.Добавить("Тест_ДолженСоздатьЕщеНеЗаписанныйОбъектПростогоСправочника");
	ВсеТесты.Добавить("Тест_ДолженПроверитьИзменениеПредопределенногоСправочника");
	ВсеТесты.Добавить("Тест_ДолженПроверитьИзменениеПредопределенногоСправочникаПоГуид");
	ВсеТесты.Добавить("Тест_ДолженПроверитьНаличиеОбъектаИБ");
	ВсеТесты.Добавить("Тест_ДолженСоздатьДваПростыхСправочника");
	ВсеТесты.Добавить("Тест_ДолженСоздатьДваПростыхСправочника_с_ОдинаковымИменемПеременной");
	ВсеТесты.Добавить("Тест_ДолженСоздатьСвязанныеСправочники");
	ВсеТесты.Добавить("Тест_ДолженСоздатьСправочникСРеквизитомПустаяСсылка");
	ВсеТесты.Добавить("Тест_ДолженСоздатьГруппуСправочникаИДочернийЭлемент");
	ВсеТесты.Добавить("Тест_ДолженСоздатьОбъектСДвумяСтрокамиВТабличнойЧасти");
	ВсеТесты.Добавить("Тест_ДолженСоздатьОбъектСЗаполненымРеквизитомТипаПеречисление");
	ВсеТесты.Добавить("Тест_ДолженСоздатьОбъектСЗаполненнымРеквизитомИзПредопределенныхЗначенийСправочника");
	ВсеТесты.Добавить("Тест_ДолженСоздатьДокументСДвумяСтрокамиВТабличнойЧасти");
	ВсеТесты.Добавить("Тест_ДолженСоздатьДокументНаТекущуюДату");
	ВсеТесты.Добавить("Тест_ДолженСоздатьДокумент_РежимЗаписи_Проведение");
	ВсеТесты.Добавить("Тест_ДолженСоздатьСправочникПослеДокументаСДвумяСтрокамиВТабличнойЧасти");
	ВсеТесты.Добавить("Тест_ДолженСоздатьДвеЗаписиВРегистреСведений");
	ВсеТесты.Добавить("Тест_НеДолженСоздатьДвеЗаписиСРазнымиИзмерениямиВРегистреСведенийЧерезНаборЗаписей");
	ВсеТесты.Добавить("Тест_ДолженСоздатьДваНабораЗаписейВРегистреСведенийЧерезНаборЗаписей");
	ВсеТесты.Добавить("Тест_ДолженСоздатьДвеЗаписиВРегистреСведений_ВыполнивПоискЭлементаПоНаименованию");
	ВсеТесты.Добавить("Тест_ДолженСоздатьПользователяИБ_ВКоде");
	ВсеТесты.Добавить("Тест_ДолженСоздатьПользователяИБ_ПоМакету");
	ВсеТесты.Добавить("Тест_ДолженСоздатьЭлементИЗаполнитьРеквизитНайденныйПоКоду");
	ВсеТесты.Добавить("Тест_ДолженСоздатьЭлементИЗаполнитьРеквизитНайденныйПоНаименованию");
	ВсеТесты.Добавить("Тест_ДолженСоздатьЭлементИЗаполнитьРеквизитПоискомПоГУИДу");
	ВсеТесты.Добавить("Тест_ДолженСоздатьПростойСправочникПоискомПоГуидуСсылки");
	ВсеТесты.Добавить("Тест_ДолженНайтиИПерезаполнитьПростойСправочникПоискомПоГуидуСсылки");
	ВсеТесты.Добавить("Тест_ДолженУдалитьСозданныеДанные_ПростойСправочник");
	ВсеТесты.Добавить("Тест_ДолженУдалитьСозданныеДанные_ДваПростыхСправочника");
	ВсеТесты.Добавить("Тест_ДолженСоздатьИзДвухМакетовДваПростыхСправочника");
	ВсеТесты.Добавить("Тест_ДолженСоздатьИзДвухМакетовСвязанныеСправочники");
	ВсеТесты.Добавить("Тест_ДолженСоздатьИзДвухМакетовСвязанныеСправочникиЧерезМетод_СоздатьДанныеПоМакетам");
	ВсеТесты.Добавить("Тест_ДолженСоздатьОднуЗаписьРегистраНакопления");
	ВсеТесты.Добавить("Тест_ДолженСоздатьДвеЗаписиРегистраНакопления");
	ВсеТесты.Добавить("Тест_ДолженСоздатьДвеЗаписиРегистраНакопленияУКоторыхЯвноЗаданВидДвижения");
	ВсеТесты.Добавить("Тест_ДолженСоздатьДвеЗаписиРегистраСведенийПодчиненномРегистратору");
	ВсеТесты.Добавить("Тест_ДолженСоздатьПростойБизнесПроцесс");
	ВсеТесты.Добавить("Тест_ДолженПолучитьИсключениеНеверныйРежимПоиска");
	ВсеТесты.Добавить("Тест_ДолженПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуКоду");
	ВсеТесты.Добавить("Тест_ДолженПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуНаименованию");
	ВсеТесты.Добавить("ТестДолжен_СоздатьСправочник2_с_РеквизитомСоставногоТипа");
	ВсеТесты.Добавить("ТестДолжен_СоздатьСправочник2_с_РеквизитомСоставногоТипа_и_ПустойСсылкой");
	ВсеТесты.Добавить("Тест_ДолженСоздатьОднуЗаписьРегистраНакопленияСПоискомДокументаПоНомеру");

	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();
	
	_ГуидНовогоСправочника = "a72ec81b-d17d-4d2f-9a47-2ffb2e3234c4";
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

Процедура Тест_ДолженСоздатьПростойСправочник() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочника");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ПроверитьСозданиеПростогоСправочника(ТестовыеДанные);
КонецПроцедуры

Процедура Тест_ДолженСоздатьПростойСправочникЧерезМетод_СоздатьДанныеПоМакетам() Экспорт
	ТестовыеДанные = ЮТест.СоздатьДанныеПоМакетам(ЭтотОбъект, "СозданиеПростогоСправочника");
	
	ПроверитьСозданиеПростогоСправочника(ТестовыеДанные);
КонецПроцедуры

Процедура ПроверитьСозданиеПростогоСправочника(ТестовыеДанные)
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	ЮТест.ПроверитьРавенство("Тестовое наименование", ТестовыеДанные.ПростойСправочник.Наименование);
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	ЮТест.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево);
КонецПроцедуры

Процедура Тест_ДолженСоздатьПростойСправочникВРежимеОбменДаннымиЗагрузка() Экспорт
	ЗапрещенноеНаименование = Справочники.ПростойСправочник.ПолучитьЗапрещенноеНаименование(0);
	
	КоллекцияПараметров = Новый Структура("Наименование", ЗапрещенноеНаименование);
	НовыйТабДок = ПолучитьМакетДанныхДоступа("СозданиеСправочникаСПомощьюОбменДаннымиЗагрузка", КоллекцияПараметров);
	
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(НовыйТабДок);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	//ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	//ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	ЮТест.ПроверитьРавенство(ЗапрещенноеНаименование, ТестовыеДанные.ПростойСправочник.Наименование);
	//ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	//ЮТест.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево);
КонецПроцедуры

Процедура Тест_ДолженСоздатьПростойСправочникВРежимеОбменДаннымиЗагрузка_ТЧ() Экспорт
	ЗапрещенноеНаименование = Справочники.ПростойСправочник.ПолучитьЗапрещенноеНаименование(0);
	
	КоллекцияПараметров = Новый Структура("Наименование", ЗапрещенноеНаименование);
	НовыйТабДок = ПолучитьМакетДанныхДоступа("СозданиеСправочникаСПомощьюТЧ_ОбменДаннымиЗагрузка", КоллекцияПараметров);
	
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(НовыйТабДок);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	//ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	//ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	ЮТест.ПроверитьРавенство(ЗапрещенноеНаименование, ТестовыеДанные.ПростойСправочник.Наименование);
	//ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	//ЮТест.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево);
КонецПроцедуры

Процедура Тест_ДолженСоздатьИерархическийСправочникСПомощьюДополнительныхСвойств() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочникаСПомощьюДополнительныхСвойств");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура Тест_ДолженСоздатьИерархическийСправочникСПомощьюДополнительныхСвойствПоНаименованию() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочникаСПомощьюДополнительныхСвойствПоНаименованию");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура Тест_ДолженСоздатьСправочник2_СРеквизитом_ПланСчетов() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочникаСРеквизитом_ПланСчетов");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник2"), "Ожидали, что есть переменная 'ПростойСправочник'");
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник2, "СправочникСсылка.ПростойСправочник2");
	ЮТест.ПроверитьРавенство("Тест", ТестовыеДанные.ПростойСправочник2.Наименование);
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник2.Счет, "ПланСчетовСсылка.ПланСчетов1");
	ЮТест.ПроверитьРавенство(ПланыСчетов.ПланСчетов1.Счет01, ТестовыеДанные.ПростойСправочник2.Счет, "ПланыСчетов.ПланСчетов1.Счет01, ТестовыеДанные.ПростойСправочник2.Счет");
КонецПроцедуры

Процедура Тест_ДолженСоздатьЕщеНеЗаписанныйОбъектПростогоСправочника() Экспорт
	Макет = ПолучитьМакет("СозданиеЕщеНеЗаписанногоОбъектаПростогоСправочника");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникОбъект.ПростойСправочник");
	ЮТест.ПроверитьРавенство("Тестовое наименование", ТестовыеДанные.ПростойСправочник.Наименование);
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	ЮТест.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево);
КонецПроцедуры

Процедура Тест_ДолженПроверитьИзменениеПредопределенногоСправочника() Экспорт
	Макет = ПолучитьМакет("ИзменениеПредопределенногоСправочника");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	ЮТест.ПроверитьРавенство(Справочники.ПростойСправочник.ПредопределенноеЗначение1, ТестовыеДанные.ПростойСправочник);
	ЮТест.ПроверитьРавенство("Новое значение", ТестовыеДанные.ПростойСправочник.Наименование);
КонецПроцедуры

Процедура Тест_ДолженПроверитьИзменениеПредопределенногоСправочникаПоГуид() //Экспорт
	Макет = ПолучитьМакет("ИзменениеПредопределенногоСправочникаПоГуид");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	ЮТест.ПроверитьРавенство(Справочники.ПростойСправочник.ПредопределенноеЗначение1, ТестовыеДанные.ПростойСправочник);
	ЮТест.ПроверитьРавенство("Новое значение", ТестовыеДанные.ПростойСправочник.Наименование);
КонецПроцедуры

Процедура Тест_ДолженПроверитьНаличиеОбъектаИБ() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочника");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	лСсылка = ТестовыеДанные.ПростойСправочник;
		ЮТест.ПроверитьНаличиеОбъектаИБ(лСсылка, "ТестовыеДанные.ПростойСправочник");
	лОбъект = лСсылка.ПолучитьОбъект();
	лОбъект.Удалить();
	
	стрОшибка = "";
	Попытка
		ЮТест.ПроверитьНаличиеОбъектаИБ(лСсылка, "ТестовыеДанные.ПростойСправочник после удаления");
		былоИсключение = Ложь;
	Исключение
		былоИсключение = Истина;
		стрОшибка = ОписаниеОшибки();
	КонецПопытки;
		ЮТест.ПроверитьИстину(былоИсключение, "Ожидал исключение, а его не было");
		ЮТест.ПроверитьВхождение(стрОшибка, "Ожидали существование объекта в ИБ, а получили объект не найден <<Объект не найден>");
КонецПроцедуры

Процедура Тест_ДолженСоздатьДваПростыхСправочника() Экспорт
	Макет = ПолучитьМакет("СозданиеДвухПростыхСправочников");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	ЮТест.ПроверитьРавенство("Тестовая группа товаров", ТестовыеДанные.ПростойСправочник.Наименование);
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	ЮТест.ПроверитьРавенство(Ложь, ТестовыеДанные.ПростойСправочник.РеквизитБулево);
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник2"), "Ожидали, что есть переменная 'ПростойСправочник2'");
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник2, "СправочникСсылка.ПростойСправочник2");
	ЮТест.ПроверитьРавенство("Тест", ТестовыеДанные.ПростойСправочник2.Наименование);
КонецПроцедуры

Процедура Тест_ДолженСоздатьДваПростыхСправочника_с_ОдинаковымИменемПеременной() Экспорт
	Макет = ПолучитьМакет("СозданиеДвухПростыхСправочников_с_ОдинаковымИменемПеременной");
	Попытка
		ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	Исключение
		Возврат;
	КонецПопытки;
	ВызватьИсключение "Должны были получить исключение, а его не было";	
КонецПроцедуры

Процедура Тест_ДолженСоздатьСвязанныеСправочники() Экспорт
	Макет = ПолучитьМакет("СозданиеСвязанныхСправочников");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура Тест_ДолженСоздатьСправочникСРеквизитомПустаяСсылка() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочникаСРеквизитомПустаяСсылка");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(1, ТестовыеДанные.Количество());
	
	//ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	ЮТест.ПроверитьРавенство(Справочники.ПростойСправочник.ПустаяСсылка(), ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура Тест_ДолженСоздатьГруппуСправочникаИДочернийЭлемент() Экспорт
	Макет = ПолучитьМакет("СозданиеГруппыСправочникаИДочернегоЭлемента");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("Группа"), "Ожидали, что есть переменная 'Группа'");
	ЮТест.ПроверитьИстину(ТестовыеДанные.Группа.ЭтоГруппа, "Ожидали, что созданный элемент является группой");
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("Элемент"), "Ожидали, что есть переменная 'Элемент'");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.Группа, ТестовыеДанные.Элемент.Родитель);
КонецПроцедуры

Процедура Тест_ДолженСоздатьОбъектСДвумяСтрокамиВТабличнойЧасти() Экспорт
	Макет = ПолучитьМакет("СозданиеОбъектаСДвумяСтрокамиВТабличнойЧасти");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(4, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("СправочникСТабЧастью"), "Ожидали, что есть переменная 'СправочникСТабЧастью'");
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.СправочникСТабЧастью.Состав.Количество());
	
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.СправочникСТабЧастью.Состав[0].ПростойСправочник);
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник2_1, ТестовыеДанные.СправочникСТабЧастью.Состав[0].ПростойСправочник2);
	ЮТест.ПроверитьИстину(ТестовыеДанные.СправочникСТабЧастью.Состав[0].РеквизитБулево);
	
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.СправочникСТабЧастью.Состав[1].ПростойСправочник);
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник2_2, ТестовыеДанные.СправочникСТабЧастью.Состав[1].ПростойСправочник2);
	ЮТест.ПроверитьЛожь(ТестовыеДанные.СправочникСТабЧастью.Состав[1].РеквизитБулево);
КонецПроцедуры

Процедура Тест_ДолженСоздатьОбъектСЗаполненымРеквизитомТипаПеречисление() Экспорт
	Макет = ПолучитьМакет("СозданиеОбъектаСЗаполненымРеквизитомТипаПеречисление");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(1, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	ЮТест.ПроверитьРавенство(Перечисления.Перечисление1.ЗначениеПеречисления1, ТестовыеДанные.ПростойСправочник.РеквизитПеречисление);
КонецПроцедуры

Процедура Тест_ДолженСоздатьОбъектСЗаполненнымРеквизитомИзПредопределенныхЗначенийСправочника() Экспорт
	Макет = ПолучитьМакет("СозданиеОбъектаСЗаполненнымРеквизитомИзПредопределенныхЗначенийСправочника");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(1, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("Элемент"), "Ожидали, что есть переменная 'Элемент'");
	ЮТест.ПроверитьРавенство(Справочники.ПростойСправочник.ПредопределенноеЗначение1, ТестовыеДанные.Элемент.ПростойСправочник);
КонецПроцедуры

Процедура Тест_ДолженСоздатьДокументСДвумяСтрокамиВТабличнойЧасти() Экспорт
	Макет = ПолучитьМакет("СозданиеДокументаСДвумяСтрокамиВТабличнойЧасти");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(4, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("Документ"), "Ожидали, что есть переменная 'Документ'");
	ЮТест.ПроверитьТип(ТестовыеДанные.Документ, "ДокументСсылка.Документ1");
	ЮТест.ПроверитьРавенство(Дата("20130801"), ТестовыеДанные.Документ.Дата);
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.Документ.ПростойСправочник);
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.Документ.Состав.Количество());
	
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, ТестовыеДанные.Документ.Состав[0].ПростойСправочник2);
	ЮТест.ПроверитьРавенство(150, ТестовыеДанные.Документ.Состав[0].РеквизитЧисло);
	ЮТест.ПроверитьЛожь(ТестовыеДанные.Документ.Состав[0].РеквизитБулево);
	
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, ТестовыеДанные.Документ.Состав[1].ПростойСправочник2);
	ЮТест.ПроверитьРавенство(0, ТестовыеДанные.Документ.Состав[1].РеквизитЧисло);
	ЮТест.ПроверитьИстину(ТестовыеДанные.Документ.Состав[1].РеквизитБулево);
КонецПроцедуры

Процедура Тест_ДолженСоздатьДокументНаТекущуюДату() Экспорт
	Макет = ПолучитьМакет("СозданиеДокументаНаТекущуюДату");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("Документ"), "Ожидали, что есть переменная 'Документ'");
	ЮТест.ПроверитьТип(ТестовыеДанные.Документ, "ДокументСсылка.Документ1");
	ЮТест.ПроверитьМеньше(ТекущаяДата() - ТестовыеДанные.Документ.Дата, 2, "Разница между ТекущаяДата() и ТестовыеДанные.Документ.Дата должна быть менее 2 секунд");
КонецПроцедуры

Процедура Тест_ДолженСоздатьДокумент_РежимЗаписи_Проведение() Экспорт
	Макет = ПолучитьМакет("СозданиеДокумента_РежимЗаписи_Проведение");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("Документ"), "Ожидали, что есть переменная 'Документ'");
	ЮТест.ПроверитьТип(ТестовыеДанные.Документ, "ДокументСсылка.Документ1");
	ЮТест.Проверить(ТестовыеДанные.Документ.Проведен, "ТестовыеДанные.Документ.Проведен");
	
	ЮТест.Проверить(ТестовыеДанные.Документ2.Проведен, "ТестовыеДанные2.Документ.Проведен");
КонецПроцедуры

Процедура Тест_ДолженСоздатьСправочникПослеДокументаСДвумяСтрокамиВТабличнойЧасти() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочникаПослеДокументаСДвумяСтрокамиВТабличнойЧасти");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(5, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("Документ"), "Ожидали, что есть переменная 'Документ'");
	ЮТест.ПроверитьТип(ТестовыеДанные.Документ, "ДокументСсылка.Документ1");
	ЮТест.ПроверитьРавенство(Дата("20130801"), ТестовыеДанные.Документ.Дата);
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.Документ.ПростойСправочник);
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.Документ.Состав.Количество());
	
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, ТестовыеДанные.Документ.Состав[0].ПростойСправочник2);
	ЮТест.ПроверитьРавенство(150, ТестовыеДанные.Документ.Состав[0].РеквизитЧисло);
	ЮТест.ПроверитьЛожь(ТестовыеДанные.Документ.Состав[0].РеквизитБулево);
	
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, ТестовыеДанные.Документ.Состав[1].ПростойСправочник2);
	ЮТест.ПроверитьРавенство(0, ТестовыеДанные.Документ.Состав[1].РеквизитЧисло);
	ЮТест.ПроверитьИстину(ТестовыеДанные.Документ.Состав[1].РеквизитБулево);

	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник23"), "Ожидали, что есть переменная 'ПростойСправочник23'");
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник23, "СправочникСсылка.ПростойСправочник2");
	ЮТест.ПроверитьРавенство("Тест3", ТестовыеДанные.ПростойСправочник23.Наименование);
КонецПроцедуры

Процедура Тест_ДолженСоздатьДвеЗаписиВРегистреСведений() Экспорт
	Макет = ПолучитьМакет("СозданиеДвухЗаписейВРегистреСведений");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(5, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ЗаписьРегистра1"), "Ожидали, что есть переменная 'ЗаписьРегистра1'");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ЗаписьРегистра1.ПростойСправочник);
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, ТестовыеДанные.ЗаписьРегистра1.ПростойСправочник2);
	ЮТест.ПроверитьРавенство(300, ТестовыеДанные.ЗаписьРегистра1.РесурсЧисло);
	ЮТест.ПроверитьЛожь(ТестовыеДанные.ЗаписьРегистра1.РесурсБулево);
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ЗаписьРегистра2"), "Ожидали, что есть переменная 'ЗаписьРегистра2'");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ЗаписьРегистра2.ПростойСправочник);
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, ТестовыеДанные.ЗаписьРегистра2.ПростойСправочник2);
	ЮТест.ПроверитьРавенство(400, ТестовыеДанные.ЗаписьРегистра2.РесурсЧисло);
	ЮТест.ПроверитьИстину(ТестовыеДанные.ЗаписьРегистра2.РесурсБулево);
КонецПроцедуры

Процедура Тест_НеДолженСоздатьДвеЗаписиСРазнымиИзмерениямиВРегистреСведенийЧерезНаборЗаписей() Экспорт
	Макет = ПолучитьМакет("СозданиеДвухЗаписейВРегистреСведенийЧерезНаборЗаписей");
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Макет);
	ЮТест.ПроверитьМетодНеВыполнился(ЮТест, "СоздатьДанныеПоТабличномуДокументу", МассивПараметров, "Запись не верна! Значение поля не соответствует установленному отбору: РегистрСведений1:");
КонецПроцедуры

Процедура Тест_ДолженСоздатьДваНабораЗаписейВРегистреСведенийЧерезНаборЗаписей() Экспорт
	ТипМетаданного = "РегистрСведений";
	ВидМетаданного = "РегистрСведений1";
	КоличествоДо = ЮТест.ПолучитьКоличествоЭлементовРегистраПоОтбору(ТипМетаданного, ВидМетаданного);
	
	Макет = ПолучитьМакет("СозданиеДвухНаборовЗаписейВРегистреСведений");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(5, ТестовыеДанные.Количество());
	
	КоличествоПосле = ЮТест.ПолучитьКоличествоЭлементовРегистраПоОтбору(ТипМетаданного, ВидМетаданного);
	ЮТест.ПроверитьРавенство(КоличествоДо + 2, КоличествоПосле, "КоличествоДо + 2, КоличествоПосле");
	
	//ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ЗаписьРегистра1"), "Ожидали, что есть переменная 'ЗаписьРегистра1'");
	//ЮТест.Проверить(ТестовыеДанные.ЗаписьРегистра1.Выбран(), "Ожидали, что ЗаписьРегистра1.Выбран() вернет Ложь, а вернулась Истина");
	//ЮТест.ПроверитьТип(ТестовыеДанные.ЗаписьРегистра1, "РегистрСведенийНаборЗаписей.РегистрСведений1");
	//ЮТест.ПроверитьРавенство(2, ТестовыеДанные.ЗаписьРегистра1.Количество(), "ТестовыеДанные.ЗаписьРегистра1.Количество()");
	//
	//запись = ТестовыеДанные.ЗаписьРегистра1[0];
	//ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	//ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.ПростойСправочник2);
	//ЮТест.ПроверитьРавенство(300, запись.РесурсЧисло);
	//ЮТест.ПроверитьЛожь(запись.РесурсБулево);
	//
	//запись = ТестовыеДанные.ЗаписьРегистра1[1];
	////ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ЗаписьРегистра2"), "Ожидали, что есть переменная 'ЗаписьРегистра2'");
	//ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	//ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, запись.ПростойСправочник2);
	//ЮТест.ПроверитьРавенство(400, запись.РесурсЧисло);
	//ЮТест.ПроверитьИстину(запись.РесурсБулево);
КонецПроцедуры

Процедура Тест_ДолженСоздатьДвеЗаписиВРегистреСведений_ВыполнивПоискЭлементаПоНаименованию() Экспорт
	Макет = ПолучитьМакет("СозданиеДвухЗаписейВРегистреСведений_ПоискЭлементаПоНаименованию");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(5, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ЗаписьРегистра1"), "Ожидали, что есть переменная 'ЗаписьРегистра1'");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ЗаписьРегистра1.ПростойСправочник);
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, ТестовыеДанные.ЗаписьРегистра1.ПростойСправочник2);
	ЮТест.ПроверитьРавенство(300, ТестовыеДанные.ЗаписьРегистра1.РесурсЧисло);
	ЮТест.ПроверитьЛожь(ТестовыеДанные.ЗаписьРегистра1.РесурсБулево);
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ЗаписьРегистра2"), "Ожидали, что есть переменная 'ЗаписьРегистра2'");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ЗаписьРегистра2.ПростойСправочник);
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, ТестовыеДанные.ЗаписьРегистра2.ПростойСправочник2);
	ЮТест.ПроверитьРавенство(400, ТестовыеДанные.ЗаписьРегистра2.РесурсЧисло);
	ЮТест.ПроверитьИстину(ТестовыеДанные.ЗаписьРегистра2.РесурсБулево);
КонецПроцедуры

Процедура Тест_ДолженСоздатьПользователяИБ_ВКоде() Экспорт
	лИмяПользователя = "ТестИмя";
	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяПользователя);
	Если лПользователь <> Неопределено Тогда
		лПользователь.Удалить();
	КонецЕсли;
	
	массивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	количествоДо = массивПользователей.Количество();
	
	параметрыПользователя = Новый Структура;
	параметрыПользователя.Вставить("Имя", лИмяПользователя);
	параметрыПользователя.Вставить("ПолноеИмя", лИмяПользователя);
	параметрыПользователя.Вставить("АутентификацияСтандартная", Истина);
	параметрыПользователя.Вставить("ОсновнойИнтерфейс", ""); //Метаданные.Интерфейсы.Администратор);
	//параметрыПользователя.Вставить("Пароль", "пароль");
	параметрыПользователя.Вставить("ПоказыватьВСпискеВыбора", Истина);
	//параметрыПользователя.Вставить("Язык", Метаданные.Языки.Русский);
	массивРолей = Новый Массив;
	массивРолей.Добавить(Метаданные.Роли.Роль1);
	параметрыПользователя.Вставить("Роли", массивРолей);
	
	лПользователь = ЮТест.СоздатьПользователяИБ(параметрыПользователя);
		ЮТест.ПроверитьТип(лПользователь, "ПользовательИнформационнойБазы", "лПользователь");
		ЮТест.ПроверитьИстину(лПользователь.Роли.Содержит(Метаданные.Роли.Роль1), "лПользователь.РолиПользователя.Содержить");
		
	массивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	количествоПосле = массивПользователей.Количество();
		ЮТест.ПроверитьРавенство(количествоДо + 1, количествоПосле, "количествоДо + 1, количествоПосле");
		
	//лПользователь.Удалить();
КонецПроцедуры

Процедура Тест_ДолженСоздатьПользователяИБ_ПоМакету() Экспорт
	ИмяПеременнойПользователь = "Пользователь1";
	лИмяПользователя = "ТестИмя";
	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяПользователя);
	Если лПользователь <> Неопределено Тогда
		лПользователь.Удалить();
	КонецЕсли;
	
	массивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	количествоДо = массивПользователей.Количество();	
	
	//Макет = ПолучитьМакет("СозданиеОдногоПользователяИБ");
	//ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	КоллекцияПараметров = Новый Структура("ИмяПеременнойПользователь, ПользовательИмя", ИмяПеременнойПользователь, лИмяПользователя);
	НовыйТабДок = ПолучитьМакетДанныхДоступа("СозданиеОдногоПользователяИБ", КоллекцияПараметров);
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(НовыйТабДок);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство(ИмяПеременнойПользователь), "Ожидали, что есть переменная '"+ИмяПеременнойПользователь+"'");
	НовыйПользователь = ТестовыеДанные.Пользователь1;
	ЮТест.ПроверитьТип(НовыйПользователь, "ПользовательИнформационнойБазы");
	ЮТест.ПроверитьРавенство(лИмяПользователя, НовыйПользователь.Имя);
	ЮТест.ПроверитьРавенство(НовыйПользователь.РежимЗапуска, РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение);
	ЮТест.ПроверитьИстину(НовыйПользователь.Роли.Содержит(Метаданные.Роли.Роль1), "лПользователь.РолиПользователя.Содержит");
	ЮТест.ПроверитьИстину(НовыйПользователь.Роли.Содержит(Метаданные.Роли.ПолныеПрава), "лПользователь.ПолныеПрава.Содержит");
		
	массивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	количествоПосле = массивПользователей.Количество();
		ЮТест.ПроверитьРавенство(количествоДо + 1, количествоПосле, "количествоДо + 1, количествоПосле");
		
	лПользователь = ТестовыеДанные.Пользователь1;
	//лПользователь.Удалить();
КонецПроцедуры

Процедура Тест_ДолженСоздатьЭлементИЗаполнитьРеквизитНайденныйПоКоду() Экспорт
	Макет = ПолучитьМакет("СозданиеЭлементаИЗаполнениеРеквизитаПоискомПоКоду");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура Тест_ДолженСоздатьЭлементИЗаполнитьРеквизитНайденныйПоНаименованию() Экспорт
	Макет = ПолучитьМакет("СозданиеЭлементаИЗаполнениеРеквизитаПоискомПоНаименованию");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура Тест_ДолженСоздатьЭлементИЗаполнитьРеквизитПоискомПоГУИДу() Экспорт
	Макет = ПолучитьМакет("СозданиеЭлементаИЗаполнениеРеквизитаПоискомПоГУИДу");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(1, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	ЮТест.ПроверитьРавенство(Справочники.ПростойСправочник.ПредопределенноеЗначение1, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
КонецПроцедуры

Процедура Тест_ДолженСоздатьПростойСправочникПоискомПоГуидуСсылки() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочникаПоГуидСсылки");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	ЮТест.ПроверитьРавенство(Новый УникальныйИдентификатор(_ГуидНовогоСправочника), ТестовыеДанные.ПростойСправочник.УникальныйИдентификатор());
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	ЮТест.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево, "ТестовыеДанные.ПростойСправочник.РеквизитБулево");
	
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитПеречисление, "ПеречислениеСсылка.Перечисление1");
	ЮТест.ПроверитьРавенство(Перечисления.Перечисление1.ЗначениеПеречисления1, ТестовыеДанные.ПростойСправочник.РеквизитПеречисление, "ТестовыеДанные.ПростойСправочник.РеквизитПеречисление");
КонецПроцедуры

Процедура Тест_ДолженНайтиИПерезаполнитьПростойСправочникПоискомПоГуидуСсылки() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочникаПоГуидСсылки");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	ЮТест.ПроверитьРавенство(Справочники.ПростойСправочник.ПолучитьСсылку(Новый УникальныйИдентификатор(_ГуидНовогоСправочника)), ТестовыеДанные.ПростойСправочник, "Справочники.ПростойСправочник.ПолучитьСсылку(Новый УникальныйИдентификатор(_ГуидНовогоСправочника)), ТестовыеДанные.ПростойСправочник)");
		//лОбъект = ТестовыеДанные.ПростойСправочник.ПолучитьОбъект();
		//лОбъект.РеквизитБулево = Ложь;
		//лОбъект.Записать();
		//ЮТест.ПроверитьРавенство(Ложь, ТестовыеДанные.ПростойСправочник.РеквизитБулево);
		
	Макет = ПолучитьМакет("НайтиИПерезаполнитьПростойСправочникПоГуидСсылки");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);

	ЮТест.ПроверитьРавенство(1, ТестовыеДанные.Количество(), "ТестовыеДанные.Количество()");
	
	ЮТест.ПроверитьРавенство(Новый УникальныйИдентификатор(_ГуидНовогоСправочника), ТестовыеДанные.ПростойСправочник.УникальныйИдентификатор());
	ЮТест.ПроверитьРавенство(Ложь, ТестовыеДанные.ПростойСправочник.РеквизитБулево, "ТестовыеДанные.ПростойСправочник.РеквизитБулево");
	ЮТест.ПроверитьРавенство(Перечисления.Перечисление1.ЗначениеПеречисления2, ТестовыеДанные.ПростойСправочник.РеквизитПеречисление, "ТестовыеДанные.ПростойСправочник.РеквизитПеречисление");
КонецПроцедуры

Процедура Тест_ДолженУдалитьСозданныеДанные_ПростойСправочник() Экспорт
	количествоДо = ЮТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник");
	
	Макет = ПолучитьМакет("СозданиеПростогоСправочника");

	количествоСозданныхОбъектов = 1;
	
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	количествоУдаленныхОбъектов = ЮТест.УдалитьСозданныеДанные(тестовыеДанные);
	
	количествоПосле = ЮТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник");
		ЮТест.ПроверитьРавенство(количествоПосле, количествоДо, "количествоПосле, количествоДо");
		
		ЮТест.ПроверитьРавенство(количествоУдаленныхОбъектов, количествоСозданныхОбъектов, "количествоУдаленныхОбъектов, количествоСозданныхОбъектов");
КонецПроцедуры

Процедура Тест_ДолженУдалитьСозданныеДанные_ДваПростыхСправочника() Экспорт
	количествоДо = ЮТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник") + ЮТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник2");
	
	Макет = ПолучитьМакет("СозданиеДвухПростыхСправочников");
	
	количествоСозданныхОбъектов = 2;
	
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	//количествоСозданныхОбъектов = 0;
	//ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет, количествоСозданныхОбъектов);
	//	ЮТест.ПроверитьРавенство(количествоСозданныхОбъектов, 2, "количествоСозданныхОбъектов");
	
	количествоУдаленныхОбъектов = ЮТест.УдалитьСозданныеДанные(тестовыеДанные);
	
	количествоПосле = ЮТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник") + ЮТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник2");
		ЮТест.ПроверитьРавенство(количествоПосле, количествоДо, "количествоПосле, количествоДо");
		
		ЮТест.ПроверитьРавенство(количествоУдаленныхОбъектов, количествоСозданныхОбъектов, "количествоУдаленныхОбъектов, количествоСозданныхОбъектов");
КонецПроцедуры

Процедура Тест_ДолженСоздатьИзДвухМакетовДваПростыхСправочника() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочника");
	Макет2 = ПолучитьМакет("СозданиеПростогоСправочника2");
	
	МассивМакетов = Новый Массив();
	МассивМакетов.Добавить(Макет);
	МассивМакетов.Добавить(Макет2);
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(МассивМакетов);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник"), "Ожидали, что есть переменная 'ПростойСправочник'");
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник, "СправочникСсылка.ПростойСправочник");
	ЮТест.ПроверитьРавенство("Тестовое наименование", ТестовыеДанные.ПростойСправочник.Наименование);
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник.РеквизитБулево, "Булево");
	ЮТест.ПроверитьРавенство(Истина, ТестовыеДанные.ПростойСправочник.РеквизитБулево);
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойСправочник2"), "Ожидали, что есть переменная 'ПростойСправочник2'");
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойСправочник2, "СправочникСсылка.ПростойСправочник2");
	ЮТест.ПроверитьРавенство("Тест", ТестовыеДанные.ПростойСправочник2.Наименование);
	ЮТест.ПроверитьРавенство(Ложь, ТестовыеДанные.ПростойСправочник2.РеквизитБулево);
КонецПроцедуры

Процедура Тест_ДолженСоздатьИзДвухМакетовСвязанныеСправочники() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочника");
	Макет2 = ПолучитьМакет("СозданиеОдногоСправочникаВладельцаБезПодчиненногоСправочника");
	
	МассивМакетов = Новый Массив();
	МассивМакетов.Добавить(Макет);
	МассивМакетов.Добавить(Макет2);
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(МассивМакетов);
	
	ПроверитьСозданиеИзДвухМакетовСвязанныеСправочники(ТестовыеДанные);
КонецПроцедуры

Процедура Тест_ДолженСоздатьИзДвухМакетовСвязанныеСправочникиЧерезМетод_СоздатьДанныеПоМакетам() Экспорт
	ТестовыеДанные = ЮТест.СоздатьДанныеПоМакетам(ЭтотОбъект, "СозданиеПростогоСправочника,СозданиеОдногоСправочникаВладельцаБезПодчиненногоСправочника");
		
	ПроверитьСозданиеИзДвухМакетовСвязанныеСправочники(ТестовыеДанные);
КонецПроцедуры

Процедура ПроверитьСозданиеИзДвухМакетовСвязанныеСправочники(ТестовыеДанные)
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ИерархическийСправочник"), "Ожидали, что есть переменная 'ИерархическийСправочник'");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.ИерархическийСправочник.ПростойСправочник);
	ЮТест.ПроверитьРавенство("Тестовое наименование", ТестовыеДанные.ПростойСправочник.Наименование);
КонецПроцедуры

Процедура Тест_ДолженСоздатьОднуЗаписьРегистраНакопления() Экспорт
	количествоДо = ЮТест.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопления2");
	
	Макет = ПолучитьМакет("СозданиеОднойЗаписиВРегистреНакопления");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(4, ТестовыеДанные.Количество());
	ЮТест.ПроверитьТип(ТестовыеДанные.ЗаписьРегистра1, "РегистрНакопленияНаборЗаписей.РегистрНакопления2");
	
	количествоПосле = ЮТест.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопления2");
	ЮТест.ПроверитьРавенство(количествоДо + 1, количествоПосле, "количество записей РН -> количествоДо + 2, количествоПосле");
	
	наборЗаписей = РегистрыНакопления.РегистрНакопления2.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	ЮТест.ПроверитьРавенство(1, наборЗаписей.Количество(), "количество записей РН -> 1, наборЗаписей.Количество()");
	запись = наборЗаписей[0];
	ЮТест.ПроверитьРавенство(ВидДвиженияНакопления.Приход, запись.ВидДвижения, "ВидДвиженияНакопления.Приход, запись.ВидДвижения");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.ПростойСправочник2);
	
	строкаТчДокумента = ТестовыеДанные.Документ.Состав[0];
	ЮТест.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	ЮТест.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");
КонецПроцедуры

Процедура Тест_ДолженСоздатьДвеЗаписиРегистраНакопления() Экспорт
	количествоДо = ЮТест.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопления2");
	
	Макет = ПолучитьМакет("СозданиеДвухЗаписейВРегистреНакопления");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(5, ТестовыеДанные.Количество());
	
	количествоПосле = ЮТест.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопления2");
	ЮТест.ПроверитьРавенство(количествоДо + 2, количествоПосле, "количество записей РН -> количествоДо + 2, количествоПосле");
	
	ЮТест.ПроверитьТип(ТестовыеДанные.ЗаписьРегистра1, "РегистрНакопленияНаборЗаписей.РегистрНакопления2");
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.ЗаписьРегистра1.Количество(), "ТестовыеДанные.ЗаписьРегистра1.Количество()");
	
	наборЗаписей = РегистрыНакопления.РегистрНакопления2.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	ЮТест.ПроверитьРавенство(2, наборЗаписей.Количество(), "количество записей РН -> 2, наборЗаписей.Количество()");
	
	наборЗаписей = РегистрыНакопления.РегистрНакопления2.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	ЮТест.ПроверитьРавенство(2, наборЗаписей.Количество(), "количество записей РН -> 2, наборЗаписей.Количество()");
	
	запись = наборЗаписей[0];
	ЮТест.ПроверитьРавенство(ВидДвиженияНакопления.Приход, запись.ВидДвижения, "ВидДвиженияНакопления.Приход, запись.ВидДвижения");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.ПростойСправочник2);
	
	строкаТчДокумента = ТестовыеДанные.Документ.Состав[0];
	ЮТест.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	ЮТест.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");
	
	запись = наборЗаписей[1];
	ЮТест.ПроверитьРавенство(ВидДвиженияНакопления.Приход, запись.ВидДвижения, "ВидДвиженияНакопления.Приход, запись.ВидДвижения");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, запись.ПростойСправочник2);
	
	строкаТчДокумента = ТестовыеДанные.Документ.Состав[1];
	ЮТест.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	ЮТест.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");
КонецПроцедуры

Процедура Тест_ДолженСоздатьДвеЗаписиРегистраНакопленияУКоторыхЯвноЗаданВидДвижения() Экспорт
	количествоДо = ЮТест.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопления2");
	
	Макет = ПолучитьМакет("СозданиеДвухЗаписейВРегистреНакопленияУКоторыхЯвноЗаданВидДвижения");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(5, ТестовыеДанные.Количество());
	
	количествоПосле = ЮТест.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопления2");
	ЮТест.ПроверитьРавенство(количествоДо + 2, количествоПосле, "количество записей РН -> количествоДо + 2, количествоПосле");
	
	ЮТест.ПроверитьТип(ТестовыеДанные.ЗаписьРегистра1, "РегистрНакопленияНаборЗаписей.РегистрНакопления2");
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.ЗаписьРегистра1.Количество(), "ТестовыеДанные.ЗаписьРегистра1.Количество()");
	
	наборЗаписей = РегистрыНакопления.РегистрНакопления2.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	ЮТест.ПроверитьРавенство(2, наборЗаписей.Количество(), "количество записей РН -> 2, наборЗаписей.Количество()");
	
	наборЗаписей = РегистрыНакопления.РегистрНакопления2.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	ЮТест.ПроверитьРавенство(2, наборЗаписей.Количество(), "количество записей РН -> 2, наборЗаписей.Количество()");
	
	запись = наборЗаписей[0];
	ЮТест.ПроверитьРавенство(ВидДвиженияНакопления.Расход, запись.ВидДвижения, "ВидДвиженияНакопления.Расход, запись.ВидДвижения");
	ЮТест.ПроверитьБольше(4, запись.Период - ТестовыеДанные.Документ.Дата, "запись.Период - ТестовыеДанные.Документ.Дата");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.ПростойСправочник2);
	
	строкаТчДокумента = ТестовыеДанные.Документ.Состав[0];
	ЮТест.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	ЮТест.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");
	
	запись = наборЗаписей[1];
	ЮТест.ПроверитьРавенство(ВидДвиженияНакопления.Приход, запись.ВидДвижения, "ВидДвиженияНакопления.Приход, запись.ВидДвижения");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, запись.ПростойСправочник2);
	
	строкаТчДокумента = ТестовыеДанные.Документ.Состав[1];
	ЮТест.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	ЮТест.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");
КонецПроцедуры

Процедура Тест_ДолженСоздатьДвеЗаписиРегистраСведенийПодчиненномРегистратору() Экспорт
	количествоДо = ЮТест.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрСведений", "РСПодчиненныйРегистратору");
	
	Макет = ПолучитьМакет("СозданиеДвухЗаписейВРегистреСведенийПодчиненномРегистратору");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(5, ТестовыеДанные.Количество());
	
	количествоПосле = ЮТест.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрСведений", "РСПодчиненныйРегистратору");
	ЮТест.ПроверитьРавенство(количествоДо + 2, количествоПосле, "количество записей РС -> количествоДо + 2, количествоПосле");
	
	ЮТест.ПроверитьТип(ТестовыеДанные.ЗаписьРегистра1, "РегистрСведенийНаборЗаписей.РСПодчиненныйРегистратору");
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.ЗаписьРегистра1.Количество(), "ТестовыеДанные.ЗаписьРегистра1.Количество()");
	
	наборЗаписей = РегистрыСведений.РСПодчиненныйРегистратору.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	ЮТест.ПроверитьРавенство(2, наборЗаписей.Количество(), "количество записей РС -> 2, наборЗаписей.Количество()");
	
	наборЗаписей = РегистрыСведений.РСПодчиненныйРегистратору.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	ЮТест.ПроверитьРавенство(2, наборЗаписей.Количество(), "количество записей РС -> 2, наборЗаписей.Количество()");
	
	запись = наборЗаписей[0];
	ЮТест.ПроверитьРавенство(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.ПростойСправочник2);
	
	строкаТчДокумента = ТестовыеДанные.Документ.Состав[0];
	ЮТест.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	ЮТест.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");
	
	запись = наборЗаписей[1];
	ЮТест.ПроверитьРавенство(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, запись.ПростойСправочник2);
	
	строкаТчДокумента = ТестовыеДанные.Документ.Состав[1];
	ЮТест.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	ЮТест.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");
КонецПроцедуры

Процедура Тест_ДолженСоздатьПростойБизнесПроцесс() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоБизнесПроцесса");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьРавенство(3, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("ПростойБП"), "Ожидали, что есть переменная 'ПростойБП'");
	ЮТест.ПроверитьТип(ТестовыеДанные.ПростойБП, "БизнесПроцессСсылка.БизнесПроцесс1");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойБП.ПростойСправочник, ТестовыеДанные.ПростойСправочник);
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойБП, ТестовыеДанные.Действие1.БизнесПроцесс);
	ЮТест.ПроверитьМеньше(ТекущаяДата() - ТестовыеДанные.ПростойБП.Дата, 2, "Разница между ТекущаяДата() и ТестовыеДанные.ПростойБП.Дата должна быть менее 2 секунд");
	
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.ПростойБП.ТабличнаяЧасть1.Количество());
	
	строкаТч = ТестовыеДанные.ПростойБП.ТабличнаяЧасть1[0];
	ЮТест.ПроверитьРавенство("Значение1", строкаТч.Реквизит1, "строкаТч.Реквизит1");
	//ЮТест.ПроверитьРавенство(150, ТестовыеДанные.Документ.Состав[0].РеквизитЧисло);

	строкаТч = ТестовыеДанные.ПростойБП.ТабличнаяЧасть1[1];
	ЮТест.ПроверитьРавенство("Значение2", строкаТч.Реквизит1, "строкаТч.Реквизит1");
	//ЮТест.ПроверитьРавенство(150, ТестовыеДанные.Документ.Состав[0].РеквизитЧисло);
КонецПроцедуры

// {Пессимистические тесты
Процедура Тест_ДолженПолучитьИсключениеНеверныйРежимПоиска() Экспорт
	Макет = ПолучитьМакет("Тест_ДолженПолучитьИсключениеНеверныйРежимПоиска");
	ТекстИсключения = "";
	ОжидаемоеИсключение = "НеверныйРежимПоиска";
	Попытка
		ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	Исключение
		ТекстИсключения = ОписаниеОшибки();
	КонецПопытки;
	
	ЮТест.ПроверитьВхождение(ТекстИсключения, ОжидаемоеИсключение, "Ожидали исключение <" + ОжидаемоеИсключение + ">");
КонецПроцедуры

Процедура Тест_ДолженПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуКоду() Экспорт
	Макет = ПолучитьМакет("Тест_ДолженПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуКоду");
	ТекстИсключения = "";
	ОжидаемоеИсключение = "ЗначениеНеНайдено";
	Попытка
		ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	Исключение
		ТекстИсключения = ОписаниеОшибки();
	КонецПопытки;
	
	ЮТест.ПроверитьВхождение(ТекстИсключения, ОжидаемоеИсключение, "Ожидали исключение <" + ОжидаемоеИсключение + ">");
КонецПроцедуры

Процедура Тест_ДолженПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуНаименованию() Экспорт
	Макет = ПолучитьМакет("Тест_ДолженПолучитьИсключениеПриПопыткеСоздатьЭлементИЗаполнитьРеквизитПоНеверномуНаименованию");
	ТекстИсключения = "";
	ОжидаемоеИсключение = "ЗначениеНеНайдено";
	Попытка
		ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	Исключение
		ТекстИсключения = ОписаниеОшибки();
	КонецПопытки;
	
	ЮТест.ПроверитьВхождение(ТекстИсключения, ОжидаемоеИсключение, "Ожидали исключение <" + ОжидаемоеИсключение + ">");
КонецПроцедуры

// }

Процедура ТестДолжен_СоздатьСправочник2_с_РеквизитомСоставногоТипа() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочника2_с_РеквизитомСоставногоТипа");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьИстину(ТестовыеДанные.Свойство("СправочникСТабЧастью"), "Ожидали, что есть переменная 'СправочникСТабЧастью'");
	ЮТест.ПроверитьРавенство(0, ТестовыеДанные.СправочникСТабЧастью.Состав.Количество());
	
	ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, ТестовыеДанные.СправочникСТабЧастью.РеквизитСоставногоТипа);
КонецПроцедуры

Процедура ТестДолжен_СоздатьСправочник2_с_РеквизитомСоставногоТипа_и_ПустойСсылкой() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочника2_с_РеквизитомСоставногоТипа_и_ПустойСсылкой");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(1, ТестовыеДанные.Количество());
	
	ЮТест.ПроверитьРавенство(Справочники.ПростойСправочник.ПустаяСсылка(), ТестовыеДанные.СправочникСТабЧастью.РеквизитСоставногоТипа);
КонецПроцедуры

Процедура Тест_ДолженСоздатьОднуЗаписьРегистраНакопленияСПоискомДокументаПоНомеру() Экспорт
	количествоДо = ЮТест.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопления2");
	
	Макет = ПолучитьМакет("РегистрНакопления_ПоискРегистратора");
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЮТест.ПроверитьТип(ТестовыеДанные, "Структура");
	ЮТест.ПроверитьРавенство(2, ТестовыеДанные.Количество());
	ЮТест.ПроверитьТип(ТестовыеДанные.РегистрНакопления2, "РегистрНакопленияНаборЗаписей.РегистрНакопления2");
	
	количествоПосле = ЮТест.ПолучитьКоличествоЭлементовРегистраПоОтбору("РегистрНакопления", "РегистрНакопления2");
	ЮТест.ПроверитьРавенство(количествоДо + 1, количествоПосле, "количество записей РН -> количествоДо + 2, количествоПосле");
	
	наборЗаписей = РегистрыНакопления.РегистрНакопления2.СоздатьНаборЗаписей();
	наборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Прочитать();
	ЮТест.ПроверитьРавенство(1, наборЗаписей.Количество(), "количество записей РН -> 1, наборЗаписей.Количество()");
	запись = наборЗаписей[0];
	//ЮТест.ПроверитьРавенство(ТестовыеДанные.Документ.Дата, запись.Период, "ТестовыеДанные.Документ.Дата, запись.Период");
	ЮТест.ПроверитьРавенство(ТестовыеДанные.Документ, запись.Регистратор, "ТестовыеДанные.Документ, запись.Регистратор");
	//ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, запись.ПростойСправочник);
	//ЮТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник21, запись.ПростойСправочник2);
	//
	//строкаТчДокумента = ТестовыеДанные.Документ.Состав[0];
	//ЮТест.ПроверитьРавенство(строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло, "строкаТчДокумента.РеквизитЧисло, запись.РесурсЧисло");
	//ЮТест.ПроверитьРавенство(строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево, "строкаТчДокумента.РеквизитБулево, запись.РеквизитБулево");
КонецПроцедуры

Функция ПолучитьМакетДанныхДоступа(ИмяМакета, КоллекцияПараметров) Экспорт

	Макет = ПолучитьМакет(ИмяМакета);
	ЗаполнитьЗначенияСвойств(Макет.Параметры, КоллекцияПараметров);
		//Если Не КоллекцияПараметров.Свойство("ИмяПользователя") Тогда
		//	Макет.Параметры.ИмяПользователя = ИмяНовогоПользователя;
		//КонецЕсли;
	
	НовыйТабДок = Новый ТабличныйДокумент;
	НовыйТабДок.Вывести(Макет);

	Возврат НовыйТабДок;
КонецФункции
