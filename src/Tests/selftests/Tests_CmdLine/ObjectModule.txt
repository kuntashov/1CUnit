
//{ основная процедура для юнит-тестирования xUnitFor1C
Перем ЮТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	ПрефиксПредставления = "";
	ДополнитьСписокТестов(ВсеТесты, ПутьЗапускателяТестов(), ПрефиксПредставления);

	ВсеТесты.Добавить("ТестДолжен_ОбработатьПустойПараметрЗапуска");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьТиповыеПараметрыЗапуска");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьТиповыеПараметрыЗапуска_АнглийскиеКоманды");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьПараметрыЗапускаБезКомандВыполнитьИлиЗагрузить");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьПараметрыЗапускаБезКомандВыполнитьИлиЗагрузить_АнглийскиеКоманды");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапуска");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапуска_АнглийскиеКоманды");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапуска_и_Запись_в_ЖР");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапуска_и_Запись_в_ЖР_АнглийскиеКоманды");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапуска_ЕстьПробелыСпередиИСзадиКоманды");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапускаДляВстроенныхТестов");
	ВсеТесты.Добавить("ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапускаДляВстроенныхТестов_АнглийскиеКоманды");

	Возврат ВсеТесты;
	
КонецФункции

Функция ДополнитьСписокТестов(ВсеТесты, ПутьЗапускателяТестов, ПрефиксПредставления = "") Экспорт
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	ПутьТестов = ПутьЗапускателяТестов+"TestsShouldFail\ТестПримерСломаногоТеста.epf";
	КоличествоУпавшихТестов = 1;
	
	ИмяПользователя = ТекущийПользователь.Имя;
	РежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение;
	ЗапускатьТолстыйКлиент = Истина;
	Настройка = Новый Структура("ИмяПользователя,ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов,КоличествоУпавшихТестов,РежимЗапуска", 
		ИмяПользователя, "", ЗапускатьТолстыйКлиент, ПутьТестов, КоличествоУпавшихТестов, РежимЗапуска);
	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ВыполнитьОдинТестЧерезЗапуск1СПредприятия", 
		ПрефиксПредставления + "Протестить падающий тест в отдельном сеансе пользователя <"+ИмяПользователя+"> (Обычное приложение)", Настройка);
	ВсеТесты.Добавить(ПараметрыТеста);
	
	РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение;
	ЗапускатьТолстыйКлиент = Ложь;
	Настройка = Новый Структура("ИмяПользователя,ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов,КоличествоУпавшихТестов,РежимЗапуска", 
		ИмяПользователя, "", ЗапускатьТолстыйКлиент, ПутьТестов, КоличествоУпавшихТестов, РежимЗапуска);
	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ВыполнитьОдинТестЧерезЗапуск1СПредприятия", 
		ПрефиксПредставления + "Протестить падающий тест в отдельном сеансе пользователя <"+ИмяПользователя+"> (Тонкий клиент)", Настройка);
	ВсеТесты.Добавить(ПараметрыТеста);
	
	ЗапускатьТолстыйКлиент = Истина;
	Настройка = Новый Структура("ИмяПользователя,ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов,КоличествоУпавшихТестов,РежимЗапуска", 
		ИмяПользователя, "", ЗапускатьТолстыйКлиент, ПутьТестов, КоличествоУпавшихТестов, РежимЗапуска);
	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ВыполнитьОдинТестЧерезЗапуск1СПредприятия", 
		ПрефиксПредставления + "Протестить падающий тест в отдельном сеансе пользователя <"+ИмяПользователя+"> (Толстый клиент управляемое приложение)", Настройка);
	ВсеТесты.Добавить(ПараметрыТеста);
	
	ПутьТестов = ПутьЗапускателяТестов+"Tests\selftests\ТестыПроверитьРавенство.epf";
	КоличествоУпавшихТестов = 0;
	
	РежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение;
	ЗапускатьТолстыйКлиент = Истина;
	Настройка = Новый Структура("ИмяПользователя,ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов,КоличествоУпавшихТестов,РежимЗапуска", 
		ИмяПользователя, "", ЗапускатьТолстыйКлиент, ПутьТестов, КоличествоУпавшихТестов, РежимЗапуска);
	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ВыполнитьОдинТестЧерезЗапуск1СПредприятия", 
		ПрефиксПредставления + "Протестить успешный тест в отдельном сеансе пользователя <"+ИмяПользователя+"> (Обычное приложение)", Настройка);
	ВсеТесты.Добавить(ПараметрыТеста);
	
	РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение;
	ЗапускатьТолстыйКлиент = Ложь;
	Настройка = Новый Структура("ИмяПользователя,ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов,КоличествоУпавшихТестов,РежимЗапуска",  
		ИмяПользователя, "", ЗапускатьТолстыйКлиент, ПутьТестов, КоличествоУпавшихТестов, РежимЗапуска);
	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ВыполнитьОдинТестЧерезЗапуск1СПредприятия", 
		ПрефиксПредставления + "Протестить успешный тест в отдельном сеансе пользователя <"+ИмяПользователя+"> (Тонкий клиент)", Настройка);
	ВсеТесты.Добавить(ПараметрыТеста);
	
	ЗапускатьТолстыйКлиент = Истина;
	Настройка = Новый Структура("ИмяПользователя,ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов,КоличествоУпавшихТестов,РежимЗапуска", 
		ИмяПользователя, "", ЗапускатьТолстыйКлиент, ПутьТестов, КоличествоУпавшихТестов, РежимЗапуска);
	ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ВыполнитьОдинТестЧерезЗапуск1СПредприятия", 
		ПрефиксПредставления + "Протестить успешный тест в отдельном сеансе пользователя <"+ИмяПользователя+"> (Толстый клиент управляемое приложение)", Настройка);
	ВсеТесты.Добавить(ПараметрыТеста);
	
	Для КоличествоУпавшихТестов = 0 По 1 Цикл
		Если КоличествоУпавшихТестов = 0 Тогда
			ПутьТестов = "Метаданные.Обработки.Тест_Обработка";
			ЧастьПредставленияТеста = "успешный";
		Иначе
			ПутьТестов = "Метаданные.Обработки.ТестПадающий_Обработка";
			ЧастьПредставленияТеста = "падающий";
		КонецЕсли;
		
		РежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение;
		ЗапускатьТолстыйКлиент = Истина;
		Настройка = Новый Структура("ИмяПользователя,ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов,КоличествоУпавшихТестов,РежимЗапуска", 
			ИмяПользователя, "", ЗапускатьТолстыйКлиент, ПутьТестов, КоличествоУпавшихТестов, РежимЗапуска);
		ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ВыполнитьОдинТестЧерезЗапуск1СПредприятия", 
			ПрефиксПредставления + "Протестить "+ЧастьПредставленияТеста+" встроенный тест в отдельном сеансе пользователя <"+ИмяПользователя+"> (Обычное приложение)", Настройка);
		ВсеТесты.Добавить(ПараметрыТеста);
		
		РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение;
		ЗапускатьТолстыйКлиент = Ложь;
		Настройка = Новый Структура("ИмяПользователя,ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов,КоличествоУпавшихТестов,РежимЗапуска,ЗавершатьРаботуСистемы", 
			ИмяПользователя, "", ЗапускатьТолстыйКлиент, ПутьТестов, КоличествоУпавшихТестов, РежимЗапуска, Истина);
		ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ВыполнитьОдинТестЧерезЗапуск1СПредприятия", 
			ПрефиксПредставления + "Протестить "+ЧастьПредставленияТеста+" встроенный тест в отдельном сеансе пользователя <"+ИмяПользователя+"> (Тонкий клиент)", Настройка);
		ВсеТесты.Добавить(ПараметрыТеста);
		
		РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение;
		ЗапускатьТолстыйКлиент = Истина;
		Настройка = Новый Структура("ИмяПользователя,ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов,КоличествоУпавшихТестов,РежимЗапуска,ЗавершатьРаботуСистемы", 
			ИмяПользователя, "", ЗапускатьТолстыйКлиент, ПутьТестов, КоличествоУпавшихТестов, РежимЗапуска, Истина);
		ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ВыполнитьОдинТестЧерезЗапуск1СПредприятия", 
			ПрефиксПредставления + "Протестить "+ЧастьПредставленияТеста+" встроенный тест в отдельном сеансе пользователя <"+ИмяПользователя+"> (Толстый клиент управляемое приложение)", Настройка);
		ВсеТесты.Добавить(ПараметрыТеста);
	КонецЦикла;
		
	Для КоличествоУпавшихТестов = 0 По 1 Цикл
		Если КоличествоУпавшихТестов = 0 Тогда
			ПутьТестов = "Метаданные.Подсистемы.Тестовая";
			ЧастьПредставленияТеста = "успешных";
		Иначе
			ПутьТестов = "Метаданные.Подсистемы.ПадающаяТестовая";
			ЧастьПредставленияТеста = "падающих";
		КонецЕсли;
		
		РежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение;
		ЗапускатьТолстыйКлиент = Истина;
		Настройка = Новый Структура("ИмяПользователя,ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов,КоличествоУпавшихТестов,РежимЗапуска", 
			ИмяПользователя, "", ЗапускатьТолстыйКлиент, ПутьТестов, КоличествоУпавшихТестов, РежимЗапуска);
		ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ВыполнитьОдинТестЧерезЗапуск1СПредприятия", 
			ПрефиксПредставления + "Протестить несколько "+ЧастьПредставленияТеста+" встроенных тестов в отдельном сеансе пользователя <"+ИмяПользователя+"> (Обычное приложение)", Настройка);
		ВсеТесты.Добавить(ПараметрыТеста);

		РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение;
		ЗапускатьТолстыйКлиент = Ложь;
		Настройка = Новый Структура("ИмяПользователя,ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов,КоличествоУпавшихТестов,РежимЗапуска,ЗавершатьРаботуСистемы", 
			ИмяПользователя, "", ЗапускатьТолстыйКлиент, ПутьТестов, КоличествоУпавшихТестов, РежимЗапуска, Истина);
		ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ВыполнитьОдинТестЧерезЗапуск1СПредприятия", 
			ПрефиксПредставления + "Протестить несколько "+ЧастьПредставленияТеста+" встроенных тестов в отдельном сеансе пользователя <"+ИмяПользователя+"> (Тонкий клиент)", Настройка);
		ВсеТесты.Добавить(ПараметрыТеста);

		РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение;
		ЗапускатьТолстыйКлиент = Истина;
		Настройка = Новый Структура("ИмяПользователя,ИмяМакета,ЗапускатьТолстыйКлиент,ПутьТестов,КоличествоУпавшихТестов,РежимЗапуска,ЗавершатьРаботуСистемы", 
			ИмяПользователя, "", ЗапускатьТолстыйКлиент, ПутьТестов, КоличествоУпавшихТестов, РежимЗапуска, Истина);
		ПараметрыТеста = Новый Структура("ИмяТеста,ПредставлениеТеста,Параметр", "ВыполнитьОдинТестЧерезЗапуск1СПредприятия", 
			ПрефиксПредставления + "Протестить несколько "+ЧастьПредставленияТеста+" встроенных тестов в отдельном сеансе пользователя <"+ИмяПользователя+"> (Толстый клиент управляемое приложение)", Настройка);
		ВсеТесты.Добавить(ПараметрыТеста);
	КонецЦикла;
КонецФункции

//}

//{ блок юнит-тестов - сами тесты

Процедура ПередЗапускомТеста() Экспорт
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
КонецПроцедуры

Процедура ТестДолжен_ОбработатьПустойПараметрЗапуска() Экспорт
	СтрокаПараметров = "";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска, Неопределено, "ПараметрыЗапуска");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьТиповыеПараметрыЗапуска() Экспорт
	СтрокаПараметров = "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Выполнить, Истина, "ПараметрыЗапуска.Выполнить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьТестов, "E:\ТестыИМ\Тесты", "ПараметрыЗапуска.ПутьТестов");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ОстановитьСистему, Истина, "ПараметрыЗапуска.ОстановитьСистему");
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ФорматОтчета, "", "ПараметрыЗапуска.ФорматОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьОтчета, "", "ПараметрыЗапуска.ПутьОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ВстроенныеТесты, Ложь, "ПараметрыЗапуска.ВстроенныеТесты");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьКодаВозврата, "", "ПараметрыЗапуска.ПутьКодаВозврата");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.РегистрацияПрохожденияТестовВЖР, Ложь, "ПараметрыЗапуска.xddWriteLogEvent");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьТиповыеПараметрыЗапуска_АнглийскиеКоманды() Экспорт
	СтрокаПараметров = "xddRun;E:\ТестыИМ\Тесты;xddShutdown";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Выполнить, Истина, "ПараметрыЗапуска.Выполнить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьТестов, "E:\ТестыИМ\Тесты", "ПараметрыЗапуска.ПутьТестов");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ОстановитьСистему, Истина, "ПараметрыЗапуска.ОстановитьСистему");
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ФорматОтчета, "", "ПараметрыЗапуска.ФорматОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьОтчета, "", "ПараметрыЗапуска.ПутьОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ВстроенныеТесты, Ложь, "ПараметрыЗапуска.ВстроенныеТесты");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьКодаВозврата, "", "ПараметрыЗапуска.ПутьКодаВозврата");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.РегистрацияПрохожденияТестовВЖР, Ложь, "ПараметрыЗапуска.xddWriteLogEvent");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьПараметрыЗапускаБезКомандВыполнитьИлиЗагрузить() Экспорт
	СтрокаПараметров = "E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска, Неопределено, "ПараметрыЗапуска");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьПараметрыЗапускаБезКомандВыполнитьИлиЗагрузить_АнглийскиеКоманды() Экспорт
	СтрокаПараметров = "E:\ТестыИМ\Тесты;xddShutdown";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска, Неопределено, "ПараметрыЗапуска");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапуска() Экспорт
	СтрокаПараметров = "Тесты_Команда_Тестировать;E:\Путь с пробелом\Tests;ЗавершитьРаботуПослеТестирования;Тесты_Команда_ФорматОтчета;xml;"+
		"Тесты_Команда_КаталогОтчетов;E:\Путь с пробелом\testReport;Тесты_Путь_КЛогам;E:\f1.log";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Выполнить, Истина, "ПараметрыЗапуска.Выполнить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьТестов, "E:\Путь с пробелом\Tests", "ПараметрыЗапуска.ПутьТестов");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ОстановитьСистему, Истина, "ПараметрыЗапуска.ОстановитьСистему");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ФорматОтчета, "xml", "ПараметрыЗапуска.ФорматОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьОтчета, "E:\Путь с пробелом\testReport\", "ПараметрыЗапуска.ПутьОтчета");
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ВстроенныеТесты, Ложь, "ПараметрыЗапуска.ВстроенныеТесты");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьКодаВозврата, "E:\f1.log", "ПараметрыЗапуска.ПутьКодаВозврата");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапуска_АнглийскиеКоманды() Экспорт
	СтрокаПараметров = "xddRun;E:\Путь с пробелом\Tests;xddShutdown;xddReportFormat;xml;xddReportPath;E:\Путь с пробелом\testReport;"+
		"xddExitCodePath;E:\f1.log";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Выполнить, Истина, "ПараметрыЗапуска.Выполнить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьТестов, "E:\Путь с пробелом\Tests", "ПараметрыЗапуска.ПутьТестов");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ОстановитьСистему, Истина, "ПараметрыЗапуска.ОстановитьСистему");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ФорматОтчета, "xml", "ПараметрыЗапуска.ФорматОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьОтчета, "E:\Путь с пробелом\testReport\", "ПараметрыЗапуска.ПутьОтчета");
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ВстроенныеТесты, Ложь, "ПараметрыЗапуска.ВстроенныеТесты");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьКодаВозврата, "E:\f1.log", "ПараметрыЗапуска.ПутьКодаВозврата");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапуска_и_Запись_в_ЖР() Экспорт
	СтрокаПараметров = "Тесты_Команда_Тестировать;E:\Путь с пробелом\Tests;ЗавершитьРаботуПослеТестирования;"+
		"Тесты_Команда_ФорматОтчета;xml;Тесты_Команда_КаталогОтчетов;E:\Путь с пробелом\testReport;Тесты_Путь_КЛогам;E:\f1.log;Тесты_ЗаписьВЖР;Тесты_ЗаписьОшибокВЖР";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Выполнить, Истина, "ПараметрыЗапуска.Выполнить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьТестов, "E:\Путь с пробелом\Tests", "ПараметрыЗапуска.ПутьТестов");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ОстановитьСистему, Истина, "ПараметрыЗапуска.ОстановитьСистему");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ФорматОтчета, "xml", "ПараметрыЗапуска.ФорматОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьОтчета, "E:\Путь с пробелом\testReport\", "ПараметрыЗапуска.ПутьОтчета");
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ВстроенныеТесты, Ложь, "ПараметрыЗапуска.ВстроенныеТесты");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьКодаВозврата, "E:\f1.log", "ПараметрыЗапуска.ПутьКодаВозврата");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.РегистрацияПрохожденияТестовВЖР, Истина, "ПараметрыЗапуска.Тесты_ЗаписьВЖР");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.РегистрацияОшибокТестовВЖР, Истина, "ПараметрыЗапуска.Тесты_ЗаписьОшибокВЖР");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапуска_и_Запись_в_ЖР_АнглийскиеКоманды() Экспорт
	СтрокаПараметров = "xddRun;E:\Путь с пробелом\Tests;xddShutdown;xddReportFormat;xml;xddReportPath;E:\Путь с пробелом\testReport;"+
		"xddExitCodePath;E:\f1.log;xddWriteLogEvent;xddWriteErrorIntoLogEvent";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Выполнить, Истина, "ПараметрыЗапуска.Выполнить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьТестов, "E:\Путь с пробелом\Tests", "ПараметрыЗапуска.ПутьТестов");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ОстановитьСистему, Истина, "ПараметрыЗапуска.ОстановитьСистему");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ФорматОтчета, "xml", "ПараметрыЗапуска.ФорматОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьОтчета, "E:\Путь с пробелом\testReport\", "ПараметрыЗапуска.ПутьОтчета");
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ВстроенныеТесты, Ложь, "ПараметрыЗапуска.ВстроенныеТесты");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьКодаВозврата, "E:\f1.log", "ПараметрыЗапуска.ПутьКодаВозврата");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.РегистрацияПрохожденияТестовВЖР, Истина, "ПараметрыЗапуска.xddWriteLogEvent");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.РегистрацияОшибокТестовВЖР, Истина, "ПараметрыЗапуска.xddWriteErrorIntoLogEvent");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапуска_ЕстьПробелыСпередиИСзадиКоманды() Экспорт
	СтрокаПараметров = " Тесты_Команда_Тестировать ; E:\Путь с пробелом\Tests ; ЗавершитьРаботуПослеТестирования ; Тесты_Команда_ФорматОтчета ; xml ; Тесты_Команда_КаталогОтчетов ; E:\Путь с пробелом\testReport ; Тесты_Путь_КЛогам ; E:\f1.log ";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Выполнить, Истина, "ПараметрыЗапуска.Выполнить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьТестов, "E:\Путь с пробелом\Tests", "ПараметрыЗапуска.ПутьТестов");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ОстановитьСистему, Истина, "ПараметрыЗапуска.ОстановитьСистему");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ФорматОтчета, "xml", "ПараметрыЗапуска.ФорматОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьОтчета, "E:\Путь с пробелом\testReport\", "ПараметрыЗапуска.ПутьОтчета");
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ВстроенныеТесты, Ложь, "ПараметрыЗапуска.ВстроенныеТесты");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьКодаВозврата, "E:\f1.log", "ПараметрыЗапуска.ПутьКодаВозврата");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапускаДляВстроенныхТестов() Экспорт
	СтрокаПараметров = "ЭтоТестИзКонфигурации;Тесты_Команда_Тестировать;Подсистема.Тестирование;ЗавершитьРаботуПослеТестирования;Тесты_Команда_ФорматОтчета;xml;Тесты_Команда_КаталогОтчетов;E:\Путь с пробелом\testReport;Тесты_Путь_КЛогам;E:\f1.log";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Выполнить, Истина, "ПараметрыЗапуска.Выполнить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьТестов, "Подсистема.Тестирование", "ПараметрыЗапуска.ПутьТестов");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ОстановитьСистему, Истина, "ПараметрыЗапуска.ОстановитьСистему");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ФорматОтчета, "xml", "ПараметрыЗапуска.ФорматОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьОтчета, "E:\Путь с пробелом\testReport\", "ПараметрыЗапуска.ПутьОтчета");
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ВстроенныеТесты, Истина, "ПараметрыЗапуска.ВстроенныеТесты");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьКодаВозврата, "E:\f1.log", "ПараметрыЗапуска.ПутьКодаВозврата");
КонецПроцедуры

Процедура ТестДолжен_ОбработатьВсеТиповыеПараметрыЗапускаДляВстроенныхТестов_АнглийскиеКоманды() Экспорт
	СтрокаПараметров = "xddConfig;xddRun;Подсистема.Тестирование;xddShutdown;xddReportFormat;xml;xddReportPath;E:\Путь с пробелом\testReport;xddExitCodePath;E:\f1.log";
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметров);
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Выполнить, Истина, "ПараметрыЗапуска.Выполнить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьТестов, "Подсистема.Тестирование", "ПараметрыЗапуска.ПутьТестов");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ОстановитьСистему, Истина, "ПараметрыЗапуска.ОстановитьСистему");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ФорматОтчета, "xml", "ПараметрыЗапуска.ФорматОтчета");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьОтчета, "E:\Путь с пробелом\testReport\", "ПараметрыЗапуска.ПутьОтчета");
	
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.Загрузить, Истина, "ПараметрыЗапуска.Загрузить");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ВстроенныеТесты, Истина, "ПараметрыЗапуска.ВстроенныеТесты");
	ЮТест.ПроверитьРавенство(ПараметрыЗапуска.ПутьКодаВозврата, "E:\f1.log", "ПараметрыЗапуска.ПутьКодаВозврата");
КонецПроцедуры

Процедура ВыполнитьОдинТестЧерезЗапуск1СПредприятия(Настройка) Экспорт
	Перем ЭтоLinux;
	
	ЭтоLinux = Ложь;
	
	ТолстыйКлиент = Настройка.ЗапускатьТолстыйКлиент;
	ИмяПользователя = Настройка.ИмяПользователя;
	ИмяМакета = Настройка.ИмяМакета;
	ПутьТестов = Настройка.ПутьТестов;
	ОжидаемоеКоличествоУпавшихТестов = Настройка.КоличествоУпавшихТестов;
	РежимЗапуска = Настройка.РежимЗапуска;
	ЗавершатьРаботуСистемы = Истина;
	Если НЕ Настройка.Свойство("ЗавершатьРаботуСистемы", ЗавершатьРаботуСистемы) ИЛИ ЗавершатьРаботуСистемы = Истина Тогда
		ЗавершатьРаботуСистемы = Истина;
	КонецЕсли;
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();		
	ПутьКФайловойБазе = НСтр(СтрокаСоединения, "File");

	Если НЕ ПустаяСтрока(ПутьКФайловойБазе) Тогда
		СтрокаСоединения = " /F """ + ПутьКФайловойБазе+"""";
	Иначе
		СтрокаСоединения = " /S " + НСтр(СтрокаСоединения, "Srvr") + "\" + НСтр(СтрокаСоединения, "Ref");
	КонецЕсли;
	СтрокаСоединения = СтрокаСоединения + " /N """ + ИмяПользователя + """";

	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	
	Если Найти(Строка(СисИнфо.ТипПлатформы), "Linux")>0 Тогда 
		ЭтоLinux = Истина;
	КонецЕсли;
	
	ПутьКПлатформе1С = КаталогПрограммы();
	ИмяПрограмы = "1cv8";
	Если НЕ ТолстыйКлиент Тогда 
		ИмяПрограмы = ИмяПрограмы + "c";
	КонецЕсли;
	
	Если ЭтоLinux = Ложь Тогда
		ИмяПрограмы = ИмяПрограмы + ".exe"; //Для win добавим еще и расширение файла
	Иначе 
		ПутьТестов = СтрЗаменить(ПутьТестов, "\", "/"); //Слэши сделаем правильные для пути. 
	КонецЕсли;

	ПутьКПлатформе1С = ПутьКПлатформе1С + ИмяПрограмы;
	
	СтрокаРежимЗапуска = "";
	Если РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		СтрокаРежимЗапуска = " /RunModeManagedApplication ";
	ИначеЕсли РежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда	
		СтрокаРежимЗапуска = " /RunModeOrdinary ";
	КонецЕсли;
	
	ИспользуемоеИмяФайлаЗапускателяТестов = """" + ЮТест.ИспользуемоеИмяФайла + """";
	
	ПутьОтчетов = ПолучитьИмяВременногоФайла(); //+"-log";
	СоздатьКаталог(ПутьОтчетов);
	
	ПутьОтчетов = ПутьОтчетов + ?(ЭтоLinux,"/","\");
	ПутьФайлаОтчета1С = ПутьОтчетов+"1c.log";
	
	ПутьФайлаКодаВозврата = ПутьОтчетов+"exitCode.log";
	
	СтрокаПараметров = "xddRun;"+ПутьТестов+";xddReportFormat;xml;xddReportPath;"+
		ПутьОтчетов+";xddExitCodePath;"+ПутьФайлаКодаВозврата+";xddWriteLogEvent;xddWriteErrorIntoLogEvent";
	Если ЗавершатьРаботуСистемы Тогда
		СтрокаПараметров = СтрокаПараметров + ";xddShutdown";
	КонецЕсли;
		
	СтрокаКоманды = """"+ПутьКПлатформе1С + """ "+СтрокаРежимЗапуска + СтрокаСоединения +" /DisableStartupMessages /Execute "+ИспользуемоеИмяФайлаЗапускателяТестов+
		" /Out "+ПутьФайлаОтчета1С+" /C """+СтрокаПараметров+""" /LogUI ";
	
	ЗапуститьПриложение(СтрокаКоманды,, Истина);
	
	КоличествоУпавшихТестов = 0;
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьОтчетов+"лог_тестирования.xml");
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла	= ТипУзлаXML.НачалоЭлемента и ЧтениеXML.Имя = "testsuites" Тогда
			Для сч = 0 По ЧтениеXML.КоличествоАтрибутов()-1 Цикл
				Если ЧтениеXML.ИмяАтрибута(сч) = "failures" Тогда
					КоличествоУпавшихТестов = Число(ЧтениеXML.ЗначениеАтрибута(сч));
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ОжидаемоеКоличествоУпавшихТестов <> 0 Тогда
		ЮТест.ПроверитьРавенство(ОжидаемоеКоличествоУпавшихТестов, КоличествоУпавшихТестов, "Ожидали, что упадут тесты ("+ОжидаемоеКоличествоУпавшихТестов+"шт), а остальные пройдут, а получили <"+КоличествоУпавшихТестов+"> упавших тестов.");
	Иначе
		ЮТест.ПроверитьРавенство(ОжидаемоеКоличествоУпавшихТестов, КоличествоУпавшихТестов, "Ожидали, что пройдут все тесты, а получили <"+КоличествоУпавшихТестов+"> упавших тестов.");
	КонецЕсли;
	
	ОжидаемыйКодВозврата = "0";
	ФайлКодаВозврата = Новый Файл(ПутьФайлаКодаВозврата);
	ЮТест.Проверить(ФайлКодаВозврата.Существует(), "Ожидали, что будет сформирован файл кода возврата, а файла нет");
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьФайлаКодаВозврата);
	ЮТест.ПроверитьРавенство(ОжидаемыйКодВозврата, ЧтениеТекста.ПрочитатьСтроку(), "Ожидали, что код возврата будет <"+ОжидаемыйКодВозврата+">, а получили другой код.");
КонецПроцедуры

Функция ПутьЗапускателяТестов()
	ПутьЗапускателяТестов = СтрЗаменить(ЮТест.ИспользуемоеИмяФайла, ИмяЗапускателяТестов() + ".epf", "");
	Возврат ПутьЗапускателяТестов;
КонецФункции

Функция ИмяЗапускателяТестов()
	Возврат "xddTestRunner";
КонецФункции

//} 

Функция РазобратьПараметрыЗапуска(СтрокаПараметровЗапуска) Экспорт
	Возврат ЮТест.РазобратьПараметрыЗапуска(СтрокаПараметровЗапуска);
КонецФункции
