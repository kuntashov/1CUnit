{2,
{37,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0},
{0},1,
{19,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0},0,"","",1,
{19,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{8,
{0},0,0,0,0,"NavigatorРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},1,"",2,0},"&НаКлиенте
Перем ЮТест;  // для тестирования

&НаКлиенте
Перем ОткрытаяФорма;  // для тестирования

//{ основная процедура для юнит-тестирования 1CUnit
&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	КоллекцияИнструментов = Новый Соответствие;
	КоллекцияИнструментов.Вставить(""Тест открытия инструмента """"Генератор данных"""""", ""xddDataFixtureGen.epf"");
	КоллекцияИнструментов.Вставить(""Тест открытия инструмента """"Показать ГУИД"""""", ""xddGuidShow.epf"");
	
	Для каждого КлючЗначение Из КоллекцияИнструментов Цикл
		ПараметрыТеста = Новый Структура(""ПредставлениеТеста,ИмяТеста,Параметр"", КлючЗначение.Ключ + "" - метод xddTestRunner.ОткрытьИнструмент"", ""ТестДолжен_ОткрытьЗакрытьИнструмент_ЧерезМетод_ЮТест_ОткрытьИнструмент"", КлючЗначение.Значение);
		ВсеТесты.Добавить(ПараметрыТеста);

		ПараметрыТеста = Новый Структура(""ПредставлениеТеста,ИмяТеста,Параметр"", КлючЗначение.Ключ + "" - перебор команд УФ xddTestRunner"", ""ТестДолжен_ОткрытьЗакрытьИнструмент_ЧерезПереборКомандЮТест"", КлючЗначение.Значение);
		ВсеТесты.Добавить(ПараметрыТеста);
	КонецЦикла;

	Возврат ВсеТесты;
	
КонецФункции
//}

//{ блок юнит-тестов - сами тесты

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт	
	ОткрытаяФорма = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт	
	Если ТипЗнч(ОткрытаяФорма) = Тип(""УправляемаяФорма"") Тогда
		ОткрытаяФорма.Закрыть();
	КонецЕсли;
	ОткрытаяФорма = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьЗакрытьИнструмент_ЧерезМетод_ЮТест_ОткрытьИнструмент(ИмяИнструмента) Экспорт
	ОткрытаяФорма = ЮТест.ОткрытьИнструмент(ИмяИнструмента);
	ЮТест.ПроверитьТип(ОткрытаяФорма, ""УправляемаяФорма"", ""Не удалось получить управляемую форму инструмента <""+ИмяИнструмента+"">"");
	ЮТест.Проверить(ОткрытаяФорма.Открыта(), ""Форма инструмента должна быть открыта. Инструмент <""+ИмяИнструмента+"">"");
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОткрытьЗакрытьИнструмент_ЧерезПереборКомандЮТест(ИмяИнструмента) Экспорт
	СоответствиеОкон = Новый Соответствие;
	Окна = ПолучитьОкна();
	Для к=-Окна.Количество()+1 По 0 Цикл
		Окно = Окна.Получить(-к);
		СоответствиеОкон.Вставить(Окно, Окно);
	КонецЦикла;
	
	ЮТест.ОткрытьИнструмент(ИмяИнструмента);
	
	Окна = ПолучитьОкна();
	Для к=-Окна.Количество()+1 По 0 Цикл
		НовоеОкно = Окна.Получить(-к);
		Если СоответствиеОкон.Получить(НовоеОкно) = Неопределено Тогда
			ОткрытаяФорма = НовоеОкно.ПолучитьСодержимое();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//ОткрытаяФорма = ЮТест.ОткрытьИнструмент(ИмяИнструмента);
	ЮТест.ПроверитьТип(ОткрытаяФорма, ""УправляемаяФорма"", ""Не удалось получить управляемую форму инструмента <""+ИмяИнструмента+"">"");
	ЮТест.Проверить(ОткрытаяФорма.Открыта(), ""Форма инструмента должна быть открыта. Инструмент <""+ИмяИнструмента+"">"");
КонецПроцедуры

//} конец блока юнит-тестов
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",5651e8ee-504c-4940-8b83-89c69a8b875d}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0}
}