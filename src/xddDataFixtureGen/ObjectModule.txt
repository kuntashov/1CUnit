Перем ТестовыеДанныхДляУдаления;

Перем МассивИмен;

Перем МетаданныеОписание Экспорт;
Перем СсылочныеТипы Экспорт;
Перем СоответствиеОбъектовМетаданныхИСсылочныхТипов;

// массив строк дерева метаданных, имеющих признак Выгружать
Перем СоставПолнойВыгрузки Экспорт;

Перем мВыгруженныеОбъекты;

Перем мНаличиеВыгрузкиПодчиненныхОбъектов;
Перем мТипРезультатЗапроса;
Перем мСоответствиеКолонокДвижений;
Перем ОбработанныхКонстант Экспорт;
Перем ОбработанныхНаборовЗаписей Экспорт;
Перем СоставВспомогательнойВыгрузки;

Перем юТест;

Функция Версия() Экспорт
	Возврат "2.5.0.12";
КонецФункции

Функция ЗаголовокФормы() Экспорт
	Возврат СокрЛП(Метаданные().Синоним) + ", версия " + Версия();;
КонецФункции

//{ основная процедура для юнит-тестирования xUnitFor1C
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	//юТест.ДобавитьПростыеТестыИзОбъекта(ВсеТесты, ЭтотОбъект);

	ВсеТесты.Добавить("ТестДолжен_ПолучитьМакетДляСозданияПростогоСправочника");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьМакетДляСозданияОбъектаСЗаполненнымРеквизитомТипаПеречисление");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьМакетДляСозданияДвухПростыхСправочников");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьМакетДляСозданияДвухСвязанныхСправочников");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьМакетДляСозданияСправочникаСРеквизитомСсылка_РежимПоискаКод");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьМакетДляСозданияСправочникаСДвумяСтрокамиВТабличнойЧасти");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьМакетДляСозданияДокументаСДвумяСтрокамиВТабличнойЧасти");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьМакетДляСозданияДвухЗаписейВРегистреСведений");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьМакетДляСозданияПодчиненногоСправочника");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьМакетДляСозданияИерархическогоСправочника");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьМакетДляСозданияПростогоСправочникаНаБазеЗапроса");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьМакетДляСоздания2ЗаписейРегистраСведенийНаБазеЗапроса");
	ВсеТесты.Добавить("ТестДолжен_ПолучитьМакетДляСозданияДвухЗаписейРегистраНакопления");

	Возврат ВсеТесты;
	
КонецФункции
//}

//{ ОСНОВНОЙ БЛОК
Функция СоздатьМакетДляГенерацииДанных(МассивДанных) Экспорт
	ШапкаДанных = ШапкаДанныхВМакете();
	Макет = Новый  ТабличныйДокумент;
	номерКолонки = 0;
	Для каждого ключЗначение Из ШапкаДанных Цикл
		номерКолонки = номерКолонки + 1;
		имяПоля = ключЗначение.Ключ;
		Макет.Область(1, номерКолонки, 1, номерКолонки).Текст = имяПоля ;
	КонецЦикла;
	
	Для каждого ОписательОбъекта Из МассивДанных Цикл
		ДобавитьОбъектВМакет(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных);
	КонецЦикла;
	Возврат Макет;
КонецФункции

//{ Пример вызова из внешнего кода:
//		Путь_xUnitFor1C = "C:\Projects\GitHub\xUnitFor1C\";
//		ПутьГенератораМакета = Путь_xUnitFor1C + "ГенерацияМакетаДанных_На_БазеРеальныхДанных.epf";
//		Запрос = Новый Запрос;
//		запрос.Текст = "
//		|ВЫБРАТЬ
//		|	""РегистрыСведений.РегистрСведений1.СоздатьНаборЗаписей().Метаданные()"" КАК __Метаданные,
//		|	""ЗаписьРегистра"" КАК __Префикс,
//		|	РегистрСведений1.ПростойСправочник,
//		|	РегистрСведений1.ПростойСправочник2,
//		|	РегистрСведений1.РесурсЧисло,
//		|	РегистрСведений1.РесурсБулево
//		|ИЗ
//		|	РегистрСведений.РегистрСведений1 КАК РегистрСведений1
//		|УПОРЯДОЧИТЬ ПО
//		|	ПростойСправочник2";
//
			//или	Запрос.Текст = 
			//		"ВЫБРАТЬ
			//		|	"""" КАК __Метаданные,
			//		|	""ПростойСправочник"" КАК __Префикс,
			//		|	ПростойСправочник.Ссылка,
			//		|	ПростойСправочник.Код,
			//		|	ПростойСправочник.Наименование,
			//		|	ПростойСправочник.РеквизитБулево,
			//		|	ПростойСправочник.РеквизитПеречисление
			//		|ИЗ
			//		|	Справочник.ПростойСправочник КАК ПростойСправочник
			//		|Где РеквизитБулево И ПростойСправочник.Наименование = ""Тестовое наименование"" ";
//
//		РезультатЗапроса = Запрос.Выполнить();
//
//		ГенераторМакетаДанных = ВнешниеОбработки.Создать(ПутьГенератораМакета);
//		Макет = ГенераторМакетаДанных.СоздатьМакетДанныхНаОснованииЗапроса(РезультатЗапроса);
//		Макет.Показать();
//}
Функция СоздатьМакетДанныхНаОснованииЗапроса(РезультатЗапроса) Экспорт
	Таблица = РезультатЗапроса.Выгрузить();
	
	МассивПропускаемыхКолонок = Новый Массив;
	МассивПропускаемыхКолонок.Добавить("__Метаданные");
	МассивПропускаемыхКолонок.Добавить("__Префикс");
	СтрокаПропускаемыхКолонок = "";
	Для каждого Колонка Из МассивПропускаемыхКолонок Цикл
		СтрокаПропускаемыхКолонок = СтрокаПропускаемыхКолонок + Колонка+", ";
	КонецЦикла;
	
	КоличествоСлужебныхКолонок = МассивПропускаемыхКолонок.Количество();
	
	СтруктураДанных = Новый Структура();
	для каждого КолонкаЗапроса из Таблица.Колонки цикл
		Если МассивПропускаемыхКолонок.Найти(КолонкаЗапроса.Имя) <> Неопределено Тогда
			КоличествоСлужебныхКолонок = КоличествоСлужебныхКолонок - 1;
			Продолжить;
		КонецЕсли;
		
		имяКолонки = КолонкаЗапроса.имя;
		СтруктураДанных.Вставить(имяКолонки);
	КонецЦикла;
	
	Если КоличествоСлужебныхКолонок <> 0 Тогда
		ВызватьИсключение "Не все служебные колонки заданы! В запросе обязательно должны быть колонки "+СтрокаПропускаемыхКолонок;
	КонецЕсли;
	
	МассивДанных = Новый Массив;
			
	номер = 1;
	индекс = 1;
	Для каждого Строка из Таблица Цикл
		номер = номер + 1;
		
		ИмяПеременной = Строка.__Префикс + индекс;
		РеквизитыЗаписи = Новый Структура();
		Для каждого ключЗначение Из СтруктураДанных Цикл
			РеквизитыЗаписи.Вставить(ключЗначение.Ключ)
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(РеквизитыЗаписи, Строка);
		
		описаниеЗаписиРегистраСведений1 = СоздатьОписательЭлемента();
		описаниеЗаписиРегистраСведений1.Вставить("ИмяПеременной", ИмяПеременной);
		описаниеЗаписиРегистраСведений1.Вставить("Реквизиты", РеквизитыЗаписи);
		
		Если ПустаяСтрока(Строка.__Метаданные) Тогда
			описаниеЗаписиРегистраСведений1.Вставить("Ссылка", Строка.Ссылка);
		Иначе
			Мета = Неопределено;
			Выполнить("Мета = "+Строка.__Метаданные);
		
			описаниеЗаписиРегистраСведений1.Вставить("Метаданное", Мета);
		КонецЕсли;
		
		МассивДанных.Добавить(описаниеЗаписиРегистраСведений1);

		индекс = индекс + 1;
	КонецЦикла;
	
	Макет = ЭтотОбъект.СоздатьМакетДляГенерацииДанных(массивДанных);
	
	Возврат Макет;
КонецФункции

Функция СоздатьОписательЭлементаПоСсылке(Ссылка, МассивИмен, ВыборкаИзРезультатовЗапроса = Неопределено) Экспорт
	ОписательЭлемента = СоздатьОписательЭлемента();
	ОписательЭлемента.Ссылка = Ссылка;
	ОписательЭлемента.ИмяПеременной = УникальноеИмяПеременнойПоСсылке(Ссылка, МассивИмен);
	МетаСсылка = Ссылка.Метаданные();
	ОписательЭлемента.Метаданное = МетаСсылка;
	ОписательЭлемента.РежимПоиска = "Перем";
	Если Метаданные.Справочники.Содержит(МетаСсылка) И Ссылка.ЭтоГруппа Тогда
		ОписательЭлемента.РежимСоздания = "Группа";
	Иначе
		ОписательЭлемента.РежимСоздания = "";
	КонецЕсли;
	Если ВыборкаИзРезультатовЗапроса <> Неопределено Тогда
		Попытка
			ЭтоПредопределенноеЗначение = ВыборкаИзРезультатовЗапроса.Предопределенный;
		Исключение
			ЭтоПредопределенноеЗначение = Ложь;
		КонецПопытки;
		Если ЭтоПредопределенноеЗначение Тогда
			Если ЭтоПлатформа83() Тогда
				ОписательЭлемента.РежимСоздания = "Предопределенный";
				ОписательЭлемента.Значение = ВыборкаИзРезультатовЗапроса.ИмяПредопределенныхДанных;
			Иначе // т.к. в 8.2 нет свойства ИмяПредопределенныхДанных, приходится использовать ГУИД
				ОписательЭлемента.РежимСоздания = "СоздатьПоГуид";
				ОписательЭлемента.Значение = Ссылка.УникальныйИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ОписательЭлемента;
КонецФункции

Функция ЭтоПлатформа83()
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	
	рез = Ложь;
	Если Лев(ВерсияПриложения, 3) = "8.2" Тогда
	ИначеЕсли Лев(ВерсияПриложения, 3) >= "8.3" Тогда
		рез = Истина;
	КонецЕсли;
	Возврат рез;
КонецФункции

Функция СоздатьОписательЭлементаПоНаборуЗаписей(НаборЗаписей, МассивИмен) Экспорт
	Мд = НаборЗаписей.Метаданные();
	ОписательЭлемента = СоздатьОписательЭлемента();
	ОписательЭлемента.ИмяПеременной = ПолучитьУникальноеИмяПеременной(МассивИмен, Мд.Имя);
	МассивИмен.Добавить(ОписательЭлемента.ИмяПеременной);
	
	ОписательЭлемента.Реквизиты = НаборЗаписей;
	ОписательЭлемента.Ссылка = Неопределено;
	ОписательЭлемента.Метаданное = Мд;
	Возврат ОписательЭлемента;
КонецФункции

Функция СоздатьОписательЭлемента() Экспорт
	ОписательЭлемента = Новый Структура;
	ОписательЭлемента.Вставить("Ссылка");
	ОписательЭлемента.Вставить("ИмяПеременной", "");
	ОписательЭлемента.Вставить("Значение", Неопределено);
	ОписательЭлемента.Вставить("Метаданное");
	ОписательЭлемента.Вставить("ВыгружатьКод", Ложь);
	ОписательЭлемента.Вставить("РежимПоиска", "");
	ОписательЭлемента.Вставить("РежимСоздания", "");
	ОписательЭлемента.Вставить("Реквизиты", Неопределено);
	Возврат ОписательЭлемента;
КонецФункции

Функция УникальноеИмяПеременнойПоСсылке(Ссылка, МассивИмен)
	ИмяПеременной = ПолучитьИдентификаторПредставленияПоСсылке(Ссылка);
	ИмяПеременной = ПолучитьУникальноеИмяПеременной(МассивИмен, ИмяПеременной);
	МассивИмен.Добавить(ИмяПеременной);
	Возврат ИмяПеременной;
КонецФункции

Функция ПолучитьУникальноеИмяПеременной(МассивИмен, Знач Имя)
	Если Не ЗначениеЗаполнено(МассивИмен) Тогда
		Возврат Имя;
	КонецЕсли;
	#Если _ Тогда
		МассивИмен = Новый Массив();
	#КонецЕсли
	Рез = Имя;
	Индекс = 1;
	Пока МассивИмен.Найти(Рез) <> Неопределено Цикл
		Рез = Рез+Индекс;
		Индекс = Индекс + 1;
	КонецЦикла;
	Возврат Рез;
КонецФункции

Функция ПолучитьИдентификаторПредставленияПоСсылке(Ссылка) //Экспорт
	Мд = Ссылка.Метаданные();
	
	менеджерОбъекта = ПолучитьМенеджерОбъекта_ирЛкс(Мд);
	КорневойТипКонфигурации = ПолучитьКорневойТипКонфигурации_ирЛкс(Мд);
	
	Представление = "";
	Если КорневойТипКонфигурации = "Справочник" Тогда
		Представление = Ссылка.Наименование;
	ИначеЕсли КорневойТипКонфигурации = "Документ" Тогда
		Представление = ""+Ссылка;
	//ИначеЕсли КорневойТипКонфигурации = "РегистрСведений" Тогда 
	ИначеЕсли КорневойТипКонфигурации = "БизнесПроцесс" Тогда
		Представление = ""+Ссылка;
	ИначеЕсли КорневойТипКонфигурации = "Задача" Тогда
		Представление = ""+Ссылка;
	Иначе
		ВызватьИсключение "ПолучитьИдентификаторПредставленияПоСсылке() : Неизвестный КорневойТипКонфигурации <"+КорневойТипКонфигурации+">";
	КонецЕсли;
	рез = ПолучитьИдентификаторИзПредставления_Лкс(Представление, Неопределено, "_");
	Возврат рез;
КонецФункции

Процедура ДобавитьОбъектВМакет(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных)
	Ссылка = Неопределено;
	Мд = Неопределено;
	ЭтоСсылочныйОбъект = ЭтоОписательОбъектаСсылки(ОписательОбъекта, Ссылка);
	Если ЭтоСсылочныйОбъект Тогда
		ЭтоСсылочныйОбъект = Истина;
		Мд = Ссылка.Метаданные();
	ИначеЕсли ОписательОбъекта.Свойство("Метаданное", Мд) Тогда
	КонецЕсли;
	
	ДобавитьМетаданныеВМакетДляДобавляемогоОбъекта(Макет, ОписательОбъекта, ШапкаДанных, Макет.ВысотаТаблицы+1, Мд);
	
	менеджерОбъекта = ПолучитьМенеджерОбъекта_ирЛкс(Мд);
	КорневойТипКонфигурации = ПолучитьКорневойТипКонфигурации_ирЛкс(Мд);
	Если КорневойТипКонфигурации = "Справочник" Тогда
		Если ЗначениеЗаполнено(Ссылка) и Ссылка.ЭтоГруппа Тогда
			лПустойОбъект = менеджерОбъекта.СоздатьГруппу();
		Иначе
			лПустойОбъект = менеджерОбъекта.СоздатьЭлемент();
		КонецЕсли;
	ИначеЕсли КорневойТипКонфигурации = "Документ" Тогда
		лПустойОбъект = менеджерОбъекта.СоздатьДокумент();
	ИначеЕсли КорневойТипКонфигурации = "БизнесПроцесс" Тогда
		лПустойОбъект = менеджерОбъекта.СоздатьБизнесПроцесс();
	ИначеЕсли КорневойТипКонфигурации = "Задача" Тогда
		лПустойОбъект = менеджерОбъекта.СоздатьЗадачу();		
	ИначеЕсли КорневойТипКонфигурации = "РегистрСведений" Тогда
	ИначеЕсли КорневойТипКонфигурации = "РегистрНакопления" Тогда 
	Иначе
		ВызватьИсключение "Неизвестный КорневойТипКонфигурации <"+КорневойТипКонфигурации+">";
	КонецЕсли;
	
	ВыгружаемыеСтандартныеРеквизиты = ВыгружаемыеСтандартныеРеквизиты(ОписательОбъекта, КорневойТипКонфигурации);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		объект = Ссылка.ПолучитьОбъект();
	
		ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект, лПустойОбъект, Мд.СтандартныеРеквизиты, ВыгружаемыеСтандартныеРеквизиты);
		ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект, лПустойОбъект, Мд.Реквизиты, Неопределено);
		
		ОбработатьТабличныеЧастиОбъекта(Макет, Мд.ТабличныеЧасти, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект);
	ИначеЕсли КорневойТипКонфигурации = "РегистрСведений" и ТипЗнч(ОписательОбъекта.Реквизиты) = Тип("Структура") Тогда
			ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, Мд.СтандартныеРеквизиты, ВыгружаемыеСтандартныеРеквизиты);
			ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, Мд.Измерения, Неопределено);
			ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, Мд.Ресурсы, Неопределено);
			ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, Мд.Реквизиты, Неопределено);
		
	ИначеЕсли КорневойТипКонфигурации = "РегистрСведений"
		  Или КорневойТипКонфигурации = "РегистрНакопления" Тогда
		
		НаборЗаписейРегистра = ОписательОбъекта.Реквизиты;
		Для Каждого ЗаписьРегистра Из НаборЗаписейРегистра Цикл
			Макет.Область(Макет.ВысотаТаблицы+1, ШапкаДанных.ТЧ).Текст = "Запись";
			ОписательОбъекта.Реквизиты = ЗаписьРегистра;
			ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, Мд.СтандартныеРеквизиты, ВыгружаемыеСтандартныеРеквизиты);
			ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, Мд.Измерения, Неопределено);
			ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, Мд.Ресурсы, Неопределено);
			ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Мд, Неопределено, Мд.Реквизиты, Неопределено);
		КонецЦикла;
	Иначе
		ВызватьИсключение "Неизвестный вариант работы - метод <ДобавитьОбъектВМакет>";
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьМетаданныеВМакетДляДобавляемогоОбъекта(Макет, ОписательОбъекта, ШапкаДанных, НомерСтрокиМакета, Мд)
	НомерКолонкиМакета_Тип = ШапкаДанных.Тип;
	ОбластьМакета = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Тип, НомерСтрокиМакета, НомерКолонкиМакета_Тип);
	ОбластьМакета.Текст = ПолучитьКорневойТипКонфигурации_ирЛкс(Мд);
	
	НомерКолонкиМакета_Вид = ШапкаДанных.Вид;
	ОбластьМакета = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Вид, НомерСтрокиМакета, НомерКолонкиМакета_Вид);
	ОбластьМакета.Текст = Мд.Имя;
	
	НомерКолонкиМакета_ИмяПеременной = ШапкаДанных.ИмяПеременной;
	ОбластьМакета = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_ИмяПеременной, НомерСтрокиМакета, НомерКолонкиМакета_ИмяПеременной);
	
	ИмяПеременной = ИмяПеременнойИзОписателяОбъекта(Мд, ОписательОбъекта);
	ОбластьМакета.Текст = ИмяПеременной;
	
	НомерКолонкиМакета_Режим = ШапкаДанных.Режим;
	ОбластьМакета_Режим = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Режим, НомерСтрокиМакета, НомерКолонкиМакета_Режим);
	ОбластьМакета_Режим.Текст = ОписательОбъекта.РежимСоздания;
	
	НомерКолонкиМакета_Значение = ШапкаДанных.Значение;
	ОбластьМакета_Значение = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Значение, НомерСтрокиМакета, НомерКолонкиМакета_Значение);
	ОбластьМакета_Значение.Текст = ОписательОбъекта.Значение;
КонецПроцедуры

Функция ВыгружаемыеСтандартныеРеквизиты(ОписательОбъекта, КорневойТипКонфигурации)
	ВыгружаемыеСтандартныеРеквизиты = Новый Массив;
	Если КорневойТипКонфигурации = "Справочник" Тогда
		ВыгружаемыеСтандартныеРеквизиты.Добавить("Наименование");
		ВыгружаемыеСтандартныеРеквизиты.Добавить("ПометкаУдаления");
		ВыгружатьКод = Ложь;
		Если ОписательОбъекта.Свойство("ВыгружатьКод", ВыгружатьКод) и ВыгружатьКод Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить("Код");
		КонецЕсли;
		МетаданныеСправочника = ОписательОбъекта.Ссылка.Метаданные();
		Если МетаданныеСправочника.Владельцы.Количество() > 0 Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить("Владелец");
		КонецЕсли;
		Если МетаданныеСправочника.Иерархический Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить("Родитель");
		КонецЕсли;
	ИначеЕсли КорневойТипКонфигурации = "Документ" Тогда
		ВыгружаемыеСтандартныеРеквизиты.Добавить("Дата");
		ВыгружаемыеСтандартныеРеквизиты.Добавить("ПометкаУдаления");
		ВыгружаемыеСтандартныеРеквизиты.Добавить("Проведен");
		ВыгружатьКод = Ложь;
		Если ОписательОбъекта.Свойство("ВыгружатьКод", ВыгружатьКод) и ВыгружатьКод Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить("Номер");
		КонецЕсли;
	ИначеЕсли КорневойТипКонфигурации = "БизнесПроцесс" Тогда
		ВыгружаемыеСтандартныеРеквизиты.Добавить("Дата");
		ВыгружаемыеСтандартныеРеквизиты.Добавить("ПометкаУдаления");
		ВыгружаемыеСтандартныеРеквизиты.Добавить("Стартован");
		ВыгружаемыеСтандартныеРеквизиты.Добавить("Завершен");
		ВыгружаемыеСтандартныеРеквизиты.Добавить("ВедущаяЗадача");
		ВыгружатьКод = Ложь;
		Если ОписательОбъекта.Свойство("ВыгружатьКод", ВыгружатьКод) и ВыгружатьКод Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить("Номер");
		КонецЕсли;
	ИначеЕсли КорневойТипКонфигурации = "Задача" Тогда
		ВыгружаемыеСтандартныеРеквизиты.Добавить("Дата");
		ВыгружаемыеСтандартныеРеквизиты.Добавить("ПометкаУдаления");
		ВыгружаемыеСтандартныеРеквизиты.Добавить("БизнесПроцесс");
		ВыгружаемыеСтандартныеРеквизиты.Добавить("ТочкаМаршрута");
		ВыгружаемыеСтандартныеРеквизиты.Добавить("Наименование");
		ВыгружаемыеСтандартныеРеквизиты.Добавить("Выполнена");
		ВыгружатьКод = Ложь;
		Если ОписательОбъекта.Свойство("ВыгружатьКод", ВыгружатьКод) и ВыгружатьКод Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить("Номер");
		КонецЕсли;
	ИначеЕсли КорневойТипКонфигурации = "РегистрСведений" Тогда
		Если Не ОписательОбъекта.Метаданное.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить("Период");
		КонецЕсли;
		Если ОписательОбъекта.Метаданное.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			ВыгружаемыеСтандартныеРеквизиты.Добавить("Регистратор");
			ВыгружаемыеСтандартныеРеквизиты.Добавить("Активность");
		КонецЕсли;
		//Для каждого МдРеквизит Из ОписательОбъекта.Метаданное.СтандартныеРеквизиты Цикл
		//	Сообщить("МдРеквизит.Имя = <"+?(МдРеквизит.Имя = Неопределено, "Неопределено", МдРеквизит.Имя)+">"); 
		//КонецЦикла;
	ИначеЕсли КорневойТипКонфигурации = "РегистрНакопления" Тогда
		Для Каждого ОписаниеСтандартногоРеквизита Из ОписательОбъекта.Метаданное.СтандартныеРеквизиты Цикл
			Если ОписаниеСтандартногоРеквизита.Имя = "НомерСтроки" Тогда
			//Если ОписаниеСтандартногоРеквизита.Имя = "НомерСтроки" Или ОписаниеСтандартногоРеквизита.Имя = "ВидДвижения" Тогда
				Продолжить;
			КонецЕсли;
			ВыгружаемыеСтандартныеРеквизиты.Добавить(ОписаниеСтандартногоРеквизита.Имя);
		КонецЦикла;
	Иначе
		ВызватьИсключение "Неизвестный КорневойТипКонфигурации <"+КорневойТипКонфигурации+"> КорневойТипКонфигурации()";
	КонецЕсли;
	
	Возврат ВыгружаемыеСтандартныеРеквизиты;
КонецФункции

Процедура ОбработатьРеквизитыОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект, лПустойОбъект, МдРеквизиты, ВыгружаемыеРеквизиты)
	НомерСтрокиМакета = Макет.ВысотаТаблицы+1;
	
	ЭтоСсылочныйОбъект = ЭтоОписательОбъектаСсылки(ОписательОбъекта); //ЭтоСсылочныйОбъект = ОписательОбъекта.Свойство("Ссылка");
	Если ЭтоСсылочныйОбъект Тогда
		Мд = Объект.Метаданные();
	Иначе
		Мд = Объект;
	КонецЕсли;

	Для каждого РеквизитМд Из МдРеквизиты Цикл
		имяРеквизита = РеквизитМд.Имя;
		Если ВыгружаемыеРеквизиты <> Неопределено и ВыгружаемыеРеквизиты.Найти(имяРеквизита) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ЭтоСсылочныйОбъект Тогда
			ЗначениеРеквизита = объект[имяРеквизита];

			этоЗначениеБудетСозданоПоУмолчанию = лПустойОбъект[имяРеквизита] = ЗначениеРеквизита;
			Если этоЗначениеБудетСозданоПоУмолчанию Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			ЗначениеРеквизита = ОписательОбъекта.Реквизиты[имяРеквизита];
		КонецЕсли;
		
		ДобавилиРеквизит = ОбработатьРеквизитОбъекта(Макет, МассивДанных, имяРеквизита, ЗначениеРеквизита, Мд, НомерСтрокиМакета, ШапкаДанных);
		
		Если ДобавилиРеквизит Тогда
			НомерСтрокиМакета = НомерСтрокиМакета + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьТабличныеЧастиОбъекта(Макет, МдТабличныеЧасти, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект)
	Для каждого МдТч Из МдТабличныеЧасти Цикл
		МдРеквизиты = МдТч.Реквизиты;
		ИмяТЧ = МдТч.Имя;
		
		НомерКолонкиМакета_ТЧ = ШапкаДанных.ТЧ;
		
		Для каждого строкаТчОбъекта Из объект[ИмяТЧ] Цикл
			НомерСтрокиМакета = Макет.ВысотаТаблицы+1;
			ОбластьМакета = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_ТЧ, НомерСтрокиМакета, НомерКолонкиМакета_ТЧ);
			ОбластьМакета.Текст = ИмяТЧ;
			
			ОбработатьРеквизитыТабличнойЧастиОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект, строкаТчОбъекта, МдРеквизиты);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьРеквизитыТабличнойЧастиОбъекта(Макет, ОписательОбъекта, ШапкаДанных, МассивДанных, Объект, строкаТчОбъекта, МдРеквизиты)
	НомерСтрокиМакета = Макет.ВысотаТаблицы+1;
	
	Мд = Объект.Метаданные();

	Для каждого РеквизитМд Из МдРеквизиты Цикл
		имяРеквизита = РеквизитМд.Имя;

		ЗначениеРеквизита = строкаТчОбъекта[имяРеквизита];

		ДобавилиРеквизит = ОбработатьРеквизитОбъекта(Макет, МассивДанных, имяРеквизита, ЗначениеРеквизита, Мд, НомерСтрокиМакета, ШапкаДанных);

		Если ДобавилиРеквизит Тогда
			НомерСтрокиМакета = НомерСтрокиМакета + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ОбработатьРеквизитОбъекта(Макет, МассивДанных, имяРеквизита, ЗначениеРеквизита, Мд, НомерСтрокиМакета, ШапкаДанных)
	ТипРеквизита = ТипЗнч(ЗначениеРеквизита);
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПредставлениеЗначенияРеквизита = "";
	РежимПоиска = "";
	ДополнительныйТипЗначения = "";
	Попытка
		ПолучитьПредставлениеИРежимПоискаПоЗначениюРеквизита(ЗначениеРеквизита, ТипРеквизита, МассивДанных, ПредставлениеЗначенияРеквизита, РежимПоиска, ДополнительныйТипЗначения);
	Исключение
		описаниеОшибки = ОписаниеОшибки();
		ВызватьИсключение описаниеОшибки + " Не умею обрабатывать реквизит <"+имяРеквизита+"> у объекта <"+Мд.ПолноеИмя()+">";
	КонецПопытки;
	
	НомерКолонкиМакета_Реквизит = ШапкаДанных.Реквизит;
	НомерКолонкиМакета_Значение = ШапкаДанных.Значение;
	НомерКолонкиМакета_Режим = ШапкаДанных.Режим;
	НомерКолонкиМакета_ДополнительныйТипЗначения = ШапкаДанных.ДополнительныйТипЗначения;
	
	ОбластьМакета_Реквизит = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Реквизит, НомерСтрокиМакета, НомерКолонкиМакета_Реквизит);
	ОбластьМакета_Реквизит.Текст = имяРеквизита;
	
	ОбластьМакета_Значение = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Значение, НомерСтрокиМакета, НомерКолонкиМакета_Значение);
	ОбластьМакета_Режим = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_Режим, НомерСтрокиМакета, НомерКолонкиМакета_Режим);

	ОбластьМакета_ДополнительныйТипЗначения = Макет.Область(НомерСтрокиМакета, НомерКолонкиМакета_ДополнительныйТипЗначения, НомерСтрокиМакета, НомерКолонкиМакета_ДополнительныйТипЗначения);
	ОбластьМакета_ДополнительныйТипЗначения.Текст = ДополнительныйТипЗначения;
	
	ОбластьМакета_Значение.Текст = ПредставлениеЗначенияРеквизита;
	Если РежимПоиска <> "" Тогда
		ОбластьМакета_Режим.Текст = РежимПоиска;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Процедура ПолучитьПредставлениеИРежимПоискаПоЗначениюРеквизита(ЗначениеРеквизита, ТипРеквизита, МассивДанных, резПредставлениеЗначенияРеквизита, резРежимПоиска, резДополнительныйТипЗначения)
	резДополнительныйТипЗначения = "";
	Если ТипРеквизита = Тип("Число") Тогда
		ПредставлениеЗначенияРеквизита = Формат(ЗначениеРеквизита, "ЧГ=");
	ИначеЕсли ТипРеквизита = Тип("Строка") Тогда
		ПредставлениеЗначенияРеквизита = ЗначениеРеквизита;
	ИначеЕсли ТипРеквизита = Тип("Дата") Тогда
		ПредставлениеЗначенияРеквизита = Формат(ЗначениеРеквизита, "ДФ=yyyyMMddччммсс");
	ИначеЕсли ТипРеквизита = Тип("Булево") Тогда
		ПредставлениеЗначенияРеквизита = Формат(ЗначениеРеквизита, "БЛ=Ложь; БИ=Истина");
		
	ИначеЕсли ЛиСсылкаНаОбъектБД_ирЛкс(ЗначениеРеквизита) Тогда
		ОписательЗначенияРеквизита = НайтиОписательОбъектаПоСсылке(МассивДанных, ЗначениеРеквизита); //МассивДанных.Найти(ЗначениеРеквизита);
		Если ОписательЗначенияРеквизита <> Неопределено Тогда
			ПредставлениеЗначенияРеквизита = ИмяПеременнойИзОписателяОбъекта(ЗначениеРеквизита.Метаданные(), ОписательЗначенияРеквизита);
			РежимПоиска = "Перем";
		Иначе
			ПредставлениеЗначенияРеквизита = ЗначениеРеквизита;
			Если БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ТипРеквизита) Тогда
				ПредставлениеЗначенияРеквизита = ЗначениеРеквизита.Имя;
				РежимПоиска = "Предопределенный";
			Иначе
				
				МетаданныеСсылки = ЗначениеРеквизита.Метаданные();
				Если Метаданные.Справочники.Содержит(МетаданныеСсылки) Тогда
					ОсновноеПредставлениеСсылки = МетаданныеСсылки.ОсновноеПредставление;
					Если ЗначениеРеквизита.Предопределенный Тогда
						РежимПоиска = "Предопределенный";
						ПредставлениеЗначенияРеквизита = Справочники[МетаданныеСсылки.Имя].ПолучитьИмяПредопределенного(ЗначениеРеквизита);
					ИначеЕсли ОсновноеПредставлениеСсылки = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеНаименования Тогда
						РежимПоиска = "Наименование";
					Иначе
						РежимПоиска = "Код";
					КонецЕсли;
				ИначеЕсли Метаданные.Документы.Содержит(МетаданныеСсылки) Тогда
					ПредставлениеЗначенияРеквизита = ЗначениеРеквизита.Номер;
					РежимПоиска = "Номер";
					резДополнительныйТипЗначения = "ДокументСсылка."+МетаданныеСсылки.Имя;
				ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеСсылки) Тогда
					ОсновноеПредставлениеСсылки = МетаданныеСсылки.ОсновноеПредставление;
					Если ЗначениеРеквизита.Предопределенный Тогда
						РежимПоиска = "Предопределенный";
						ПредставлениеЗначенияРеквизита = ПланыСчетов[МетаданныеСсылки.Имя].ПолучитьИмяПредопределенного(ЗначениеРеквизита);
					ИначеЕсли ОсновноеПредставлениеСсылки = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета.ВВидеНаименования Тогда
						РежимПоиска = "Наименование";
					Иначе
						РежимПоиска = "Код";
					КонецЕсли;
				Иначе
					// пока так. надо добавить остальные типы
					РежимПоиска = "Наименование";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЛиСсылкаНаПеречисление_ирЛкс(ЗначениеРеквизита) Тогда
		ПредставлениеЗначенияРеквизита = "";
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ИмяПеречисления = ЗначениеРеквизита.Метаданные().Имя;
			ИндексЗначения = Перечисления[ИмяПеречисления].Индекс(ЗначениеРеквизита);
			ИмяЗначения = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначения].Имя;
		КонецЕсли;
		ПредставлениеЗначенияРеквизита = ИмяЗначения;
		РежимПоиска = "Предопределенный";
		
	ИначеЕсли ТипРеквизита = Тип("УникальныйИдентификатор") Тогда
		ПредставлениеЗначенияРеквизита = ""+ЗначениеРеквизита;
		РежимПоиска = "Гуид";
	ИначеЕсли ТипРеквизита = Тип("ХранилищеЗначения") Тогда
		ПредставлениеЗначенияРеквизита = ""+ЗначениеРеквизита;
		
	Иначе
		УжеВычислилиЗначение = Ложь;
		ПредставлениеЗначенияРеквизита = Неопределено;
		СтрокаДляВыполнения = "ПредставлениеЗначенияРеквизита = "+ТипРеквизита+"["""+ЗначениеРеквизита+"""];";
		Попытка
			Выполнить(СтрокаДляВыполнения);
			УжеВычислилиЗначение = Истина;
			РежимПоиска = "Предопределенный";
		Исключение
		КонецПопытки;
		Если Не УжеВычислилиЗначение Тогда
			ВызватьИсключение "Генератор макета из реальных данных: Не умею обрабатывать такой тип <"+ТипРеквизита+">";
		КонецЕсли;
	КонецЕсли;
	резПредставлениеЗначенияРеквизита = ПредставлениеЗначенияРеквизита;
	резРежимПоиска = РежимПоиска;
КонецПроцедуры

Функция НайтиОписательОбъектаПоСсылке(МассивДанных, Ссылка)
	Для каждого ОписательОбъекта Из МассивДанных Цикл
		СсылкаВрем = Неопределено;
		Если ЭтоОписательОбъектаСсылки(ОписательОбъекта, СсылкаВрем) и СсылкаВрем = Ссылка Тогда
			Возврат ОписательОбъекта;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция ЭтоОписательОбъектаСсылки(ОписательОбъекта, РезСсылка = Неопределено)
	
	ЭтоСсылочныйОбъект = ОписательОбъекта.Свойство("Ссылка", РезСсылка) И РезСсылка <> Неопределено;
	Возврат ЭтоСсылочныйОбъект;
	
КонецФункции

Функция ИмяПеременнойИзОписателяОбъекта(Мд, ОписательОбъекта)
	ИмяПеременной = "";
	Если НЕ ОписательОбъекта.Свойство("ИмяПеременной", ИмяПеременной) или ПустаяСтрока(ИмяПеременной) Тогда
		ИмяПеременной = Мд.Имя;
	КонецЕсли;
	Возврат ИмяПеременной;
КонецФункции

Функция ШапкаДанныхВМакете()
	рез = Новый Структура();
	рез.Вставить("Тип", 1);
	рез.Вставить("Вид", 2);
	рез.Вставить("ИмяПеременной", 3);
	рез.Вставить("ТЧ", 4);
	рез.Вставить("Реквизит", 5);
	рез.Вставить("Значение", 6);
	рез.Вставить("Режим", 7);
	рез.Вставить("ДополнительныйТипЗначения", 8);
	Возврат рез;
КонецФункции

// { БЛОК МЕТОДОВ ИЗ ИР (Инструменты Разработчика, автор TormozIt )
//
// Определяет корневой тип конфигурации по описанию типов, типу, метаданным, ссылке или объекту.
// Для описания типов берется первый тип массива типов.
//
// Параметры:
//  пОбъект      – Произвольный – для чего получаем метаданные;
//  *пЛиТолькоДляКорневого - Булево, *Ложь - возвращать только для объекта корневого типа.
//
// Возвращаемое значение:
//               - Строка – имя типа корневого объекта метаданных;
//  Неопределено - не удалось получить имя типа.
//
Функция ПолучитьКорневойТипКонфигурации_ирЛкс(пОбъект, пЛиТолькоДляКорневого = Ложь) Экспорт

	Если ТипЗнч(пОбъект) = Тип("ОбъектМетаданных") Тогда 
		МетаданныеТипа = пОбъект;
	Иначе
		МетаданныеТипа = ПолучитьМетаданные_ирЛкс(пОбъект);
	КонецЕсли;
	Результат = Неопределено;
	Если МетаданныеТипа <> Неопределено Тогда
		ПолноеИмя = МетаданныеТипа.ПолноеИмя();
		Если пЛиТолькоДляКорневого Тогда 
			МассивФрагментов = ПолучитьМассивИзСтрокиСРазделителем_ирЛкс(ПолноеИмя);
			Если МассивФрагментов.Количество() = 2 Тогда
				Результат = МассивФрагментов[0];
			КонецЕсли;
		Иначе
			Результат = ПолучитьПервыйФрагмент_ирЛкс(ПолноеИмя);
		КонецЕсли;
	КонецЕсли;
	Если Результат = "ТабличнаяЧасть" Тогда
		// Баг платформы. У внешних метаданных полное имя не включает сам внешний метаобъект
		Результат = Неопределено;
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции // ЛксПолучитьКорневойТипКонфигурации()

// Проверяет, является ли значение ссылкой на объект БД. На базе ЛксЛиСсылкаНаОбъектБД
//
// Параметры:
//  пЗначение    – ОбъектМетаданных, Произвольный – проверяемое значение.
//
// Возвращаемое значение:
//  Истина       – значение является ссылкой на объект БД;
//  Ложь         – значение не является ссылкой на объект БД.
//
Функция ЛиСсылкаНаОбъектБД_ирЛкс(пЗначение) Экспорт

	Возврат ЛиКорневойТипОбъектаБД_ирЛкс(ПолучитьКорневойТипКонфигурации_ирЛкс(пЗначение, Истина));
		
КонецФункции // ЛксЛиСсылкаНаОбъектБД

// Проверяет, является ли значение ссылкой на значение перечисления.
//
// Параметры:
//  пЗначение    – Произвольный – проверяемое значение.
//
// Возвращаемое значение:
//  Истина       – значение является ссылкой на объект БД;
//  Ложь         – значение не является ссылкой на объект БД.
//
Функция ЛиСсылкаНаПеречисление_ирЛкс(пЗначение) Экспорт

	Возврат (ПолучитьКорневойТипКонфигурации_ирЛкс(пЗначение) = "Перечисление");

КонецФункции // ЛксЛиСсылкаНаПеречисление()

// Проверяет, является ли строка именем корневого типа объекта БД.
//
// Параметры:
//  пИмяКорневогоТипа - Строка, Неопределено - имя корневого типа.
//
// Возвращаемое значение:
//  Истина       – тип является корневым типом объекта БД;
//  Ложь         – иначе.
//
Функция ЛиКорневойТипОбъектаБД_ирЛкс(КорневойТип) Экспорт

	Если Ложь
		ИЛИ КорневойТип = "БизнесПроцесс" 
		ИЛИ КорневойТип = "Задача" 
		ИЛИ КорневойТип = "Документ"
		ИЛИ КорневойТип = "ПланВидовРасчета" 
		ИЛИ КорневойТип = "ПланВидовХарактеристик" 
		ИЛИ КорневойТип = "ПланОбмена"
		ИЛИ КорневойТип = "ПланСчетов" 
		ИЛИ КорневойТип = "Справочник"
	Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;

КонецФункции // ЛксЛиКорневойТипОбъектаБД()

// Получает менеджер по описанию типов, типу, метаданным, ссылке или объекту. На базе метода ЛксПолучитьМенеджер
// Для описания типов берется первый тип массива типов.
//
// Параметры:
//  пОбъект      – Произвольный – для чего получаем менеджер.
//
// Возвращаемое значение:
//               – МенеджерОбъекта - для ссылки или ссылочного типа;
//  Неопределено - не удалось получить.
//
Функция ПолучитьМенеджерОбъекта_ирЛкс(пОбъект) Экспорт
	
	Если ТипЗнч(пОбъект) = Тип("ОбъектМетаданных") Тогда 
		МетаданныеОбъекта = пОбъект;
	Иначе
		МетаданныеОбъекта = ПолучитьМетаданные_ирЛкс(пОбъект);
	КонецЕсли;
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	МассивФрагментов = ПолучитьМассивИзСтрокиСРазделителем_ирЛкс(МетаданныеОбъекта.ПолноеИмя());
	КорневойТип = МассивФрагментов[0];
	Менеджер = Неопределено;
	Если Истина
		И МассивФрагментов.Количество() = 4 
		И КорневойТип = "ВнешнийИсточникДанных" 
	Тогда
		ИмяТипаМенеджера = МассивФрагментов[0] + "ТаблицаМенеджер." + МассивФрагментов[1] + "." + МассивФрагментов[3];
	Иначе
		//КорневойТип = ЛксПолучитьКорневойТипКонфигурации(МетаданныеОбъекта, Истина); // Изменил 02.03.2012
		Если КорневойТип <> Неопределено Тогда
			ИмяТипаМенеджера = КорневойТип + "Менеджер." + МетаданныеОбъекта.Имя;
		Иначе
			ИмяТипаМенеджера = "Неопределено";
		КонецЕсли;
	КонецЕсли;
	Попытка
		Менеджер = Новый (ИмяТипаМенеджера);
	Исключение
	КонецПопытки;
	Возврат Менеджер;

КонецФункции // ЛксПолучитьМенеджер()

// Получает метаданные по полному имени, описанию типов, типу, ссылке или объекту. На базе ЛксПолучитьМетаданные
// Для описания типов берется первый тип массива типов.
//
// Параметры:
//  пОбъект      – Произвольный – для чего получаем метаданные.
//
// Возвращаемое значение:
//               – Метаданные - полученные;
//  Неопределено - не удалось получить метаданные.
//
Функция ПолучитьМетаданные_ирЛкс(пОбъект) Экспорт
	
	Если ТипЗнч(пОбъект) = Тип("Строка") Тогда
		Если ПустаяСтрока(пОбъект) Тогда
			Результат = Неопределено;
		Иначе
			Фрагменты = ПолучитьМассивИзСтрокиСРазделителем_ирЛкс(пОбъект);
			Если Фрагменты.Количество() = 3 Тогда
				// ВидыСубконто, Изменения
				ПолноеИмяМД = Фрагменты[0] + "." + Фрагменты[1];
			Иначе
				ПолноеИмяМД = пОбъект;
			КонецЕсли; 
			Результат = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМД);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	ТипОбъекта = ПолучитьТипОбъекта_ирЛкс(пОбъект);
	Результат = Метаданные.НайтиПоТипу(ТипОбъекта);
	Возврат Результат;
	
КонецФункции // ЛксПолучитьМетаданные()

// Получает тип из описания типов, типа или значения. На базе ЛксПолучитьТипОбъекта
//
// Параметры:
//  пОбъект    – Тип, ОписаниеТипов, Произвольный – проверяемое значение.
//
// Возвращаемое значение:
//  Тип - найденный тип.
//
Функция ПолучитьТипОбъекта_ирЛкс(пОбъект)

	ТипОбъекта = Тип("Неопределено");
	ТипПараметра = ТипЗнч(пОбъект);
	Если ТипПараметра = Тип("ОписаниеТипов") Тогда
		Если пОбъект.Типы().Количество() > 0 Тогда 
			ТипОбъекта = пОбъект.Типы()[0];
		КонецЕсли;
	ИначеЕсли ТипПараметра <> Тип("Тип") Тогда 
		ТипОбъекта = ТипПараметра;
	Иначе
		ТипОбъекта = пОбъект;
	КонецЕсли;
	
	Возврат ТипОбъекта;

КонецФункции // ЛксПолучитьТипОбъекта()

// Функция разбивает строку разделителем. На базе ЛксПолучитьМассивИзСтрокиСРазделителем
// 
// Параметры:
//  пСтрока      - Строка - которую разбиваем;
//  *пРазделитель - Строка, "." - символ-разделитель;
//  *ОбрезатьНепечатныеСимволы - Булево, *Ложь - делать СокрЛП.
//  *ОставлятьПустуюСтроку - Булево, *Истина - если передана пустая строка, то добавлять ее в массив.
//
// Возвращаемое значение:
//  Массив - фрагментов.
//
Функция ПолучитьМассивИзСтрокиСРазделителем_ирЛкс(Знач Стр, Разделитель = ".", ОбрезатьНепечатныеСимволы = Ложь, ОставлятьПустуюСтроку = Истина) Экспорт
	
	МассивСтрок = Новый Массив;
	Если Истина
		И Не ОставлятьПустуюСтроку 
		И ПустаяСтрока(Стр)
	Тогда
		Возврат МассивСтрок;
	КонецЕсли; 
	
	//лСтрока = СтрЗаменить(Стр, Разделитель, Символы.ПС);
	//// Баг платформы. СтрЧислоСтрок не учитывает терминальный перевод строки.
	//ЧислоСтрок = СтрЧислоСтрок(лСтрока + " ");
	//Для Счетчик = 1 По ЧислоСтрок Цикл 
	//	Фрагмент = СтрПолучитьСтроку(лСтрока, Счетчик);
	//	Если ОбрезатьНепечатныеСимволы Тогда
	//		Фрагмент = СокрЛП(Фрагмент);
	//	КонецЕсли;
	//	МассивСтрок.Добавить(Фрагмент);
	//КонецЦикла;
	
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				Фрагмент = Стр;
				Если ОбрезатьНепечатныеСимволы Тогда
					Фрагмент = СокрЛП(Фрагмент);
				КонецЕсли;
				МассивСтрок.Добавить(Фрагмент);
				Возврат МассивСтрок;
			КонецЕсли;
			Фрагмент = Лев(Стр,Поз-1);
			Если ОбрезатьНепечатныеСимволы Тогда
				Фрагмент = СокрЛП(Фрагмент);
			КонецЕсли;
			МассивСтрок.Добавить(Фрагмент);
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;

	Возврат МассивСтрок;
		
КонецФункции // ЛксПолучитьМассивИзСтрокиСРазделителем()

// Получает первый фрагмент, отделяемый разделителем от строки. На базе ЛксПолучитьПервыйФрагмент
// Написана для оптимизации по скорости.
// 
// Параметры:
//  пСтрока      - Строка - которую разбиваем;
//  *пРазделитель - Строка, "." - символ-разделитель;
//  *пЛиИспользоватьГраницуЕслиМаркерНеНайден - Булево, *Истина.
//
// Возвращаемое значение:
//               - Строка - первый фрагмент строки;
//  Неопределено - в строке не обнаружен разделитель.
//
Функция ПолучитьПервыйФрагмент_ирЛкс(пСтрока, пРазделитель = ".",
	пЛиИспользоватьГраницуЕслиМаркерНеНайден = Истина) Экспорт

	Позиция = Найти(пСтрока, пРазделитель);
	Если Позиция > 0 Тогда
		Возврат Лев(пСтрока, Позиция - 1);
	Иначе
		Если пЛиИспользоватьГраницуЕслиМаркерНеНайден Тогда 
			Возврат пСтрока;
		Иначе
			Возврат пСтрока;
		КонецЕсли;
	КонецЕсли;

КонецФункции // ЛксПолучитьПервыйФрагмент()

// Получает идентификатор из любой строки.
// "3-я Дебиторка По контрагентам с интервалами СНГ (для  Руководства)" => "_3_яДебиторкаПоКонтрагентамСИнтерваламиСНГ_дляРуководства_".
//
// Параметры:
//  Представление – Строка.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьИдентификаторИзПредставления_Лкс(Знач Представление, VBRegExp, ЗаменаПустойСтроки = "_") Экспорт
	Если VBRegExp = Неопределено Тогда
		VBRegExp = ПолучитьНовыйВычислительРегулярныхВыражений();
	КонецЕсли;
	
	шБуква = "_ЁА-ЯA-Z";

	Если ПустаяСтрока(Представление) Тогда
		Представление = ЗаменаПустойСтроки;
	КонецЕсли;
	Если СокрЛП(Представление) = Представление Тогда
		Попытка
			Пустышка = Новый Структура(Представление);
			Возврат Представление;
		Исключение КонецПопытки;
	КонецЕсли; 
	VBRegExp.Pattern = "\d";
	НовоеПредставление = Представление;
	ПервыйСимвол = Сред(Представление, 1, 1);
	Если VBRegExp.Test(ПервыйСимвол) Тогда
		// Первый символ - цифра
		НовоеПредставление = "_" + НовоеПредставление;
	КонецЕсли;
	ПредыдущийСимвол = " ";
	ТекущаяСтрока = "";
	Для Счетчик = 1 По СтрДлина(НовоеПредставление) Цикл
		ТекущийСимвол = Сред(НовоеПредставление, Счетчик, 1);
		VBRegExp.Pattern = "\s";
		Если VBRegExp.Test(ПредыдущийСимвол) Тогда
			// Предыдущий символ - непечатаемый
			ТекущийСимвол = ВРег(ТекущийСимвол);
		КонецЕсли;
		VBRegExp.Pattern = "[" + шБуква + "\d]";
		Если VBRegExp.Test(ТекущийСимвол) Тогда
			// Предыдущий символ - непечатаемый
			ТекущаяСтрока = ТекущаяСтрока + ТекущийСимвол;
		Иначе
			VBRegExp.Pattern = "[\S]";
			Если VBRegExp.Test(ТекущийСимвол) Тогда
				ТекущаяСтрока = ТекущаяСтрока + "_";
			КонецЕсли;
		КонецЕсли;
		ПредыдущийСимвол = ТекущийСимвол;
	КонецЦикла;
	Результат = ТекущаяСтрока;
	Возврат ТекущаяСтрока;

КонецФункции // ПолучитьИдентификаторИзПредставления()

Функция ПолучитьНовыйВычислительРегулярныхВыражений() Экспорт
	
	Результат = Новый COMОбъект("VBScript.RegExp");
	Результат.IgnoreCase = Истина;
	Возврат Результат;
	
КонецФункции
// } Конец блока методов из ИР (Инструменты Разработчика, автор TormozIt )

//} КОНЕЦ ОСНОВНОГО БЛОКА

//{ БЛОК ЮНИТ-ТЕСТОВ - сами тесты

Процедура ПередЗапускомТеста() Экспорт
	// в режиме транзакции какие-то проблемы с уникальностью кода :(
	// а вот без режима транзакций иногда не все созданные тестовые элементы Справочника.ПростойСправочник удаляются :(
	НачатьТранзакцию(); 
	
	ТестовыеДанныхДляУдаления = Новый Массив;
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Для каждого ТестовыеДанные Из ТестовыеДанныхДляУдаления Цикл
		юТест.УдалитьСозданныеДанные(ТестовыеДанные);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьТестовыеДанныхДляУдаления(ТестовыеДанные)
	ТестовыеДанныхДляУдаления.Добавить(ТестовыеДанные);
КонецПроцедуры


Процедура ТестДолжен_ПолучитьМакетДляСозданияПростогоСправочника() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочника");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
		
	Отбор = Новый Структура("Наименование,РеквизитБулево", "Тестовое наименование", Истина);
	
	КоличествоДо = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник", Отбор);
		юТест.ПроверитьРавенство(1, количествоДо, "количествоДо");
		
	описаниеЭлемента = СоздатьОписательЭлементаПоСсылке(ТестовыеДанные.ПростойСправочник, Новый Массив);
	ИмяПеременной = описаниеЭлемента.ИмяПеременной;
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(описаниеЭлемента);
		
	НовыйМакет = ЭтотОбъект.СоздатьМакетДляГенерацииДанных(массивДанных);
	
	юТест.УдалитьСозданныеДанные(тестовыеДанные);
		юТест.ПроверитьРавенство(0, юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник", Отбор), "количество после удаления");
	
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(НовыйМакет);
	ДобавитьТестовыеДанныхДляУдаления(ТестовыеДанные);
	
		юТест.ПроверитьИстину(ТестовыеДанные.Свойство(ИмяПеременной), "Ожидали, что есть переменная '"+ИмяПеременной+"'");
		юТест.ПроверитьТип(ТестовыеДанные[ИмяПеременной], "СправочникСсылка.ПростойСправочник");
	
	КоличествоПосле = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник", Отбор);
		юТест.ПроверитьРавенство(1, КоличествоПосле, "КоличествоПосле");
КонецПроцедуры

Процедура ТестДолжен_ПолучитьМакетДляСозданияОбъектаСЗаполненнымРеквизитомТипаПеречисление() Экспорт
	Макет = ПолучитьМакет("СозданиеОбъектаСЗаполненнымРеквизитомТипаПеречисление");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	ЗначениеПеречисления = Перечисления.Перечисление1.ЗначениеПеречисления1;
	Отбор = Новый Структура("Наименование,РеквизитПеречисление", "тЗначениеПеречисления1", ЗначениеПеречисления);
	
	КоличествоДо = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник", Отбор);
		юТест.ПроверитьРавенство(1, количествоДо, "количествоДо");
		
	описаниеЭлемента = СоздатьОписательЭлементаПоСсылке(ТестовыеДанные.ПростойСправочник, Новый Массив);
	ИмяПеременной = описаниеЭлемента.ИмяПеременной;
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(описаниеЭлемента);
		
	НовыйМакет = ЭтотОбъект.СоздатьМакетДляГенерацииДанных(массивДанных);
	
	юТест.УдалитьСозданныеДанные(тестовыеДанные);
		юТест.ПроверитьРавенство(0, юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник", Отбор), "количество после удаления");
	
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(НовыйМакет);
	ДобавитьТестовыеДанныхДляУдаления(ТестовыеДанные);
	
		юТест.ПроверитьРавенство(ТестовыеДанные[ИмяПеременной].РеквизитПеречисление, ЗначениеПеречисления, "СправочникСсылка.ПростойСправочник.РеквизитПеречисление");
	
	КоличествоПосле = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник", Отбор);
		юТест.ПроверитьРавенство(1, КоличествоПосле, "КоличествоПосле");
КонецПроцедуры

Процедура ТестДолжен_ПолучитьМакетДляСозданияДвухПростыхСправочников() Экспорт
	Макет = ПолучитьМакет("СозданиеДвухПростыхСправочников");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
		
	Отбор = Новый Структура("Наименование", "Тестовое наименование", Истина);
	
	МассивИмен = Новый Массив;
	описаниеЭлемента = СоздатьОписательЭлементаПоСсылке(ТестовыеДанные.ПростойСправочник, МассивИмен);
	описаниеЭлемента.Вставить("ВыгружатьКод", Ложь);

	описаниеЭлемента2 = СоздатьОписательЭлементаПоСсылке(ТестовыеДанные.ПростойСправочник2, МассивИмен);
	описаниеЭлемента2.Вставить("ВыгружатьКод", Ложь);
	ИмяПеременной2 = описаниеЭлемента2.ИмяПеременной;
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(описаниеЭлемента);
	МассивДанных.Добавить(описаниеЭлемента2);
		
	НовыйМакет = ЭтотОбъект.СоздатьМакетДляГенерацииДанных(массивДанных);
	
	юТест.УдалитьСозданныеДанные(тестовыеДанные);
		юТест.ПроверитьРавенство(0, юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник", Отбор), "количество после удаления");
		юТест.ПроверитьРавенство(0, юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник2", Отбор), "количество2 после удаления");
	
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(НовыйМакет);
	ДобавитьТестовыеДанныхДляУдаления(ТестовыеДанные);
		юТест.ПроверитьРавенство(МассивДанных.Количество(), ТестовыеДанные.Количество(), "МассивДанных.Количество(), ТестовыеДанные.Количество() НовыйМакет");
		юТест.ПроверитьИстину(ТестовыеДанные.Свойство(ИмяПеременной2), "Ожидали, что есть переменная '"+ИмяПеременной2+"'");
		юТест.ПроверитьТип(ТестовыеДанные[ИмяПеременной2], "СправочникСсылка.ПростойСправочник2");
	
	Количество2После = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник2", Отбор);
		юТест.ПроверитьРавенство(Количество2После, 1, "Количество2После");
КонецПроцедуры

Процедура ТестДолжен_ПолучитьМакетДляСозданияДвухСвязанныхСправочников() Экспорт
	Макет = ПолучитьМакет("СозданиеСвязанныхСправочников");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
		
	Отбор = Новый Структура("Наименование", "Тестовое наименование", Истина);
	
	МассивИмен = Новый Массив;
	описаниеЭлемента = СоздатьОписательЭлементаПоСсылке(ТестовыеДанные.ПростойСправочник, МассивИмен);
	описаниеЭлемента.Вставить("ВыгружатьКод", Ложь);
	ИмяПеременной = описаниеЭлемента.ИмяПеременной;

	описаниеЭлемента2 = СоздатьОписательЭлементаПоСсылке(ТестовыеДанные.ИерархическийСправочник, МассивИмен);
	описаниеЭлемента2.Вставить("ВыгружатьКод", Ложь);
	ИмяПеременной2 = описаниеЭлемента2.ИмяПеременной;
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(описаниеЭлемента);
	МассивДанных.Добавить(описаниеЭлемента2);
		
	НовыйМакет = ЭтотОбъект.СоздатьМакетДляГенерацииДанных(массивДанных);
	
	юТест.УдалитьСозданныеДанные(тестовыеДанные);
		юТест.ПроверитьРавенство(0, юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник", Отбор), "количество после удаления");
		юТест.ПроверитьРавенство(0, юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ИерархическийСправочник", Отбор), "количество2 после удаления");
	
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(НовыйМакет);
	ДобавитьТестовыеДанныхДляУдаления(ТестовыеДанные);
		юТест.ПроверитьРавенство(МассивДанных.Количество(), ТестовыеДанные.Количество(), "МассивДанных.Количество(), ТестовыеДанные.Количество() НовыйМакет");
	юТест.ПроверитьРавенство(ТестовыеДанные[ИмяПеременной], ТестовыеДанные[ИмяПеременной2].ПростойСправочник);
	
	Количество2После = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ИерархическийСправочник", Отбор);
		юТест.ПроверитьРавенство(Количество2После, 1, "Количество2После");
КонецПроцедуры

Процедура ТестДолжен_ПолучитьМакетДляСозданияСправочникаСРеквизитомСсылка_РежимПоискаКод() Экспорт
	Макет1 = ПолучитьМакет("СозданиеПростогоСправочника");
	ТестовыеДанные1 = юТест.СоздатьДанныеПоТабличномуДокументу(Макет1);
	ДобавитьТестовыеДанныхДляУдаления(ТестовыеДанные1);
	
	Макет = ПолучитьМакет("СозданиеСправочникаСРеквизитомСсылка_РежимПоискаКод");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
		
	Отбор = Новый Структура("Наименование", "Тестовое наименование", Истина);
	
	МассивИмен = Новый Массив;
	описаниеЭлемента2 = СоздатьОписательЭлементаПоСсылке(ТестовыеДанные.ИерархическийСправочник, МассивИмен);
	описаниеЭлемента2.Вставить("ВыгружатьКод", Ложь);
	ИмяПеременной2 = описаниеЭлемента2.ИмяПеременной;
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(описаниеЭлемента2);
		
	НовыйМакет = ЭтотОбъект.СоздатьМакетДляГенерацииДанных(массивДанных);
	
	юТест.УдалитьСозданныеДанные(тестовыеДанные);
		юТест.ПроверитьРавенство(0, юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ИерархическийСправочник", Отбор), "количество2 после удаления");
	
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(НовыйМакет);
	ДобавитьТестовыеДанныхДляУдаления(ТестовыеДанные);
		юТест.ПроверитьРавенство(МассивДанных.Количество(), ТестовыеДанные.Количество(), "МассивДанных.Количество(), ТестовыеДанные.Количество() НовыйМакет");
	юТест.ПроверитьРавенство(ТестовыеДанные[ИмяПеременной2].ПростойСправочник.Наименование, "Тестовое наименование");
	
	Количество2После = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ИерархическийСправочник", Отбор);
		юТест.ПроверитьРавенство(Количество2После, 1, "Количество2После");
КонецПроцедуры

Процедура ТестДолжен_ПолучитьМакетДляСозданияСправочникаСДвумяСтрокамиВТабличнойЧасти() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочникаСДвумяСтрокамиВТабличнойЧасти");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	НаименованиеПростогоЭлемента = "Тест";
	Отбор = Новый Структура("Наименование", "Тестовое наименование", Истина);
	
	МассивИмен = Новый Массив;
	описаниеЭлемента2 = СоздатьОписательЭлементаПоСсылке(ТестовыеДанные.СправочникСТабЧастью, МассивИмен);
	описаниеЭлемента2.Вставить("ВыгружатьКод", Ложь);
	ИмяПеременной2 = описаниеЭлемента2.ИмяПеременной;
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(описаниеЭлемента2);
		
	НовыйМакет = ЭтотОбъект.СоздатьМакетДляГенерацииДанных(массивДанных);
	
	тестовыеДанные.СправочникСТабЧастью.ПолучитьОбъект().Удалить();
		юТест.ПроверитьРавенство(0, юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("СправочникСТабЧастью", Отбор), "количество2 после удаления");
		
	ДобавитьТестовыеДанныхДляУдаления(ТестовыеДанные);
	
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(НовыйМакет);
	ДобавитьТестовыеДанныхДляУдаления(ТестовыеДанные);
		юТест.ПроверитьРавенство(МассивДанных.Количество(), ТестовыеДанные.Количество(), "МассивДанных.Количество(), ТестовыеДанные.Количество() НовыйМакет");
		юТест.ПроверитьРавенство(2, ТестовыеДанные[ИмяПеременной2].Состав.Количество(), "ТестовыеДанные[ИмяПеременной].Состав.Количество()");
	тч = ТестовыеДанные[ИмяПеременной2].Состав;
	строка0 = тч[0];
		юТест.ПроверитьРавенство(НаименованиеПростогоЭлемента, строка0.ПростойСправочник.Наименование, "строка0.ПростойСправочник.Наименование");
		юТест.ПроверитьРавенство(НаименованиеПростогоЭлемента+"1", строка0.ПростойСправочник2.Наименование, "строка0.ПростойСправочник2.Наименование");
		юТест.ПроверитьРавенство(Истина, строка0.РеквизитБулево, "строка0.РеквизитБулево");
	строка1 = тч[1];
		юТест.ПроверитьРавенство(НаименованиеПростогоЭлемента, строка1.ПростойСправочник.Наименование, "строка1.ПростойСправочник.Наименование");
		юТест.ПроверитьРавенство(НаименованиеПростогоЭлемента+"2", строка1.ПростойСправочник2.Наименование, "строка1.ПростойСправочник2.Наименование");
		юТест.ПроверитьРавенство(Ложь, строка1.РеквизитБулево, "строка1.РеквизитБулево");
	
	Количество2После = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("СправочникСТабЧастью", Отбор);
		юТест.ПроверитьРавенство(Количество2После, 1, "Количество2После");
КонецПроцедуры

Процедура ТестДолжен_ПолучитьМакетДляСозданияДокументаСДвумяСтрокамиВТабличнойЧасти() Экспорт
	Макет = ПолучитьМакет("СозданиеДокументаСДвумяСтрокамиВТабличнойЧасти");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	НаименованиеПростогоЭлемента = "Тест";
	Отбор = Новый Структура; //("ПростойСправочник", ТестовыеДанные.ПростойСправочник);
	
	МассивИмен = Новый Массив;
	описаниеЭлемента = СоздатьОписательЭлементаПоСсылке(ТестовыеДанные.Документ, МассивИмен);
	ИмяПеременной = описаниеЭлемента.ИмяПеременной;
	
	описаниеЭлемента_ПростойСправочник = СоздатьОписательЭлементаПоСсылке(ТестовыеДанные.ПростойСправочник, МассивИмен);
	описаниеЭлемента_ПростойСправочник.Вставить("ВыгружатьКод", Ложь);
	
	описаниеЭлемента_ПростойСправочник2 = СоздатьОписательЭлементаПоСсылке(ТестовыеДанные.ПростойСправочник22, МассивИмен);
	описаниеЭлемента_ПростойСправочник2.Вставить("ВыгружатьКод", Ложь);
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(описаниеЭлемента_ПростойСправочник);
	МассивДанных.Добавить(описаниеЭлемента_ПростойСправочник2);
	МассивДанных.Добавить(описаниеЭлемента);
		
	НовыйМакет = ЭтотОбъект.СоздатьМакетДляГенерацииДанных(массивДанных);
	
	НачалоПериода = '20140401'; //НачалоДня(ТекущаяДата());
	ОкончаниеПериода = КонецДня(НачалоПериода); //ТекущаяДата());
	тестовыеДанные.Документ.ПолучитьОбъект().Удалить();
		юТест.ПроверитьРавенство(0, юТест.ПолучитьКоличествоДокументовПоОтбору("Документ1", НачалоПериода, ОкончаниеПериода, Отбор), "количество2 после удаления");
		
	ДобавитьТестовыеДанныхДляУдаления(ТестовыеДанные);
	
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(НовыйМакет);
	ДобавитьТестовыеДанныхДляУдаления(ТестовыеДанные);

		юТест.ПроверитьРавенство(МассивДанных.Количество(), ТестовыеДанные.Количество(), "МассивДанных.Количество(), ТестовыеДанные.Количество() НовыйМакет");
		юТест.ПроверитьРавенство(НаименованиеПростогоЭлемента, ТестовыеДанные[ИмяПеременной].ПростойСправочник.Наименование, "ТестовыеДанные[ИмяПеременной].ПростойСправочник.Наименование");
		юТест.ПроверитьРавенство(2, ТестовыеДанные[ИмяПеременной].Состав.Количество(), "ТестовыеДанные[ИмяПеременной].Состав.Количество()");
	тч = ТестовыеДанные[ИмяПеременной].Состав;
	строка0 = тч[0];
		юТест.ПроверитьРавенство(НаименованиеПростогоЭлемента+"1", строка0.ПростойСправочник2.Наименование, "строка0.ПростойСправочник2.Наименование");
		юТест.ПроверитьРавенство(Ложь, строка0.РеквизитБулево, "строка0.РеквизитБулево");
		юТест.ПроверитьРавенство(150, строка0.РеквизитЧисло, "строка0.РеквизитБулево");
	строка1 = тч[1];
		юТест.ПроверитьРавенство(НаименованиеПростогоЭлемента+"2", строка1.ПростойСправочник2.Наименование, "строка1.ПростойСправочник2.Наименование");
		юТест.ПроверитьРавенство(Истина, строка1.РеквизитБулево, "строка1.РеквизитБулево");
		юТест.ПроверитьРавенство(0, строка1.РеквизитЧисло, "строка1.РеквизитБулево");
	
	Количество2После = юТест.ПолучитьКоличествоДокументовПоОтбору("Документ1", НачалоПериода, ОкончаниеПериода, Отбор);
		юТест.ПроверитьРавенство(1, Количество2После, "Количество2После");
КонецПроцедуры

Процедура ТестДолжен_ПолучитьМакетДляСозданияДвухЗаписейВРегистреСведений() Экспорт
	Макет = ПолучитьМакет("СозданиеДвухЗаписейВРегистреСведений");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	НаименованиеПростогоЭлемента = "Тест";
	Отбор = Новый Структура; //("ПростойСправочник", ТестовыеДанные.ПростойСправочник);
	
	Метаданное = "РегистрСведений";
	ВидМетаданного = "РегистрСведений1";
	НаборЗаписей = РегистрыСведений[ВидМетаданного].СоздатьНаборЗаписей();
	МетаданныеРС = НаборЗаписей.Метаданные();
	
	ИмяПеременнойЗаписиРС_1 = "ЗаписьРегистра1_1";
	РеквизитыЗаписи1 = Новый Структура("ПростойСправочник,ПростойСправочник2,РесурсЧисло,РесурсБулево");
	ЗаполнитьЗначенияСвойств(РеквизитыЗаписи1, ТестовыеДанные.ЗаписьРегистра1);
	//описаниеЗаписиРегистраСведений1 = Новый Структура("Метаданное,ИмяПеременной,Реквизиты", МетаданныеРС, ИмяПеременнойЗаписиРС_1, РеквизитыЗаписи1);
	описаниеЗаписиРегистраСведений1 = СоздатьОписательЭлемента();
	описаниеЗаписиРегистраСведений1.Вставить("Метаданное", МетаданныеРС);
	описаниеЗаписиРегистраСведений1.Вставить("ИмяПеременной", ИмяПеременнойЗаписиРС_1);
	описаниеЗаписиРегистраСведений1.Вставить("Реквизиты", РеквизитыЗаписи1);
	//МассивИмен = Новый Массив;
	//описаниеЗаписиРегистраСведений1 = СоздатьОписательЭлементаПоНаборуЗаписей(ТестовыеДанные.ЗаписьРегистра1, МассивИмен);
	//ИмяПеременнойЗаписиРС_1 = описаниеЗаписиРегистраСведений1.ИмяПеременной;
	
	ИмяПеременнойЗаписиРС_2 = "ЗаписьРегистра1_2";
	РеквизитыЗаписи2 = Новый Структура("ПростойСправочник,ПростойСправочник2,РесурсЧисло,РесурсБулево");
	ЗаполнитьЗначенияСвойств(РеквизитыЗаписи2, ТестовыеДанные.ЗаписьРегистра2);

	описаниеЗаписиРегистраСведений2 = СоздатьОписательЭлемента();
	описаниеЗаписиРегистраСведений2.Вставить("Метаданное", МетаданныеРС);
	описаниеЗаписиРегистраСведений2.Вставить("ИмяПеременной", ИмяПеременнойЗаписиРС_2);
	описаниеЗаписиРегистраСведений2.Вставить("Реквизиты", РеквизитыЗаписи2);
	//описаниеЗаписиРегистраСведений2 = СоздатьОписательЭлементаПоНаборуЗаписей(ТестовыеДанные.ЗаписьРегистра2, МассивИмен);
	//ИмяПеременнойЗаписиРС_2 = описаниеЗаписиРегистраСведений2.ИмяПеременной;
	
	МассивИмен = Новый Массив;
	описаниеЭлемента_ПростойСправочник = СоздатьОписательЭлементаПоСсылке(ТестовыеДанные.ПростойСправочник, МассивИмен);
	описаниеЭлемента_ПростойСправочник.Вставить("ВыгружатьКод", Ложь);
	описаниеЭлемента_ПростойСправочник.Вставить("ИмяПеременной", "ПростойСправочник");
	
	описаниеЭлемента_ПростойСправочник22 = СоздатьОписательЭлементаПоСсылке(ТестовыеДанные.ПростойСправочник22, МассивИмен);
	описаниеЭлемента_ПростойСправочник22.Вставить("ВыгружатьКод", Ложь);
	описаниеЭлемента_ПростойСправочник22.Вставить("ИмяПеременной", "ПростойСправочник22");
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(описаниеЭлемента_ПростойСправочник);
	МассивДанных.Добавить(описаниеЭлемента_ПростойСправочник22);
	МассивДанных.Добавить(описаниеЗаписиРегистраСведений1);
	МассивДанных.Добавить(описаниеЗаписиРегистраСведений2);
		
	НовыйМакет = ЭтотОбъект.СоздатьМакетДляГенерацииДанных(массивДанных);
	
	наборЗаписей = РегистрыСведений[ВидМетаданного].СоздатьНаборЗаписей();
	наборЗаписей.Записать();
		юТест.ПроверитьРавенство(0, юТест.ПолучитьКоличествоЭлементовРегистраПоОтбору(Метаданное, ВидМетаданного, Отбор), "количество2 после удаления");
		
	ПростойСправочник21_ИмяПеременной = "ПростойСправочник21";
	ПростойСправочник21 = ТестовыеДанные[ПростойСправочник21_ИмяПеременной];
	Отбор_ПростойСправочник21 = Новый Структура("Ссылка", ПростойСправочник21);
	Отбор_ПростойСправочник21_Наименование = Новый Структура("Наименование", ПростойСправочник21.Наименование);
		юТест.ПроверитьРавенство(НаименованиеПростогоЭлемента + "1", ПростойСправочник21.Наименование);
	
	//ДобавитьТестовыеДанныхДляУдаления(ТестовыеДанные);
	тестовыеДанные.Удалить(ПростойСправочник21_ИмяПеременной);
	юТест.УдалитьСозданныеДанные(тестовыеДанные);
	
		юТест.ПроверитьРавенство(1, юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник2", Отбор_ПростойСправочник21), "количество Отбор_ПростойСправочник21 после удаления");
		юТест.ПроверитьРавенство(1, юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник2", Отбор_ПростойСправочник21_Наименование), "количество Отбор_ПростойСправочник21_Наименование после удаления");

	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(НовыйМакет);
	ДобавитьТестовыеДанныхДляУдаления(ТестовыеДанные);

		юТест.ПроверитьРавенство(2, юТест.ПолучитьКоличествоЭлементовРегистраПоОтбору(Метаданное, ВидМетаданного, Отбор), "количество после добавления");
	
		юТест.ПроверитьРавенство(МассивДанных.Количество(), ТестовыеДанные.Количество(), "МассивДанных.Количество(), ТестовыеДанные.Количество() НовыйМакет");
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство(ИмяПеременнойЗаписиРС_1), "Ожидали, что есть переменная '"+ИмяПеременнойЗаписиРС_1+"'");
	менеджерЗаписи1 = ТестовыеДанные[ИмяПеременнойЗаписиРС_1];
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, менеджерЗаписи1.ПростойСправочник);
	юТест.ПроверитьРавенство(ПростойСправочник21, менеджерЗаписи1.ПростойСправочник2);
	юТест.ПроверитьРавенство(300, менеджерЗаписи1.РесурсЧисло);
	юТест.ПроверитьЛожь(менеджерЗаписи1.РесурсБулево);
	
	юТест.ПроверитьИстину(ТестовыеДанные.Свойство(ИмяПеременнойЗаписиРС_2), "Ожидали, что есть переменная '"+ИмяПеременнойЗаписиРС_2+"'");
	менеджерЗаписи2 = ТестовыеДанные[ИмяПеременнойЗаписиРС_2];
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник, менеджерЗаписи2.ПростойСправочник);
	юТест.ПроверитьРавенство(ТестовыеДанные.ПростойСправочник22, менеджерЗаписи2.ПростойСправочник2);
	юТест.ПроверитьРавенство(400, менеджерЗаписи2.РесурсЧисло);
	юТест.ПроверитьИстину(менеджерЗаписи2.РесурсБулево);
		
КонецПроцедуры

Процедура ТестДолжен_ПолучитьМакетДляСозданияПодчиненногоСправочника() Экспорт
	Макет = ПолучитьМакет("СозданиеПодчиненногоСправочника");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
		
	Отбор = Новый Структура("Наименование,Владелец", "Подчиненный элемент", Справочники.ПростойСправочник.ПредопределенноеЗначение1);
	
	КоличествоДо = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПодчиненныйСправочник", Отбор);
		юТест.ПроверитьРавенство(1, количествоДо, "количествоДо");
		
	МассивИмен = Новый Массив;
	описаниеЭлемента = СоздатьОписательЭлементаПоСсылке(ТестовыеДанные.ПодчиненныйЭлемент, МассивИмен);
	ИмяПеременной = описаниеЭлемента.ИмяПеременной;
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(описаниеЭлемента);
		
	НовыйМакет = ЭтотОбъект.СоздатьМакетДляГенерацииДанных(массивДанных);
	
	юТест.УдалитьСозданныеДанные(тестовыеДанные);
		юТест.ПроверитьРавенство(0, юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПодчиненныйСправочник", Отбор), "количество после удаления");
	
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(НовыйМакет);
	ДобавитьТестовыеДанныхДляУдаления(ТестовыеДанные);
	
		юТест.ПроверитьИстину(ТестовыеДанные.Свойство(ИмяПеременной), "Ожидали, что есть переменная '"+ИмяПеременной+"'");
		юТест.ПроверитьТип(ТестовыеДанные[ИмяПеременной], "СправочникСсылка.ПодчиненныйСправочник");
	
	КоличествоПосле = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПодчиненныйСправочник", Отбор);
		юТест.ПроверитьРавенство(1, КоличествоПосле, "КоличествоПосле");
КонецПроцедуры

Процедура ТестДолжен_ПолучитьМакетДляСозданияИерархическогоСправочника() Экспорт
	Макет = ПолучитьМакет("СозданиеСправочникаВГруппе");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
		
	Отбор = Новый Структура("Наименование,Родитель", "Элемент в группе", Справочники.ИерархическийСправочник.Группа1);
	
	КоличествоДо = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ИерархическийСправочник", Отбор);
		юТест.ПроверитьРавенство(1, количествоДо, "количествоДо");
		
	МассивИмен = Новый Массив;
	описаниеЭлемента = СоздатьОписательЭлементаПоСсылке(ТестовыеДанные.ЭлементВГруппе, МассивИмен);
	ИмяПеременной = описаниеЭлемента.ИмяПеременной;
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(описаниеЭлемента);
		
	НовыйМакет = ЭтотОбъект.СоздатьМакетДляГенерацииДанных(массивДанных);
	
	юТест.УдалитьСозданныеДанные(тестовыеДанные);
		юТест.ПроверитьРавенство(0, юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ИерархическийСправочник", Отбор), "количество после удаления");
	
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(НовыйМакет);
	ДобавитьТестовыеДанныхДляУдаления(ТестовыеДанные);
	
		юТест.ПроверитьИстину(ТестовыеДанные.Свойство(ИмяПеременной), "Ожидали, что есть переменная '"+ИмяПеременной+"'");
		юТест.ПроверитьТип(ТестовыеДанные[ИмяПеременной], "СправочникСсылка.ИерархическийСправочник");
	
	КоличествоПосле = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ИерархическийСправочник", Отбор);
		юТест.ПроверитьРавенство(1, КоличествоПосле, "КоличествоПосле");
КонецПроцедуры

Процедура ТестДолжен_ПолучитьМакетДляСозданияПростогоСправочникаНаБазеЗапроса() Экспорт
	Макет = ПолучитьМакет("СозданиеПростогоСправочника");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	//НаименованиеПростогоЭлемента = "Тест";
	////
	//Метаданное = "РегистрСведений";
	//ВидМетаданного = "РегистрСведений1";
	
	Отбор = Новый Структура("Наименование,РеквизитБулево", "Тестовое наименование", Истина);
	
	КоличествоДо = юТест.ПолучитьКоличествоЭлементовСправочникаПоОтбору("ПростойСправочник", Отбор);
		юТест.ПроверитьРавенство(1, количествоДо, "количествоДо");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	"""" КАК __Метаданные,
		|	""ПростойСправочник"" КАК __Префикс,
		|	ПростойСправочник.Ссылка,
		|	ПростойСправочник.Код,
		|	ПростойСправочник.Наименование,
		|	ПростойСправочник.РеквизитБулево,
		|	ПростойСправочник.РеквизитПеречисление
		|ИЗ
		|	Справочник.ПростойСправочник КАК ПростойСправочник
		|Где РеквизитБулево И ПростойСправочник.Наименование = ""Тестовое наименование"" ";

	РезультатЗапроса = Запрос.Выполнить();
	МакетРез = ЭтотОбъект.СоздатьМакетДанныхНаОснованииЗапроса(РезультатЗапроса);
	
	МакетИсх = ПолучитьМакет("ЭталонМакетаПростогоСправочника");
	ФайлИсх = ПолучитьИмяВременногоФайла("txt");
	МакетИсх.Записать(ФайлИсх, ТипФайлаТабличногоДокумента.ANSITXT); // сохраняю в текст для отключения сравнения форматирования
	ФайлРез = ПолучитьИмяВременногоФайла("txt");
	МакетРез.Записать(ФайлРез, ТипФайлаТабличногоДокумента.ANSITXT);
	
	ЮТест.ПроверитьРавенствоФайлов(ФайлИсх, ФайлРез, "ФайлИсх, ФайлРез", Неопределено, Истина);
КонецПроцедуры

Процедура ТестДолжен_ПолучитьМакетДляСоздания2ЗаписейРегистраСведенийНаБазеЗапроса() Экспорт
	Метаданное = "РегистрСведений";
	ВидМетаданного = "РегистрСведений1";
	Отбор = Новый Структура; //("ПростойСправочник", ТестовыеДанные.ПростойСправочник);
	
	наборЗаписей = РегистрыСведений[ВидМетаданного].СоздатьНаборЗаписей();
	наборЗаписей.Записать();
		юТест.ПроверитьРавенство(0, юТест.ПолучитьКоличествоЭлементовРегистраПоОтбору(Метаданное, ВидМетаданного, Отбор), "количество2 после удаления");
		
	Макет = ПолучитьМакет("СозданиеДвухЗаписейВРегистреСведений");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	НаименованиеПростогоЭлемента = "Тест";
	//
	
	юТест.ПроверитьРавенство(2, юТест.ПолучитьКоличествоЭлементовРегистраПоОтбору(Метаданное, ВидМетаданного, Отбор), "количество после добавления");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	""РегистрыСведений.РегистрСведений1.СоздатьНаборЗаписей().Метаданные()"" КАК __Метаданные,
		|	""ЗаписьРегистра"" КАК __Префикс,
		|	РегистрСведений1.ПростойСправочник,
		|	РегистрСведений1.ПростойСправочник2 КАК ПростойСправочник2,
		|	РегистрСведений1.РесурсЧисло,
		|	РегистрСведений1.РесурсБулево
		|ИЗ
		|	РегистрСведений.РегистрСведений1 КАК РегистрСведений1
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПростойСправочник2";

	РезультатЗапроса = Запрос.Выполнить();
	МакетРез = ЭтотОбъект.СоздатьМакетДанныхНаОснованииЗапроса(РезультатЗапроса);
	
	МакетИсх = ПолучитьМакет("ЭталонМакетаДвухЗаписейВРегистреСведений");
	ФайлИсх = ПолучитьИмяВременногоФайла("txt");
	МакетИсх.Записать(ФайлИсх, ТипФайлаТабличногоДокумента.ANSITXT); // сохраняю в текст для отключения сравнения форматирования
	ФайлРез = ПолучитьИмяВременногоФайла("txt");
	МакетРез.Записать(ФайлРез, ТипФайлаТабличногоДокумента.ANSITXT);
	
	ЮТест.ПроверитьРавенствоФайлов(ФайлИсх, ФайлРез, "ФайлИсх, ФайлРез", Неопределено, Истина);
КонецПроцедуры

Процедура ТестДолжен_ПолучитьМакетДляСозданияДвухЗаписейРегистраНакопления() Экспорт
	Метаданное = "РегистрНакопления";
	ВидМетаданного = "РегистрНакопления2";
	
	Отбор = Новый Структура;
	КоличествоДо = юТест.ПолучитьКоличествоЭлементовРегистраПоОтбору(Метаданное, ВидМетаданного, Отбор);
	
	Макет = ПолучитьМакет("СозданиеДвухЗаписейРегистраНакопления");
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	МассивИмен = Новый Массив;
	ОписательЭлементаНаборЗаписей = СоздатьОписательЭлементаПоНаборуЗаписей(ТестовыеДанные.ЗаписьРегистра2, МассивИмен);
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(ОписательЭлементаНаборЗаписей);
		
	НовыйМакет = ЭтотОбъект.СоздатьМакетДляГенерацииДанных(массивДанных);
	//НовыйМакет.Показать();
	
	наборЗаписей = РегистрыНакопления[ВидМетаданного].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ТестовыеДанные.Документ);
	наборЗаписей.Записать();
		юТест.ПроверитьРавенство(КоличествоДо, юТест.ПолучитьКоличествоЭлементовРегистраПоОтбору(Метаданное, ВидМетаданного, Отбор), "КоличествоДо, количество2 после удаления");
		
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(НовыйМакет);
	ДобавитьТестовыеДанныхДляУдаления(ТестовыеДанные);

		юТест.ПроверитьРавенство(КоличествоДо + 2, юТест.ПолучитьКоличествоЭлементовРегистраПоОтбору(Метаданное, ВидМетаданного, Отбор), "количество после добавления");
КонецПроцедуры

//} КОНЕЦ БЛОКА ЮНИТ-ТЕСТОВ


Процедура ПриИзмененииСсылки(ИдентификаторСтрокиДанных) Экспорт
	Перем Ссылка;
	ЭлементДанных = ИдентификаторСтрокиДанных;
	НовыйМассивИмен = ТаблицаДанных.ВыгрузитьКолонку("ИмяПеременной");
	
	Ссылка = ЭлементДанных.Ссылка;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ОписательЭлемента = СоздатьОписательЭлементаПоСсылке(Ссылка, НовыйМассивИмен);
		ЗаполнитьЗначенияСвойств(ЭлементДанных, ОписательЭлемента);
		//	ЭлементДанных.ИмяПеременной = УникальноеИмяПеременнойПоСсылке(Ссылка, НовыйМассивИмен);
		//	
		//	Мета = Ссылка.Метаданные();
		//	ЭлементДанных.Метаданное = Мета.ПолноеИмя();
		//	ЭлементДанных.РежимПоиска = "Перем";
		//	Если Метаданные.Справочники.Содержит(Мета) И Ссылка.ЭтоГруппа Тогда
		//		ЭлементДанных.РежимСоздания = "Группа";
		//	Иначе
		//		ЭлементДанных.РежимСоздания = "";
		//	КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СоздатьМакетДанныхПоТаблицеДанных(Макет) Экспорт
	Макет.Очистить();
	
	массивДанных = Новый Массив;
	
	Для каждого строка Из ТаблицаДанных Цикл
		ОписательЭлемента = СоздатьОписательЭлемента();
		ЗаполнитьЗначенияСвойств(ОписательЭлемента, строка);
		массивДанных.Добавить(ОписательЭлемента);
	КонецЦикла;
	НовыйМакет = СоздатьМакетДляГенерацииДанных(массивДанных);
	Если ТипЗнч(НовыйМакет) = Тип("ТабличныйДокумент") Тогда
		Макет.Вывести(НовыйМакет);
	КонецЕсли;
	
	Возврат НовыйМакет;
КонецФункции

Функция СоздатьМакетДанныхПоМетаданным(Макет) Экспорт
	Макет.Очистить();
	
	массивДанных = Новый Массив;
	МассивИмен = ТаблицаДанных.ВыгрузитьКолонку("ИмяПеременной");	
	
	СоздатьПоМетаданным(массивДанных);
	
	НовыйМакет = СоздатьМакетДляГенерацииДанных(массивДанных);
	Если ТипЗнч(НовыйМакет) = Тип("ТабличныйДокумент") Тогда
		Макет.Вывести(НовыйМакет);
	КонецЕсли;
	
	МассивИмен = Неопределено;
	
	Возврат НовыйМакет;
КонецФункции

Функция ПолучитьКаталогОбработки() Экспорт
	
	Если Не ЭтоВстроеннаяОбработка Тогда
		ИмяФайла = "";
		Выполнить("ИмяФайла = ИспользуемоеИмяФайла");
		Файл = Новый Файл(ИмяФайла);
		Возврат Файл.Путь;
	КонецЕсли;
	ВызватьИсключение "В режиме встроенной обработки xddTestRunner нельзя использовать метод Объект.ПолучитьКаталогОбработки()";
КонецФункции

Процедура ПроверитьЗагрузкуМакета(ИдОбработки_юТест, ТабличныйДокумент, ЕстьВстроеннаяОбработка_юТест = Ложь) Экспорт
	НачатьТранзакцию();
	
	Если ЕстьВстроеннаяОбработка_юТест Тогда
		юТест = Обработки[ИмяЗапускателяТестов()].Создать();
	Иначе
		юТест = ВнешниеОбработки.Создать(ИдОбработки_юТест);
	КонецЕсли;
	
	ТестовыеДанные = юТест.СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент);
		юТест.ПроверитьНеРавенство(0, ТестовыеДанные.Количество(), "не заполнены тестовые данные. Возможно, макет данных пуст!" );
		
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	Сообщить("Проверка загрузки объектов в ИБ из макета данных выполнена успешно.");
КонецПроцедуры

Функция ПодключитьВнешнююОбработку(АдресХранилища, ИдентификаторОбработки, ПолныйПутьФайлаОбработки) Экспорт
	#Если Клиент Тогда
	Возврат ПолныйПутьФайлаОбработки;
	#Иначе
	Возврат ВнешниеОбработки.Подключить(АдресХранилища, ИдентификаторОбработки, Ложь); // подключаю не в безопасном режиме
	#КонецЕсли
КонецФункции

Функция СписокВыбора_РежимПоиска(СписокВыбора_РежимПоиска) Экспорт
	СписокВыбора_РежимПоиска.Добавить("Перем");
	СписокВыбора_РежимПоиска.Добавить("Наименование");
	СписокВыбора_РежимПоиска.Добавить("Код");
	//СписокВыбора_РежимПоиска.Добавить("Группа");
	//СписокВыбора_РежимПоиска.Добавить("Объект");
	СписокВыбора_РежимПоиска.Добавить("Гуид");
	СписокВыбора_РежимПоиска.Добавить("Предопределенный");
	СписокВыбора_РежимПоиска.Добавить("ТекущаяДата");
	//СписокВыбора_РежимПоиска.Добавить("Проведение");
	СписокВыбора_РежимПоиска.Добавить("СоздатьПоГуид");
	Возврат	СписокВыбора_РежимПоиска;
КонецФункции

Функция СписокВыбора_РежимСоздания(СписокВыбора_РежимСоздания) Экспорт
	//СписокВыбора_РежимПоиска.Добавить("Перем");
	//СписокВыбора_РежимПоиска.Добавить("Наименование");
	//СписокВыбора_РежимПоиска.Добавить("Код");
	СписокВыбора_РежимСоздания.Добавить("Группа");
	СписокВыбора_РежимСоздания.Добавить("Объект");
	//СписокВыбора_РежимПоиска.Добавить("Гуид");
	//СписокВыбора_РежимПоиска.Добавить("Предопределенный");
	//СписокВыбора_РежимПоиска.Добавить("ТекущаяДата");
	СписокВыбора_РежимСоздания.Добавить("Проведение");
	//СписокВыбора_РежимСоздания.Добавить("СоздатьПоГуид");
	Возврат	СписокВыбора_РежимСоздания;
КонецФункции

Функция ИмяЗапускателяТестов() Экспорт
	Возврат "xddTestRunner";
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Генерация по метаданным
///////////////////////////////////////////////////////////////////////////////

// Процедура производит начальную инициализацию - заполнение дерева описания
// классов объектов метаданных, дерево метаданных, список ссылочных типов
//
// Параметры
//
Процедура Инициализация() Экспорт
	
	// Создаем объект, описывающий процессы построения дерева и выгрузку
	ЗаполнитьОписаниеМетаданных();
	
	МетаданныеОписание = МетаданныеОписание.Строки[0];
	
	СсылочныеТипы = Новый Соответствие;
	СоответствиеОбъектовМетаданныхИСсылочныхТипов = Новый Соответствие;
	
	ДеревоМетаданных.Колонки.Очистить();
	// создание необходимых колонок
	ДеревоМетаданных.Колонки.Добавить("Выгружать", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ДеревоМетаданных.Колонки.Добавить("ВыгружатьПриНеобходимости", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)), "При необходимости");
	ДеревоМетаданных.Колонки.Добавить("Метаданные");
	ДеревоМетаданных.Колонки.Добавить("ЭлементОписания");
	ДеревоМетаданных.Колонки.Добавить("ОбъектМД");
	ДеревоМетаданных.Колонки.Добавить("ПолноеИмяМетаданных");
	ДеревоМетаданных.Колонки.Добавить("НастройкиКомпоновщика");
	ДеревоМетаданных.Колонки.Добавить("ИспользоватьОтбор");
	ДеревоМетаданных.Колонки.Добавить("ИндексКартинки");
	ДеревоМетаданных.Колонки.Добавить("Развернут");
	ДеревоМетаданных.Колонки.Добавить("ПолноеИмяМетаданныхДляПоиска");
	
	//ОкноИсполнения = ПолучитьФорму("ОкноИсполнения");
	#Если Клиент Тогда
		Состояние("Выполняется анализ метаданных конфигурации...");
	#КонецЕсли
	
	//ИспользующиеИтоги = Новый Массив;
	Корень = ДеревоМетаданных.Строки.Добавить();
	ПостроениеПоддереваОбъекта(Метаданные, Корень, МетаданныеОписание);
	СверткаПоддереваОбъекта(Корень);
	
	Для Каждого Эл Из СсылочныеТипы Цикл
		СоответствиеОбъектовМетаданныхИСсылочныхТипов.Вставить(Эл.Значение, Эл.Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Процедура производит заполнение дерева описания классов объектов метаданных
//
// Параметры
//
Процедура ЗаполнитьОписаниеМетаданных()
	
	СтэкДереваЗначенийСтроки = Новый Массив;
	МетаданныеОписание = Новый ДеревоЗначений;
	МетаданныеОписание.Колонки.Добавить("Выгружаемый", Новый ОписаниеТипов("Булево"));
	МетаданныеОписание.Колонки.Добавить("ДляЗапроса", Новый ОписаниеТипов("Строка"));
	МетаданныеОписание.Колонки.Добавить("Класс", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	МетаданныеОписание.Колонки.Добавить("Менеджер");
	МетаданныеОписание.Колонки.Добавить("Свойства", Новый ОписаниеТипов("СписокЗначений"));
	МетаданныеОписание.Колонки.Добавить("ИндексКартинки");
	СтэкДереваЗначенийСтроки.Вставить(0, МетаданныеОписание.Строки);
	//////////////////////////////////
	// Конфигурации
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Конфигурации";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.ИндексКартинки = 0;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Константы
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Константы";
	//ОписаниеКласса.Выгружаемый = истина;
	//ОписаниеКласса.Менеджер = Константы;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.ИндексКартинки = 1;
	//ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.Справочники
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Справочники";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = Справочники;
	ОписаниеКласса.ДляЗапроса  = "Справочник.";
	ОписаниеКласса.Свойства.Добавить("Владельцы");
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.ИндексКартинки = 3;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Справочники.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("Использование");
	//////////////////////////////////
	// Конфигурации.Справочники.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Использование");
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Справочники.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	//////////////////////////////////
	// Конфигурации.Документы
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Документы";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = Документы;
	ОписаниеКласса.ДляЗапроса  = "Документ.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.Свойства.Добавить("Движения");
	ОписаниеКласса.ИндексКартинки = 7;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Документы.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.Документы.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Документы.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	//////////////////////////////////
	// Конфигурации.Последовательности
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Последовательности";
	//ОписаниеКласса.Выгружаемый = истина;
	//ОписаниеКласса.Менеджер = Последовательности;
	//ОписаниеКласса.ДляЗапроса  = "Последовательность.";
	//ОписаниеКласса.Свойства.Добавить("Документы");
	//ОписаниеКласса.Свойства.Добавить("Движения");
	//ОписаниеКласса.ИндексКартинки = 5;
	//СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	////////////////////////////////////
	//// Конфигурации.Последовательности.Измерения
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Измерения";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	//ОписаниеКласса.Свойства.Добавить("СоответствиеДокументам");
	//ОписаниеКласса.Свойства.Добавить("СоответствиеДвижениям");
	//СтэкДереваЗначенийСтроки.Удалить(0);
	////////////////////////////////////
	//// Конфигурации.ПланыВидовХарактеристик
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "ПланыВидовХарактеристик";
	//ОписаниеКласса.Выгружаемый = истина;
	//ОписаниеКласса.Менеджер = ПланыВидовХарактеристик;
	//ОписаниеКласса.ДляЗапроса  = "ПланВидовХарактеристик.";
	//ОписаниеКласса.Свойства.Добавить("ДополнительныеЗначенияХарактеристик");
	//ОписаниеКласса.Свойства.Добавить("Тип");
	//ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	//ОписаниеКласса.ИндексКартинки = 9;
	//СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	////////////////////////////////////
	//// Конфигурации.ПланыВидовХарактеристик.Реквизиты
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Реквизиты";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	//ОписаниеКласса.Свойства.Добавить("Использование");
	////////////////////////////////////
	//// Конфигурации.ПланыВидовХарактеристик.ТабличныеЧасти
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "ТабличныеЧасти";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Использование");
	//СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	////////////////////////////////////
	//// Конфигурации.ПланыВидовХарактеристик.ТабличныеЧасти.Реквизиты
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Реквизиты";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	//СтэкДереваЗначенийСтроки.Удалить(0);
	//СтэкДереваЗначенийСтроки.Удалить(0);
	////////////////////////////////////
	//// Конфигурации.ПланыСчетов
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "ПланыСчетов";
	//ОписаниеКласса.Выгружаемый = истина;
	//ОписаниеКласса.Менеджер = ПланыСчетов;
	//ОписаниеКласса.ДляЗапроса  = "ПланСчетов.";
	//ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	//ОписаниеКласса.Свойства.Добавить("ВидыСубконто");
	//ОписаниеКласса.ИндексКартинки = 11;
	//СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	////////////////////////////////////
	//// Конфигурации.ПланыСчетов.Реквизиты
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Реквизиты";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	////////////////////////////////////
	//// Конфигурации.ПланыСчетов.ТабличныеЧасти
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "ТабличныеЧасти";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	////////////////////////////////////
	//// Конфигурации.ПланыСчетов.ТабличныеЧасти.Реквизиты
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Реквизиты";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	//СтэкДереваЗначенийСтроки.Удалить(0);
	//СтэкДереваЗначенийСтроки.Удалить(0);
	////////////////////////////////////
	//// Конфигурации.ПланыВидовРасчета
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "ПланыВидовРасчета";
	//ОписаниеКласса.Выгружаемый = истина;
	//ОписаниеКласса.Менеджер = ПланыВидовРасчета;
	//ОписаниеКласса.ДляЗапроса  = "ПланВидовРасчета.";
	//ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	//ОписаниеКласса.Свойства.Добавить("ЗависимостьОтВидовРасчета");
	//ОписаниеКласса.Свойства.Добавить("БазовыеВидыРасчета");
	//ОписаниеКласса.Свойства.Добавить("ИспользованиеПериодаДействия");
	//ОписаниеКласса.ИндексКартинки = 13;
	//СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	////////////////////////////////////
	//// Конфигурации.ПланыВидовРасчета.Реквизиты
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Реквизиты";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	////////////////////////////////////
	//// Конфигурации.ПланыВидовРасчета.ТабличныеЧасти
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "ТабличныеЧасти";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	////////////////////////////////////
	//// Конфигурации.ПланыВидовРасчета.ТабличныеЧасти.Реквизиты
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Реквизиты";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	//СтэкДереваЗначенийСтроки.Удалить(0);
	//СтэкДереваЗначенийСтроки.Удалить(0);
	//////////////////////////////////
	// Конфигурации.РегистрыСведений
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "РегистрыСведений";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = РегистрыСведений;
	ОписаниеКласса.ДляЗапроса  = "РегистрСведений.";
	ОписаниеКласса.ИндексКартинки = 15;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.РегистрыСведений.Ресурсы
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Ресурсы";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.РегистрыСведений.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.РегистрыСведений.Измерения
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Измерения";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	//////////////////////////////////
	// Конфигурации.РегистрыНакопления
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "РегистрыНакопления";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = РегистрыНакопления;
	ОписаниеКласса.ДляЗапроса  = "РегистрНакопления.";
	ОписаниеКласса.ИндексКартинки = 17;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.РегистрыНакопления.Ресурсы
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Ресурсы";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.РегистрыНакопления.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.РегистрыНакопления.Измерения
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Измерения";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	////////////////////////////////////
	//// Конфигурации.РегистрыБухгалтерии
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "РегистрыБухгалтерии";
	//ОписаниеКласса.Выгружаемый = истина;
	//ОписаниеКласса.Менеджер = РегистрыБухгалтерии;
	//ОписаниеКласса.ДляЗапроса  = "РегистрБухгалтерии.";
	//ОписаниеКласса.Свойства.Добавить("ПланСчетов");
	//ОписаниеКласса.Свойства.Добавить("Корреспонденция");
	//ОписаниеКласса.ИндексКартинки = 19;
	//СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	////////////////////////////////////
	//// Конфигурации.РегистрыБухгалтерии.Измерения
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Измерения";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	////////////////////////////////////
	//// Конфигурации.РегистрыБухгалтерии.Ресурсы
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Ресурсы";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	////////////////////////////////////
	//// Конфигурации.РегистрыБухгалтерии.Реквизиты
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Реквизиты";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	//СтэкДереваЗначенийСтроки.Удалить(0);
	////////////////////////////////////
	//// Конфигурации.РегистрыРасчета
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "РегистрыРасчета";
	//ОписаниеКласса.Выгружаемый = истина;
	//ОписаниеКласса.Менеджер = РегистрыРасчета;
	//ОписаниеКласса.ДляЗапроса  = "РегистрРасчета.";
	//ОписаниеКласса.Свойства.Добавить("Периодичность");
	//ОписаниеКласса.Свойства.Добавить("ПериодДействия");
	//ОписаниеКласса.Свойства.Добавить("БазовыйПериод");
	//ОписаниеКласса.Свойства.Добавить("График");
	//ОписаниеКласса.Свойства.Добавить("ЗначениеГрафика");
	//ОписаниеКласса.Свойства.Добавить("ДатаГрафика");
	//ОписаниеКласса.Свойства.Добавить("ПланВидовРасчета");
	//ОписаниеКласса.ИндексКартинки = 21;
	//СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	////////////////////////////////////
	//// Конфигурации.РегистрыРасчета.Ресурсы
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Ресурсы";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	////////////////////////////////////
	//// Конфигурации.РегистрыРасчета.Реквизиты
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Реквизиты";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	//ОписаниеКласса.Свойства.Добавить("СвязьСГрафиком");
	////////////////////////////////////
	//// Конфигурации.РегистрыРасчета.Измерения
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Измерения";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	//ОписаниеКласса.Свойства.Добавить("БазовоеИзмерение");
	//ОписаниеКласса.Свойства.Добавить("СвязьСГрафиком");
	//////////////////////////////////
	// Конфигурации.РегистрыРасчета.Перерасчеты
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Перерасчеты";
	//ОписаниеКласса.Выгружаемый = истина;
	//ОписаниеКласса.Менеджер  = "РегистрыРасчета.%i.Перерасчеты";
	//ОписаниеКласса.ДляЗапроса  = "РегистрРасчета.%i.";
	//СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.РегистрыРасчета.Перерасчеты.Измерения
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Измерения";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.Свойства.Добавить("ДанныеВедущихРегистров");
	//ОписаниеКласса.Свойства.Добавить("ИзмерениеРегистра");
	//СтэкДереваЗначенийСтроки.Удалить(0);
	//СтэкДереваЗначенийСтроки.Удалить(0);
	//////////////////////////////////
	// Конфигурации.БизнесПроцессы
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "БизнесПроцессы";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = БизнесПроцессы;
	ОписаниеКласса.ДляЗапроса  = "БизнесПроцесс.";
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.Свойства.Добавить("Задача");
	ОписаниеКласса.ИндексКартинки = 23;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.БизнесПроцессы.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.БизнесПроцессы.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.БизнесПроцессы.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	//////////////////////////////////
	// Конфигурации.Задачи
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Задачи";
	ОписаниеКласса.Выгружаемый = истина;
	ОписаниеКласса.Менеджер = Задачи;
	ОписаниеКласса.ДляЗапроса  = "Задача.";
	ОписаниеКласса.Свойства.Добавить("Адресация");
	ОписаниеКласса.Свойства.Добавить("ОсновнойРеквизитАдресации");
	ОписаниеКласса.Свойства.Добавить("ТекущийИсполнитель");
	ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	ОписаниеКласса.ИндексКартинки = 25;
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Задачи.РеквизитыАдресации
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "РеквизитыАдресации";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	ОписаниеКласса.Свойства.Добавить("ИзмерениеАдресации");
	//////////////////////////////////
	// Конфигурации.Задачи.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	//////////////////////////////////
	// Конфигурации.Задачи.ТабличныеЧасти
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "ТабличныеЧасти";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	//////////////////////////////////
	// Конфигурации.Задачи.ТабличныеЧасти.Реквизиты
	ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	ОписаниеКласса.Класс = "Реквизиты";
	ОписаниеКласса.Выгружаемый = ложь;
	ОписаниеКласса.ДляЗапроса  = "";
	ОписаниеКласса.Свойства.Добавить("Тип");
	СтэкДереваЗначенийСтроки.Удалить(0);
	СтэкДереваЗначенийСтроки.Удалить(0);
	
	////////////////////////////////////
	//// Конфигурации.ПланыОбмена
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "ПланыОбмена";
	//ОписаниеКласса.Выгружаемый = истина;
	//ОписаниеКласса.Менеджер = ПланыОбмена;
	//ОписаниеКласса.ДляЗапроса  = "ПланОбмена.";
	//ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
	//ОписаниеКласса.ИндексКартинки = 27;
	//СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	////////////////////////////////////
	//// Конфигурации.ПланыОбмена.Реквизиты
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Реквизиты";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	////////////////////////////////////
	//// Конфигурации.ПланыОбмена.ТабличныеЧасти
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "ТабличныеЧасти";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
	////////////////////////////////////
	//// Конфигурации.ПланыОбмена.ТабличныеЧасти.Реквизиты
	//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
	//ОписаниеКласса.Класс = "Реквизиты";
	//ОписаниеКласса.Выгружаемый = ложь;
	//ОписаниеКласса.ДляЗапроса  = "";
	//ОписаниеКласса.Свойства.Добавить("Тип");
	//СтэкДереваЗначенийСтроки.Удалить(0);
	//СтэкДереваЗначенийСтроки.Удалить(0);
	//
	СтэкДереваЗначенийСтроки.Удалить(0);
	
КонецПроцедуры

// Процедура заполняет строку дерева метаданных, попутно заполняя соответствие ссылочных типов объектам метаданных
//
// Параметры
//   ОбъектМД - описание объекта метаданных
//   ЭлементДЗ - заполняемая строка дерева метаданных
//   ЭлементОписания - описание класса, к которому принадлежит объект метаданных (свойства, подчиненные классы)
//
Процедура ПостроениеПоддереваОбъекта(ОбъектМД, ЭлементДЗ, ЭлементОписания)
	
	ЭлементДЗ.Метаданные = ОбъектМД;
	ЭлементДЗ.ОбъектМД   = ОбъектМД;
	ЭлементДЗ.ПолноеИмяМетаданных = ОбъектМД.Имя;
	ЭлементДЗ.ЭлементОписания = ЭлементОписания;
	ЭлементДЗ.Выгружать = Ложь;
	ЭлементДЗ.ВыгружатьПриНеобходимости = Истина;
	ЭлементДЗ.ИндексКартинки = ЭлементОписания.ИндексКартинки;
	
	Если ЭлементОписания.Менеджер <> Неопределено Тогда
		
		// заполнение соответствия ссылочных типов объектам метаданных
		Если ОбъектОбразуетСсылочныйТип(ОбъектМД) Тогда
			СсылочныеТипы[ТипЗнч(ЭлементОписания.Менеджер[ОбъектМД.Имя].ПустаяСсылка())] = ОбъектМД;
		КонецЕсли;
		
		//Если Метаданные.РегистрыНакопления.Содержит(ОбъектМД) 
		//	Или	Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД) Тогда
		//	
		//	ИспользующиеИтоги.Добавить(ЭлементДЗ);
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
	// подчиненные ветви
	Для Каждого ПодчиненныйКласс Из ЭлементОписания.Строки Цикл
		
		Если Не ПодчиненныйКласс.Выгружаемый Тогда
			Продолжить;
		КонецЕсли;
		
		ВеткаКласса = ЭлементДЗ.Строки.Добавить();
		ВеткаКласса.Метаданные = ПодчиненныйКласс.Класс;
		ВеткаКласса.Выгружать = Ложь;
		ВеткаКласса.ВыгружатьПриНеобходимости = Истина;
		ВеткаКласса.ПолноеИмяМетаданных = ПодчиненныйКласс.Класс;
		ВеткаКласса.ИндексКартинки = ПодчиненныйКласс.ИндексКартинки;
		
		ПодчиненныеОбъектыДанногоКласса = ОбъектМД[ПодчиненныйКласс.Класс];
		
		Для Каждого ПодчиненныйОбъектМД Из ПодчиненныеОбъектыДанногоКласса Цикл 
			
			//Если Метаданные.РегистрыСведений.Содержит(ПодчиненныйОбъектМД) Тогда
			//	Если ПодчиненныйОбъектМД.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			//		Продолжить;
			//	КонецЕсли;
			//КонецЕсли;
			
			ПодчиненныйЭлементДЗ = ВеткаКласса.Строки.Добавить();
			ПостроениеПоддереваОбъекта(ПодчиненныйОбъектМД, ПодчиненныйЭлементДЗ, ПодчиненныйКласс);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура удаляет из дерева метаданных строки, соответствующие метаданным, заведомо не попадающим в выгрузку
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных, подчиненные которой рассматриваются
//        с точки зрения удаления из списка потенциально выгружаемых
//
Процедура СверткаПоддереваОбъекта(ЭлементДЗ)
	
	УдаляемыеВеткиКлассов = Новый Массив;
	Для Каждого ВеткаКласса Из ЭлементДЗ.Строки Цикл
		
		УдаляемыеПодчиненныеМД = Новый Массив;
		
		Для Каждого ПодчиненныйОбъектМД Из ВеткаКласса.Строки Цикл
			СверткаПоддереваОбъекта(ПодчиненныйОбъектМД);
			Если (ПодчиненныйОбъектМД.Строки.Количество()) = 0 
				и (Не ПодчиненныйОбъектМД.ЭлементОписания.Выгружаемый) Тогда 
				
				УдаляемыеПодчиненныеМД.Добавить(ВеткаКласса.Строки.Индекс(ПодчиненныйОбъектМД));
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Сч = 1 По УдаляемыеПодчиненныеМД.Количество() Цикл
			ВеткаКласса.Строки.Удалить(УдаляемыеПодчиненныеМД[УдаляемыеПодчиненныеМД.Количество() - Сч]);
		КонецЦикла;
		
		Если ВеткаКласса.Строки.Количество() = 0 Тогда
			УдаляемыеВеткиКлассов.Добавить(ЭлементДЗ.Строки.Индекс(ВеткаКласса));
		КонецЕсли;
		
	КонецЦикла;
	
	Для Сч = 1 По УдаляемыеВеткиКлассов.Количество() Цикл
		ЭлементДЗ.Строки.Удалить(УдаляемыеВеткиКлассов[УдаляемыеВеткиКлассов.Количество() - Сч]);
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет имеет ли переданный объект метаданных ссылочный тип
//
// Возврат - Истина, если переданный объект метаданных имеет ссылочный тип, Ложь - противном случае
Функция ОбъектОбразуетСсылочныйТип(ОбъектМД) Экспорт
	
	Если ОбъектМД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(ОбъектМД)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыСчетов.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыВидовРасчета.Содержит(ОбъектМД)
		ИЛИ Метаданные.ПланыОбмена.Содержит(ОбъектМД)
		ИЛИ Метаданные.БизнесПроцессы.Содержит(ОбъектМД)
		ИЛИ Метаданные.Задачи.Содержит(ОбъектМД) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Процедура обрабатывает состояние признака Выгрузка, проставляя признаки Выгрузка и ВыгружатьПриНеобходимости
// связанным ветвям дерева
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура ОбработкаИзмененияСостоянияВыгружать(ЭлементДЗ) Экспорт
	Если ЭлементДЗ.Выгружать = 2 Тогда
		ЭлементДЗ.Выгружать = 0;
	КонецЕсли;
	// Изменяем состояние "вниз"
	УстановитьВыгружатьПодчиненным(ЭлементДЗ);
	// Изменяем состояние "вверх"
	ОбновитьСостояниеВыгружать(ЭлементДЗ.Родитель);
КонецПроцедуры

// Процедура обрабатывает состояние признака Выгрузка, проставляя признаки Выгрузка и ВыгружатьПриНеобходимости
// связанным ветвям дерева
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура ОбработкаИзмененияСостоянияВыгружатьПриНеобходимости(ЭлементДЗ) Экспорт
	
	Если ЭлементДЗ.ВыгружатьПриНеобходимости = 2 Тогда
		ЭлементДЗ.ВыгружатьПриНеобходимости = 0;
	КонецЕсли;
	
	// Изменяем состояние "вниз"
	УстановитьВыгружатьПриНеобходимостиПодчиненным(ЭлементДЗ);
	// Изменяем состояние "вверх"
	ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
	
КонецПроцедуры

// Процедура проставляет признак Выгрузка строкам дерева метаданных, подчиненных данной, вычисляет и 
//      выставляет признак выгрузки "по ссылке" другим объектам, ссылки на которые может или должен
//      содержать объект, соответствующий данной строке
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура УстановитьВыгружатьПодчиненным(ЭлементДЗ)
	Для Каждого ПодчиненнаяСтрока Из ЭлементДЗ.Строки Цикл
		ПодчиненнаяСтрока.Выгружать = ЭлементДЗ.Выгружать;
		УстановитьВыгружатьПодчиненным(ПодчиненнаяСтрока);
	КонецЦикла;
КонецПроцедуры

// Процедура проставляет признак Выгрузка строке дерева метаданных на основании этого признака подчиненных строк,
// затем вызывает себя же для родителя, обеспечивая отработку до корня дерева
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура ОбновитьСостояниеВыгружать(ЭлементДЗ)
	Если ЭлементДЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если (ЭлементДЗ.ЭлементОписания <> Неопределено) И ЭлементДЗ.ЭлементОписания.Выгружаемый Тогда
		Возврат; // обновляем вверх или до корня, или до первого встретившегося выгружаемого
	КонецЕсли;
	Состояние = Неопределено;
	Для Каждого ПодчиненныйЭлементДЗ Из ЭлементДЗ.Строки Цикл
		Если Состояние = Неопределено Тогда
			Состояние = ПодчиненныйЭлементДЗ.Выгружать;
		Иначе
			Если Не Состояние = ПодчиненныйЭлементДЗ.Выгружать Тогда
				Состояние = 2;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Состояние <> Неопределено Тогда
		ЭлементДЗ.Выгружать = Состояние;
		ОбновитьСостояниеВыгружать(ЭлементДЗ.Родитель);
	КонецЕсли;
КонецПроцедуры

// Процедура проставляет признак Выгрузка строкам дерева метаданных, подчиненных данной, вычисляет и 
//      выставляет признак выгрузки "по ссылке" другим объектам, ссылки на которые может или должен
//      содержать объект, соответствующий данной строке
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура УстановитьВыгружатьПриНеобходимостиПодчиненным(ЭлементДЗ)
	
	Для Каждого ПодчиненнаяСтрока Из ЭлементДЗ.Строки Цикл
		ПодчиненнаяСтрока.ВыгружатьПриНеобходимости = ЭлементДЗ.ВыгружатьПриНеобходимости;
		УстановитьВыгружатьПриНеобходимостиПодчиненным(ПодчиненнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Процедура проставляет признак Выгрузка строке дерева метаданных на основании этого признака подчиненных строк,
// затем вызывает себя же для родителя, обеспечивая отработку до корня дерева
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ)
	
	Если ЭлементДЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЭлементДЗ.ЭлементОписания <> Неопределено) И ЭлементДЗ.ЭлементОписания.Выгружаемый Тогда
		Возврат; // обновляем вверх или до корня, или до первого встретившегося выгружаемого
	КонецЕсли;
	
	Состояние = Неопределено;
	Для Каждого ПодчиненныйЭлементДЗ Из ЭлементДЗ.Строки Цикл
		
		Если Состояние = Неопределено Тогда
			Состояние = ПодчиненныйЭлементДЗ.ВыгружатьПриНеобходимости;
		Иначе
			Если Не Состояние = ПодчиненныйЭлементДЗ.ВыгружатьПриНеобходимости Тогда
				Состояние = 2;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Состояние <> Неопределено Тогда
		ЭлементДЗ.ВыгружатьПриНеобходимости = Состояние;
		ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьКомпоновщикДляВыгрузки(СтрокаДереваМетаданных, СтрокаПолейДляВыборки = "") Экспорт
	
	Если ТипЗнч(СтрокаДереваМетаданных.НастройкиКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
		ЕстьДопОтборы = Ложь;
		Для Каждого ЭлементОтбора Из СтрокаДереваМетаданных.НастройкиКомпоновщика.Элементы Цикл
			Если ЭлементОтбора.Использование Тогда
				ЕстьДопОтборы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЕстьДопОтборы = (СтрокаДереваМетаданных.НастройкиКомпоновщика <> Неопределено);
	КонецЕсли;
	
	ИтоговыйТекстЗапроса = ПолучитьТекстЗапросаПоСтроке(СтрокаДереваМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки);
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ТекущаяБаза";
	ИсточникДанных.СтрокаСоединения = "";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = ИтоговыйТекстЗапроса;
	НаборДанных.Имя = "ОсновнойЗапрос";
	НаборДанных.ИсточникДанных = "ТекущаяБаза";
	
	Если ЕстьДопОтборы Тогда
		
		НастройкиКомпоновщикаXDTO = СериализаторXDTO.ЗаписатьXDTO(СтрокаДереваМетаданных.НастройкиКомпоновщика);
		СКДXDTO = СериализаторXDTO.ЗаписатьXDTO(СхемаКомпоновкиДанных);
		СКДXDTO.defaultSettings = СКДXDTO.settingsVariant[0].settings;
		СКДXDTO.defaultSettings.filter = НастройкиКомпоновщикаXDTO;
		СхемаКомпоновкиДанных = СериализаторXDTO.ПрочитатьXDTO(СКДXDTO);
		
	КонецЕсли;
	
	ПараметрДатаНачала = Новый ПараметрКомпоновкиДанных("ДатаНачала");
	ПараметрДатаОкончания = Новый ПараметрКомпоновкиДанных("ДатаОкончания");
	
	СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Очистить();
	Параметр = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = ПараметрДатаНачала;
	Параметр.Значение = ДатаНачала;
	Параметр.Использование = Истина;
	
	Параметр = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = ПараметрДатаОкончания;
	Параметр.Значение = ДатаОкончания;
	Параметр.Использование = Истина;
	
	Возврат СхемаКомпоновкиДанных; //ПостроительОтчета;
	
КонецФункции

Функция ПолучитьТекстЗапросаПоСтроке(СтрокаДереваМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки = "") Экспорт
	
	Если ТипЗнч(СтрокаДереваМетаданных) = Тип("ДанныеФормыЭлементДерева") Тогда
		// Вызов из управляемой формы
		РодительскийЭлемент = СтрокаДереваМетаданных.ПолучитьРодителя();
	Иначе //СтрокаДереваЗначений
		РодительскийЭлемент = СтрокаДереваМетаданных.Родитель;
	КонецЕсли;
	//ОбъектМетаданных  = СтрокаДереваМетаданных.Метаданные;
	ОбъектМетаданных = Метаданные[РодительскийЭлемент.ПолноеИмяМетаданных][СтрокаДереваМетаданных.ПолноеИмяМетаданных];
	ИмяМетаданных     = ОбъектМетаданных.ПолноеИмя();
	
	Если Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаДляРегистраСведений(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки);
		Возврат ТекстЗапроса;
		
	ИначеЕсли   Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		
		ТекстЗапроса = ПолучитьТекстЗапросаДляРегистра(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки);
		Возврат ТекстЗапроса;
		
	КонецЕсли;
	
	ЕстьОграничениеПоДатам = ЗначениеЗаполнено(ДатаНачала) Или ЗначениеЗаполнено(ДатаОкончания);
	
	Если НЕ ЗначениеЗаполнено(СтрокаПолейДляВыборки) Тогда
		СтрокаПолейДляВыборки = "_.*";
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + " КАК _ ";
	
	// возможно нужно ограничение по датам установить
	Если ЕстьОграничениеПоДатам Тогда
		
		Если ЕстьДопОтборы И 
			НЕ ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
			
			Возврат ТекстЗапроса;
			
		КонецЕсли;
		
		ДопОграничениеПоДате = "";
		
		// можно ли для данного объекта МД сторить ограничения по датам
		Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			
			ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "Документ");
			
		ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
			ИЛИ Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
			
			ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "Регистр");
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
		
	КонецЕсли;
	
	Возврат  ТекстЗапроса;
	
КонецФункции

Функция ПолучитьСтрокуОграниченияПоДатеДляЗапроса(Свойства, ИмяТипа) Экспорт
	
	ИтоговоеОграничениеПоДате = "";
	ИмяАлиасаТаблицы = "_";
	
	Если НЕ (ИмяТипа = "Документ" ИЛИ ИмяТипа = "РегистрСведений" ИЛИ ИмяТипа = "Регистр") Тогда
		Возврат ИтоговоеОграничениеПоДате;
	КонецЕсли;
	
	ИмяПоляОграничения = ИмяАлиасаТаблицы + "." + ?(ИмяТипа = "Документ", "Дата", "Период");
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		
		ИтоговоеОграничениеПоДате = "
		|	ГДЕ
		|		" + ИмяПоляОграничения + " >= &ДатаНачала";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		
		Если ПустаяСтрока(ИтоговоеОграничениеПоДате) Тогда
			
			ИтоговоеОграничениеПоДате = "
			|	ГДЕ
			|		" + ИмяПоляОграничения + " <= &ДатаОкончания";
			
		Иначе
			
			ИтоговоеОграничениеПоДате = ИтоговоеОграничениеПоДате + "
			|	И
			|		" + ИмяПоляОграничения + " <= &ДатаОкончания";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИтоговоеОграничениеПоДате;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляРегистраСведений(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки = "")
	
	ЕстьОграничениеПоДатам = ЗначениеЗаполнено(ДатаНачала) Или ЗначениеЗаполнено(ДатаОкончания);
	
	Если НЕ ЗначениеЗаполнено(СтрокаПолейДляВыборки) Тогда
		СтрокаПолейДляВыборки = "_.*";
	Иначе
		СтрокаПолейДляВыборки = " Различные " +  СтрокаПолейДляВыборки;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + " КАК _ ";
	
	Если ОбъектМетаданных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	// 0 - отбор за период
	// 1 - срез последних на дату окончания
	// 2 - срез первых на дату начала
	// 3 - срез последних на дату начала + отбор за период
	
	Если ТипВыгрузкиПериодическихРегистров = 0 Тогда
		
		Если ЕстьДопОтборы И 
			НЕ ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
			
			Возврат ТекстЗапроса;
			
		КонецЕсли;
		
		ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "РегистрСведений");
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
		
	ИначеЕсли ТипВыгрузкиПериодическихРегистров = 1 Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + ".СрезПоследних(&ДатаОкончания) КАК _ ";
		
	ИначеЕсли ТипВыгрузкиПериодическихРегистров = 2 Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + ".СрезПервых(&ДатаНачала) КАК _ ";
		
	ИначеЕсли ТипВыгрузкиПериодическихРегистров = 3 Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + ".СрезПоследних(&ДатаНачала) КАК _ 
		|
		|Объединить все
		|
		|ВЫБРАТЬ " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + " КАК _ ";
		
		ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "РегистрСведений");
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляРегистра(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки = "")
	
	ЕстьОграничениеПоДатам = ЗначениеЗаполнено(ДатаНачала) Или ЗначениеЗаполнено(ДатаОкончания);
	
	Если НЕ ЗначениеЗаполнено(СтрокаПолейДляВыборки) Тогда
		СтрокаПолейДляВыборки = "_.*";
	Иначе
		СтрокаПолейДляВыборки = " РАЗЛИЧНЫЕ " +  СтрокаПолейДляВыборки;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + " КАК _ ";
	
	// возможно нужно ограничение по датам установить
	Если ЕстьОграничениеПоДатам Тогда
		
		Если ЕстьДопОтборы И 
			НЕ ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
			
			Возврат ТекстЗапроса;
			
		КонецЕсли;
		
		ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "Регистр");
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура рекурсивно обрабатывает дерево метаданных, образуя списки полной и вспомогательной выгрузки
//
// Параметры
//
Процедура СоставВыгрузки(ПересчитатьВыгружаемыеПоСсылке = Ложь) Экспорт
	
	СоставПолнойВыгрузки = Новый ТаблицаЗначений;
	СоставПолнойВыгрузки.Колонки.Добавить("ОбъектМД");
	СоставПолнойВыгрузки.Колонки.Добавить("СтрокаДерева");
	СоставПолнойВыгрузки.Индексы.Добавить("ОбъектМД");
	
	СоставВспомогательнойВыгрузки = Новый ТаблицаЗначений;
	СоставВспомогательнойВыгрузки.Колонки.Добавить("ОбъектМД");
	СоставВспомогательнойВыгрузки.Колонки.Добавить("СтрокаДерева");
	СоставВспомогательнойВыгрузки.Индексы.Добавить("ОбъектМД");
	
	Для Каждого СтрокаДЗ Из ДеревоМетаданных.Строки Цикл
		ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, СтрокаДЗ);
	КонецЦикла;
	
	мНаличиеВыгрузкиПодчиненныхОбъектов = СоставВспомогательнойВыгрузки.Количество() > 0;
	
	Если ПересчитатьВыгружаемыеПоСсылке Тогда
		
		ПересчитатьВыгружаемыеПоСсылке(СоставПолнойВыгрузки);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура рекурсивно обрабатывает строку дерева метаданных, образуя списки полной и вспомогательной выгрузки
//
// Параметры
//   СоставПолнойВыгрузки - список полной выгрузки
//   СоставВспомогательнойВыгрузки - список вспомогательной выгрузки
//   СтрокаДЗ - обрабатываемая строка дерева метаданных
//
Процедура ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, СтрокаДЗ)
	
	Если (СтрокаДЗ.ЭлементОписания <> Неопределено) 
		И СтрокаДЗ.ЭлементОписания.Выгружаемый Тогда
		
		СторкаДобавления = Неопределено;
		
		Если СтрокаДЗ.Выгружать Тогда
			
			СторкаДобавления = СоставПолнойВыгрузки.Добавить();
			
		ИначеЕсли СтрокаДЗ.ВыгружатьПриНеобходимости Тогда
			
			СторкаДобавления = СоставВспомогательнойВыгрузки.Добавить();
			
		КонецЕсли;
		
		Если СторкаДобавления <> Неопределено Тогда
			
			СторкаДобавления.ОбъектМД = СтрокаДЗ.ОбъектМД;
			СторкаДобавления.СтрокаДерева = СтрокаДЗ;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрокаДЗ Из СтрокаДЗ.Строки Цикл
		ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, ПодчиненнаяСтрокаДЗ);
	КонецЦикла;
	
КонецПроцедуры

// Процедура определяет, какие типы объектов следует выгружать для сохранения ссылочной целостности
//
// Параметры
//   Выгрузка - массив строк - совокупность выгружаемых объектов
Процедура ПересчитатьВыгружаемыеПоСсылке(Выгрузка) Экспорт
	
	// сброс всех флажков ВыгружатьПриНеобходимости
	СтрокаКонфигурации = ДеревоМетаданных.Строки[0];
	СтрокаКонфигурации.ВыгружатьПриНеобходимости = 0;
	ОбработкаИзмененияСостоянияВыгружатьПриНеобходимости(СтрокаКонфигурации);
	#Если Клиент Тогда
		Состояние("Выполняется поиск объектов метаданных, которые могут быть выгружены по ссылкам...");
	#КонецЕсли
	
	// обработка переданного набора объектов
	Для Каждого Выгружаемый Из Выгрузка Цикл
		
		УстановкаСостоянияВыгружатьПриНеобходимости(Выгружаемый.СтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура определяет, на какие объект может ссылаться запись, соответствующая объекту метаданных, отображаемому
// данной строкой дерева метаданных и проставляет им признак ВыгружатьПриНеобходимости
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
//
Процедура УстановкаСостоянияВыгружатьПриНеобходимости(ЭлементДЗ)
	
	ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
	Если ЭлементДЗ.Выгружать <> 1 И ЭлементДЗ.ВыгружатьПриНеобходимости <> 1 Тогда
		Возврат;
	КонецЕсли;
	Если ЭлементДЗ.ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВсеТипы = ПолучитьВсеТипы(ЭлементДЗ);
	Для Каждого СсылочныйТип Из ВсеТипы Цикл
		
		ТипИОбъект = СсылочныеТипы.Получить(СсылочныйТип);
		Если ТипИОбъект = Неопределено Тогда
			
			ВызватьИсключение("Внутреняя ошибка. Неполное заполнение структуры ссылочных типов - " + СсылочныйТип);
			
		КонецЕсли;
		
		ОбъектМД = ТипИОбъект;
		СтрокаДЗ = ЭлементДЗПоОбъектуМД(ОбъектМД);
		Если СтрокаДЗ = Неопределено Тогда 
			
			ВызватьИсключение("Внутреняя ошибка. Неполное заполнение дерева метаданных. Отсутствует объект, образующий тип - " + СсылочныйТип);
			
		КонецЕсли;
		
		Если СтрокаДЗ.Выгружать = 1 
			Или СтрокаДЗ.ВыгружатьПриНеобходимости = 1 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаДЗ.ВыгружатьПриНеобходимости = 1;
		УстановкаСостоянияВыгружатьПриНеобходимости(СтрокаДЗ);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает массив типов, которые могут иметь поля записи объекта метаданных, соответствующего строке дерева
//
// Параметры
//   ЭлементДЗ - строка дерева метаданных
// Возврат - массив потенциально используемых соответствующей записью типов
//
Функция ПолучитьВсеТипы(ЭлементДЗ)
	
	ОбъектМД = ЭлементДЗ.ОбъектМД;
	Если ТипЗнч(ОбъектМД) <> Тип("ОбъектМетаданных") 
		И ТипЗнч(ОбъектМД) <> Тип("ОбъектМетаданныхКонфигурация") Тогда
		
		ВызватьИсключение("Внутреняя ошибка обработки выгрузки");
		
	КонецЕсли;
	
	Возврат ПолучитьТипыИспользуемыеОМД(ОбъектМД, ЭлементДЗ.ЭлементОписания);
	
КонецФункции

// Функция возвращает строку дерева метаданных, соответствующую переданному объекту метаданных
// Поиск осуществляется по всему дереву метаданных
//
// Параметры
//   ОбъектМД - описание метаданного
// Возврат - строка дерева метаданных
//
Функция ЭлементДЗПоОбъектуМД(ОбъектМД)
	Для Каждого СтрокаДЗ Из ДеревоМетаданных.Строки Цикл
		ЭлементДЗ = ЭлементДЗПоОбъектуМДИСтроке(СтрокаДЗ, ОбъектМД);
		Если ЭлементДЗ <> Неопределено Тогда 
			Возврат ЭлементДЗ;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Функция возвращает массив типов, которые могут иметь поля записи объекта метаданных
//
// Параметры
//   ОбъектМД - описание метаданного
//   ЭлементОписания - описание класса объекта метаданного
// Возврат - массив потенциально используемых соответствующей записью типов
//
Функция ПолучитьТипыИспользуемыеОМД(ОбъектМД, ЭлементОписания)
	
	ВсеТипы = Новый Массив;
	
	Для Каждого Свойство Из ЭлементОписания.Свойства Цикл
		
		ЗначениеСвойства = ОбъектМД[Свойство.Значение];
		Если ТипЗнч(ЗначениеСвойства) = Тип("КоллекцияЗначенийСвойстваОбъектаМетаданных") И ЗначениеСвойства.Количество() > 0 Тогда
			
			Для Каждого СтрокаКоллекции Из ЗначениеСвойства Цикл
				
				СсылочныйТипКлючИЗначение = СоответствиеОбъектовМетаданныхИСсылочныхТипов[СтрокаКоллекции];
				
				Если СсылочныйТипКлючИЗначение <> Неопределено Тогда
					
					ДобавитьВМассивЕслиУникальный(ВсеТипы, СсылочныйТипКлючИЗначение);
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("ОбъектМетаданных") Тогда
			
			Для Каждого СсылочныйТипКлючИЗначение Из СсылочныеТипы Цикл
				
				Если ЗначениеСвойства = СсылочныйТипКлючИЗначение.Значение Тогда
					ДобавитьВМассивЕслиУникальный(ВсеТипы, СсылочныйТипКлючИЗначение.Ключ);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КлассМДТипизированный(ЭлементОписания) Тогда
		
		ОписаниеТипа = ОбъектМД.Тип;
		Для Каждого ОдинТип Из ОписаниеТипа.Типы() Цикл
			
			Если СсылочныйТип(ОдинТип) Тогда
				ДобавитьВМассивЕслиУникальный(ВсеТипы, ОдинТип);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если Метаданные.РегистрыСведений.Содержит(ОбъектМД) Или 
			Метаданные.РегистрыНакопления.Содержит(ОбъектМД) Или
			Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД) Или
			Метаданные.РегистрыРасчета.Содержит(ОбъектМД) Тогда
			
			// какой-то из регистров, ищем в возможных регистраторах
			Для Каждого ДокументМД Из Метаданные.Документы Цикл
				
				Если ДокументМД.Движения.Содержит(ОбъектМД) Тогда
					
					ДобавитьВМассивЕслиУникальный(ВсеТипы, ТипЗнч(Документы[ДокументМД.Имя].ПустаяСсылка()));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ПодчиненныйКласс Из ЭлементОписания.Строки Цикл
		
		Для Каждого ПодчиненныйОбъектМД Из ОбъектМД[ПодчиненныйКласс.Класс] Цикл
			
			ТипыПодчиненного = ПолучитьТипыИспользуемыеОМД(ПодчиненныйОбъектМД, ПодчиненныйКласс);
			Для Каждого ОдинТип Из ТипыПодчиненного Цикл
				ДобавитьВМассивЕслиУникальный(ВсеТипы, ОдинТип);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВсеТипы;
	
КонецФункции

// Функция возвращает строку дерева метаданных, соответствующую переданному объекту метаданных
// Поиск осуществляется среди строк, подчиненных переданной
//
// Параметры
//   СтрокаДЗ - строка дерева метаданных, от которй осуществляется поиск
//   ОбъектМД - описание метаданного
// Возврат - строка дерева метаданных
//
Функция ЭлементДЗПоОбъектуМДИСтроке(СтрокаДЗ, ОбъектМД)
	
	Возврат СтрокаДЗ.Строки.Найти(ОбъектМД, "ОбъектМД", Истина);
	
КонецФункции

// Процедура добавляет в массив новый элемент, если он является уникальным
//
// Параметры
//   Массив - исследуемый тип
//   Элемент - добавляемый элемент
//
Процедура ДобавитьВМассивЕслиУникальный(Массив, Элемент)
	
	Если Массив.Найти(Элемент) = Неопределено Тогда
		Массив.Добавить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет, являются ли объекты данного класса метаданных типизированными
//
// Параметры
//   Описание - Описание класса
// Возврат - Истина, если объекты данного класса метаданных типизированы, Ложь в противном случае
//
Функция КлассМДТипизированный(Описание)
	
	Для Каждого Свойство Из Описание.Свойства Цикл
		Если Свойство.Значение = "Тип" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

// Функция определяет, являются ли тип ссылочным
//
// Параметры
//   Тип - исследуемый тип
// Возврат - Истина, если тип ссылочный, Ложь в противном случае
//
Функция СсылочныйТип(Тип)
	
	МетаданныеТипа = СсылочныеТипы.Получить(Тип);
	Возврат МетаданныеТипа <> Неопределено;
	
КонецФункции


Процедура СоздатьПоМетаданным(массивДанных)
	
	ОбработанныхКонстант = 0;
	ОбработанныхНаборовЗаписей = 0;
	
	ОбъектыВыгруженныеСОшибками = Новый Соответствие;
	СоставВыгрузки();
	
	мВыгруженныеОбъекты = Новый ТаблицаЗначений;
	мВыгруженныеОбъекты.Колонки.Добавить("Ссылка");
	мВыгруженныеОбъекты.Индексы.Добавить("Ссылка");
	
	
	Если ОбъектыВыгруженныеСОшибками = Неопределено Тогда
		ОбъектыВыгруженныеСОшибками = Новый Соответствие;
	КонецЕсли;
	
	//ОкноИсполнения = ПолучитьФорму("ОкноИсполнения");
	//ОкноИсполненияОбщееКоличество = 1;
	//ОкноИсполненияОбработано = 0;
	//ОкноИсполнения.Открыть();
	
	Попытка
		
		Для Каждого СтрокаТаблицыВыгрузки Из СоставПолнойВыгрузки Цикл
			
			СтрокаДереваМетаданных = СтрокаТаблицыВыгрузки.СтрокаДерева;
			
			Если СтрокаДереваМетаданных.ЭлементОписания.Менеджер = Неопределено Тогда
				ВызватьИсключение("Выгрузка данных. Внутренняя ошибка");
			КонецЕсли;
			
			Если Метаданные.Константы.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
				
				//ЗаписьКонстанты(СтрокаДереваМетаданных.ОбъектМД, ОбъектыВыгруженныеСОшибками);
				
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаДереваМетаданных.ОбъектМД) Или 
				Метаданные.РегистрыНакопления.Содержит(СтрокаДереваМетаданных.ОбъектМД) Или
				Метаданные.РегистрыРасчета.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
				
				ЗаписьРегистра(СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками,, массивДанных);
				
			ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
				
				//ЗаписьРегистра(СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, Истина);
				
			ИначеЕсли ТипЗнч(СтрокаДереваМетаданных.ЭлементОписания.Менеджер) = Тип("Строка") Тогда
				// специальный случай для перерасчетов
				//ЗаписьПерерасчета(СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками);
				
			ИначеЕсли Метаданные.Последовательности.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда 
				
				//ЗаписьПоследовательности(СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками);
				
			Иначе
				ЗаписьДанныхОбъектногоТипа(СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, массивДанных);
				
			КонецЕсли;
			
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
		
		КонецЦикла;
		
		//ДополнительныеОбъектыДляВыгрузки.Сортировать("ИмяОбъектаДляЗапроса");
		ТекущийМассивСсылок = Новый Массив();
		ТекущееИмяЗапроса = "";

		
		//Для Каждого СтрокаТаблицыВыгрузки Из ДополнительныеОбъектыДляВыгрузки Цикл
		//	
		//	Если НЕ ЗначениеЗаполнено(СтрокаТаблицыВыгрузки.Объект)
		//		ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицыВыгрузки.ИмяОбъектаДляЗапроса) Тогда
		//		
		//		Продолжить;
		//		
		//	КонецЕсли;
		//	
		//	Если ТекущееИмяЗапроса <> СтрокаТаблицыВыгрузки.ИмяОбъектаДляЗапроса Тогда
		//		
		//		ВыгрузитьДанныеМассиваСсылок(ТекущийМассивСсылок, ТекущееИмяЗапроса, ОбъектыВыгруженныеСОшибками);
		//		
		//		ТекущийМассивСсылок = Новый массив();
		//		ТекущееИмяЗапроса = СтрокаТаблицыВыгрузки.ИмяОбъектаДляЗапроса;
		//		
		//	КонецЕсли;
		//	
		//	ТекущийМассивСсылок.Добавить(СтрокаТаблицыВыгрузки.Объект);
		//	
		//КонецЦикла;
		
		//ВыгрузитьДанныеМассиваСсылок(ТекущийМассивСсылок, ТекущееИмяЗапроса, ОбъектыВыгруженныеСОшибками);
		
	Исключение
		//ОкноИсполнения.Закрыть();
		ВызватьИсключение;
	КонецПопытки;
	
	//ОкноИсполнения.Закрыть();
	#Если Клиент Тогда
	Состояние();
	#КонецЕсли
	
КонецПроцедуры

Процедура ЗаписьДанныхОбъектногоТипа(СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, массивДанных)
	
	ПодзаголовокОкнаИсполнения = СтрокаДереваМетаданных.ОбъектМД.ПолноеИмя();
	
	ОкноИсполненияОбщееКоличество = 1;
	//ОкноИсполненияОбработано = 0;
	
	РезультатЗапроса = ПолучитьРезультатЗапросаСОграничениями(СтрокаДереваМетаданных);
	
	ЗапросИЗапись(РезультатЗапроса, Истина, ОбъектыВыгруженныеСОшибками, массивДанных);
	
КонецПроцедуры

Функция ПолучитьРезультатЗапросаСОграничениями(СтрокаДереваМетаданных)
	
	СКД = ПодготовитьКомпоновщикДляВыгрузки(СтрокаДереваМетаданных);

	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	СистемныеПоля = Новый ПолеКомпоновкиДанных("СистемныеПоля");
	ПараметрыДанных = Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	Для Каждого ДоступноеПоле Из Компоновщик.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если ДоступноеПоле.Поле = СистемныеПоля Или ДоступноеПоле.Поле = ПараметрыДанных Тогда
			Продолжить;
		КонецЕсли;
		ПолеНабора = СКД.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Поле = Строка(ДоступноеПоле.Поле);
		ПолеНабора.ПутьКДанным = Строка(ДоступноеПоле.Поле);
		//Если ДоступноеПоле.Папка Тогда
		//	ВыбранноеПолеГруппа = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		//	ВыбранноеПолеГруппа.Заголовок = ДоступноеПоле.Заголовок;
		//	Для Каждого ВложенныйЭлемент Из ДоступноеПоле.Элементы Цикл
		//		ПолеНабора = СКД.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		//		ПолеНабора.Поле = Строка(ВложенныйЭлемент.Поле);
		//		ПолеНабора.ПутьКДанным = Строка(ВложенныйЭлемент.Поле);
		//		ВыбранноеПоле = ВыбранноеПолеГруппа.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		//		ВыбранноеПоле.Поле = ВложенныйЭлемент.Поле;
		//	КонецЦикла;
		//Иначе
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ДоступноеПоле.Поле;
		//КонецЕсли;
		
	КонецЦикла;
	
	ПолеГруппировки = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	
	//#Если Клиент Тогда
	//	
	//НастройкиКомпоновщикаXDTO = СериализаторXDTO.ЗаписатьXDTO(Компоновщик.Настройки);
	//СКДXDTO = СериализаторXDTO.ЗаписатьXDTO(СКД);
	//СКДXDTO.defaultSettings = НастройкиКомпоновщикаXDTO;
	//СКД = СериализаторXDTO.ПрочитатьXDTO(СКДXDTO);
	//	
	//КонструкторСКД = Новый КонструкторСхемыКомпоновкиДанных(СКД);
	//КонструкторСКД.Редактировать(ПолучитьФорму("Форма"));
	//#КонецЕсли
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Компоновщик.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Запрос = Новый Запрос(МакетКомпоновки.НаборыДанных.ОсновнойЗапрос.Запрос);
	ПараметрыЗапроса = Запрос.НайтиПараметры();
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		ПараметрМакетаСКД = МакетКомпоновки.ЗначенияПараметров.Найти(Параметр.Имя);
		Запрос.УстановитьПараметр(Параметр.Имя, ПараметрМакетаСКД.Значение);
	КонецЦикла;
	РезультатЗапроса = Запрос.Выполнить();
	//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	//Возврат ТаблицаЗначений;
	//ПостроительОтчета.Выполнить();
	//РезультатЗапроса = ПостроительОтчета.Результат;
	//	
	Возврат РезультатЗапроса;
		
КонецФункции

// Процедура исполняет переданный запрос и записывает полученные через запрос объекты
//
// Параметры
//   Запрос - запрос для исполнения, результат содержит выборку объектов для записи
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   ЗапросВерхнегоУровня - признак необходимости анимации процесса
//
Процедура ЗапросИЗапись(РезультатЗапроса, ЗапросВерхнегоУровня = Ложь, ОбъектыВыгруженныеСОшибками, массивДанных)
	
	// универсальная процедура выгрузки ссылочных объектов процедура
	ОбработкаРезультатаЗапроса(РезультатЗапроса, Истина, ЗапросВерхнегоУровня, ОбъектыВыгруженныеСОшибками, массивДанных, МассивИмен);
	
КонецПроцедуры

// Процедура записывает содержащиеся в выборке результата запроса объекты и необходимые "по ссылке" объекты ИБ
//
// Параметры
//   РезультатЗапроса - результат запроса
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   ЭтоЗапросПоОбъекту - если Истина, выборка должна содержать объекты, на которые может быть ссылка,
//             если Ложь, выгружать, как объект не нужно, только обработать возможные ссылки на др. объекты ИБ
//
Процедура ОбработкаРезультатаЗапроса(РезультатЗапроса, ЭтоЗапросПоОбъекту = Ложь, 
	ЗапросВерхнегоУровня = Ложь, ОбъектыВыгруженныеСОшибками = Неопределено, массивДанных, МассивИмен)
	
	#Если Клиент Тогда
	ОбработкаПрерыванияПользователя();
	#КонецЕсли

	ВыборкаИзРезультатовЗапроса = РезультатЗапроса.Выбрать();
	Если ЗапросВерхнегоУровня Тогда
		
		ОкноИсполненияОбщееКоличество = ВыборкаИзРезультатовЗапроса.Количество();
		//ОкноИсполнения.ОбновитьВерхнююГраницу();
		
	КонецЕсли;
	
	ВсегоОбработаноОбъектов = 0;
	ОбработаноОбъектов = 0;
	
	Пока ВыборкаИзРезультатовЗапроса.Следующий() Цикл
		
		Если ЭтоЗапросПоОбъекту Тогда
			
			// выгрузка ссылочных объектов
			Ссылка = ВыборкаИзРезультатовЗапроса.Ссылка;
			
			Если СсылкаВыгружена(Ссылка) Тогда
				
				Если ЗапросВерхнегоУровня Тогда
					
					ОбработаноОбъектов = ОбработаноОбъектов + 1;
					Если ОбработаноОбъектов % 100 = 0 Тогда
						//ОкноИсполненияОбработано = ОкноИсполненияОбработано + ОбработаноОбъектов;
						ОбработаноОбъектов = 0;
					КонецЕсли;
					
				КонецЕсли;
				Продолжить;
				
			КонецЕсли;
			
			ДобавитьСсылкуКВыгруженным(Ссылка);
			
			ВсегоОбработаноОбъектов = ВсегоОбработанныхЗаписей();
			
			ПоказатьПользователюИнформациюОСостоянииВыгрузки(ВсегоОбработаноОбъектов, ОбъектыВыгруженныеСОшибками);
			
		КонецЕсли;
		
		Если мНаличиеВыгрузкиПодчиненныхОбъектов Тогда
		
			// перебираем колонки запроса в поисках ссылочных значений, которые, возможно, нужно выгрузить
			Для Каждого КолонкаЗапроса Из РезультатЗапроса.Колонки Цикл
				
				ЗначениеКолонки = ВыборкаИзРезультатовЗапроса[КолонкаЗапроса.Имя];
				
				Если ТипЗнч(ЗначениеКолонки) = мТипРезультатЗапроса Тогда
					
					ОбработкаРезультатаЗапроса(ЗначениеКолонки, , , ОбъектыВыгруженныеСОшибками, массивДанных, МассивИмен);
					
				Иначе
				
					ЗаписатьЗначениеПриНеобходимости(ЗначениеКолонки, ОбъектыВыгруженныеСОшибками, массивДанных);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЭтоЗапросПоОбъекту Тогда
			
			//Объект = Ссылка.ПолучитьОбъект();
						
			Попытка
				
				//ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов);
				
				//ЗаписатьXML(ЗаписьXML, Объект);
				
				//НоваяСтрокаТаблицыДанных = ТаблицаДанных.Добавить();
				//НоваяСтрокаТаблицыДанных.Ссылка = Ссылка;
				//ПриИзмененииСсылки(НоваяСтрокаТаблицыДанных);
				
				ОписательЭлемента = СоздатьОписательЭлементаПоСсылке(Ссылка, МассивИмен, ВыборкаИзРезультатовЗапроса);				
					//ОписательЭлемента = СоздатьОписательЭлемента();
					//ОписательЭлемента.Ссылка = Ссылка;
					//ОписательЭлемента.ИмяПеременной = УникальноеИмяПеременнойПоСсылке(Ссылка, МассивИмен);
					//МетаСсылка = Ссылка.Метаданные();
					//ОписательЭлемента.Метаданное = МетаСсылка;
					//ОписательЭлемента.РежимПоиска = "Перем";
					//Если Метаданные.Справочники.Содержит(МетаСсылка) И Ссылка.ЭтоГруппа Тогда
					//	ОписательЭлемента.РежимСоздания = "Группа";
					//Иначе
					//	ОписательЭлемента.РежимСоздания = "";
					//КонецЕсли;
				МассивДанных.Добавить(ОписательЭлемента);
				
				Если ВыгружатьСДокументомЕгоДвижения
					И Метаданные.Документы.Содержит(Ссылка.Метаданные()) Тогда
					
					Объект = Ссылка.ПолучитьОбъект();
					// выгрузка движений документа
					Для Каждого Движение Из Объект.Движения Цикл
						
						Движение.Прочитать();
						
						Если мНаличиеВыгрузкиПодчиненныхОбъектов
							И Движение.Количество() > 0 Тогда
							
							ТипРегистра = Тип(Движение);
							
							МассивКолонок = мСоответствиеКолонокДвижений.Получить(ТипРегистра);
	
							Если МассивКолонок = Неопределено Тогда
								
								ТаблицаДвижений = Движение.Выгрузить();
								РегистрБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение.Метаданные());
								МассивКолонок = ПолучитьМассивКолонокДвижения(ТаблицаДвижений, РегистрБухгалтерии);
								мСоответствиеКолонокДвижений.Вставить(ТипРегистра, МассивКолонок);
								
							КонецЕсли;
							
							ВыгрузитьПодчиненныеЗначенияНабора(Движение, МассивКолонок, ОбъектыВыгруженныеСОшибками, массивДанных);
							
						КонецЕсли;
						
						//ЗаписатьXML(ЗаписьXML, Движение);
						
						ОписательЭлемента = СоздатьОписательЭлементаПоНаборуЗаписей(Движение, МассивИмен);
						МассивДанных.Добавить(ОписательЭлемента);
							//Мд = Движение.Метаданные();
							////Для каждого ЗаписьНабора Из Движение Цикл
							//	ОписательЭлемента = СоздатьОписательЭлемента();
							//	ОписательЭлемента.Реквизиты = Движение; //ЗаписьНабора;
							//	ОписательЭлемента.Ссылка = Неопределено;
							//	ОписательЭлемента.Метаданное = Мд;
							//	МассивДанных.Добавить(ОписательЭлемента);
							////КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
			Исключение
				
				СтрокаОписанияОшибки = ОписаниеОшибки();
				//не смогли записать в XML
				// возможно проблема с недопустимыми символами в XML
				//Если ТолькоПроверкаНедопустимыхСимволов Тогда
				//	
				//	Если ОбъектыВыгруженныеСОшибками.Получить(Ссылка) = Неопределено Тогда
				//		ОбъектыВыгруженныеСОшибками.Вставить(Ссылка, СтрокаОписанияОшибки);
				//	КонецЕсли;
				//	
				//Иначе
					
					ИтоговаяСтрокаСообщения = "Ошибка при выгрузке объекта: " + Строка(Ссылка) + " Тип: " + Строка(ТипЗнч(Ссылка)) + "
					|" + СтрокаОписанияОшибки;
					
					Сообщить(ИтоговаяСтрокаСообщения);
					
					ВызватьИсключение ИтоговаяСтрокаСообщения;
					
				//КонецЕсли;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЗапросВерхнегоУровня Тогда
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			Если ОбработаноОбъектов % 100 = 0 Тогда
				//ОкноИсполненияОбработано = ОкноИсполненияОбработано + ОбработаноОбъектов;
				ОбработаноОбъектов = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
//	ОкноИсполненияОбработано = ОкноИсполненияОбработано + ОбработаноОбъектов;
	
КонецПроцедуры

Функция СсылкаВыгружена(Ссылка)
	
	Возврат мВыгруженныеОбъекты.Найти(Ссылка, "Ссылка") <> Неопределено;
	
КонецФункции

Процедура ДобавитьСсылкуКВыгруженным(Ссылка)
	
	СтрокаДобавления = мВыгруженныеОбъекты.Добавить();
	СтрокаДобавления.ссылка = Ссылка;
		
КонецПроцедуры

// Функция определяет общее количество произведенных записей констант + объектного типа + наборов записей
//
// Возврат - общее количество произведенных записей
Функция ВсегоОбработанныхЗаписей()
	Возврат 0;
	Возврат мВыгруженныеОбъекты.Количество() + ОбработанныхКонстант + ОбработанныхНаборовЗаписей;
	
КонецФункции

// Процедура анализирует необходимость записи объекта "по ссылке" и осуществляет запись
//
// Параметры
//   АнализируемоеЗначение - анализируемое значение
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//
Процедура ЗаписатьЗначениеПриНеобходимости(АнализируемоеЗначение, ОбъектыВыгруженныеСОшибками, массивДанных)
	
	Если Не ЗначениеЗаполнено(АнализируемоеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМД = СсылочныеТипы.Получить(ТипЗнч(АнализируемоеЗначение));
	
	Если ОбъектМД = Неопределено Тогда
		Возврат; // это не ссылка
	КонецЕсли;
			
	Если СсылкаВыгружена(АнализируемоеЗначение) Тогда
		Возврат; // объект уже был выгружен
	КонецЕсли;
	
	// Проверка того, что данный тип входит в список выгружаемых дополнительно
	СтрокаТаблицы = СоставПолнойВыгрузки.Найти(ОбъектМД, "ОбъектМД");
	Если СтрокаТаблицы <> Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	СтрокаТаблицы = СоставВспомогательнойВыгрузки.Найти(ОбъектМД, "ОбъектМД");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ДопЗапрос = Новый Запрос("ВЫБРАТЬ * ИЗ " + СтрокаТаблицы.СтрокаДерева.ЭлементОписания.ДляЗапроса + ОбъектМД.Имя +
			" КАК ТаблицаОбъекта_" + " ГДЕ Ссылка = &Ссылка");
		ДопЗапрос.УстановитьПараметр("Ссылка", АнализируемоеЗначение);
		РезультатЗапроса = ДопЗапрос.Выполнить();
		ЗапросИЗапись(РезультатЗапроса, , ОбъектыВыгруженныеСОшибками, массивДанных);
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьМассивКолонокДвижения(ТаблицаДвижений, РегистрБухгалтерии = Ложь)
	
	МассивКолонок = Новый Массив();
	Для Каждого КолонкаТаблицы Из ТаблицаДвижений.Колонки Цикл
		
		Если КолонкаТаблицы.Имя = "МоментВремени"
			ИЛИ Найти(КолонкаТаблицы.Имя, "ВидСубконтоДт") = 1
			ИЛИ Найти(КолонкаТаблицы.Имя, "ВидСубконтоКт") = 1 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Найти(КолонкаТаблицы.Имя, "СубконтоДт") = 1 И РегистрБухгалтерии Тогда
			
			Если МассивКолонок.Найти("СубконтоДт") = Неопределено Тогда
				МассивКолонок.Добавить("СубконтоДт");
			Конецесли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Найти(КолонкаТаблицы.Имя, "СубконтоКт") = 1 И РегистрБухгалтерии Тогда
			
			Если МассивКолонок.Найти("СубконтоКт") = Неопределено Тогда
				МассивКолонок.Добавить("СубконтоКт");
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		МассивКолонок.Добавить(КолонкаТаблицы.Имя);
		
	КонецЦикла;
	
	Возврат МассивКолонок;
	
КонецФункции

Процедура ВыгрузитьПодчиненныеЗначенияНабора(Движение, МассивКолонок, ОбъектыВыгруженныеСОшибками, массивДанных)
		
	Для Каждого ЗаписьИзНабора Из Движение Цикл
								
		Для Каждого Колонка Из МассивКолонок Цикл
			
			Если Колонка = "СубконтоДт"
				ИЛИ Колонка = "СубконтоКт" Тогда
				
				Значение = ЗаписьИзНабора[Колонка];
				Для Каждого КлючИЗначение Из Значение Цикл
					
					Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
						ЗаписатьЗначениеПриНеобходимости(КлючИЗначение.Значение, ОбъектыВыгруженныеСОшибками, массивДанных);
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
			
				СохраненноеЗначение = ЗаписьИзНабора[Колонка];
				ЗаписатьЗначениеПриНеобходимости(СохраненноеЗначение, ОбъектыВыгруженныеСОшибками, массивДанных);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура записывает наборы записей регистра (накопления, бухгалтерии...)
//
// Параметры
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   СтрокаДереваМетаданных - строка дерева метаданных, соответствующая регистру
//
Процедура ЗаписьРегистра(СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, РегистрБухгалтерии = Ложь, массивДанных)
	
	ПодзаголовокОкнаИсполнения = СтрокаДереваМетаданных.ОбъектМД.ПолноеИмя();
	ОкноИсполненияОбщееКоличество = 1;
	//ОкноИсполненияОбработано = 0;
	
	МенеджерНабораЗаписей = СтрокаДереваМетаданных.ЭлементОписания.Менеджер[СтрокаДереваМетаданных.ОбъектМД.Имя];
	
	ИмяТаблицыДляЗапроса = СтрокаДереваМетаданных.ЭлементОписания.ДляЗапроса;
		
	ЗаписьЧерезНаборЗаписей(МенеджерНабораЗаписей, ИмяТаблицыДляЗапроса, 
		СтрокаДереваМетаданных.ОбъектМД.Имя, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, РегистрБухгалтерии, массивДанных);
	
КонецПроцедуры

// Процедура записывает данные, доступ к которым осуществляется через набор записей
//
// Параметры
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   СтрокаДереваМетаданных - строка дерева метаданных, соответствующая регистру
//
Процедура ЗаписьЧерезНаборЗаписей(МенеджерНабораЗаписей, ДляЗапроса, ИмяОбъекта, 
	СтрокаДереваМетаданных = Неопределено, ОбъектыВыгруженныеСОшибками, РегистрБухгалтерии = Ложь, массивДанных)
	
	// получить состав колонок записи регистра и проверить наличие хотя бы одной записи
	Если ДляЗапроса = "РегистрБухгалтерии." Тогда
		ИмяТаблицыДляЗапроса = ДляЗапроса + ИмяОбъекта + ".ДвиженияССубконто";	
	Иначе
		ИмяТаблицыДляЗапроса = ДляЗапроса + ИмяОбъекта;	
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ " + ИмяТаблицыДляЗапроса + " КАК ТаблицаОбъекта_" + ИмяОбъекта);
	РезультатЗапросаПоСоставу = Запрос.Выполнить();
	Если РезультатЗапросаПоСоставу.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений = РезультатЗапросаПоСоставу.Выгрузить();
	МассивКолонок = ПолучитьМассивКолонокДвижения(ТаблицаДвижений, РегистрБухгалтерии);
	
	// выгрузка регистров осуществляется через его набор записей
	НаборЗаписей = МенеджерНабораЗаписей.СоздатьНаборЗаписей();
	
	Отбор = НаборЗаписей.Отбор;
	СтрокаПолейОтбора = "";
	Для Каждого ЭлементОтбора Из Отбор Цикл 
		Если Не ПустаяСтрока(СтрокаПолейОтбора) Тогда 
			СтрокаПолейОтбора = СтрокаПолейОтбора + ",";
		КонецЕсли;
		СтрокаПолейОтбора = СтрокаПолейОтбора + ЭлементОтбора.Имя;
	КонецЦикла;
	
	СКД = ПодготовитьКомпоновщикДляВыгрузки(СтрокаДереваМетаданных, СтрокаПолейОтбора); 
	//ПостроительОтчета.Выполнить();
	РезультатЗапросаПоЗначениямОтбора = ПолучитьРезультатЗапросаСКД(СКД);
	ВыборкаИзРезультата = РезультатЗапросаПоЗначениямОтбора.Выбрать();
	
	ОкноИсполненияОбщееКоличество = ВыборкаИзРезультата.Количество();
	//ОкноИсполненияОбработано = 0;
	//ОкноИсполнения.ОбновитьВерхнююГраницу();

	КоличествоПолейОтбора = НаборЗаписей.Отбор.Количество();
	
	// читаем наборы записей с различным составом отбора и записываем их
	Пока ВыборкаИзРезультата.Следующий() Цикл
		
		// Пересоздание набора, чтоб чтоб разные экземпляры объекта в МассивДанных попали
		НаборЗаписей = МенеджерНабораЗаписей.СоздатьНаборЗаписей();
		Отбор = НаборЗаписей.Отбор;
		
		// Отбор устанавливаем для регистров, у которых есть хотя бы один отбор (измерение)
		Если КоличествоПолейОтбора <> 0 Тогда
			
			Для Каждого Колонка Из РезультатЗапросаПоЗначениямОтбора.Колонки Цикл 
				Отбор[Колонка.Имя].Значение = ВыборкаИзРезультата[Колонка.Имя];
				Отбор[Колонка.Имя].ВидСравнения = ВидСравнения.Равно;
				Отбор[Колонка.Имя].Использование = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
		НаборЗаписей.Прочитать();
		
		Если мНаличиеВыгрузкиПодчиненныхОбъектов Тогда
		
			// проверяем все записанные в наборе значения на необходимость записи "по ссылке"
			ВыгрузитьПодчиненныеЗначенияНабора(НаборЗаписей, МассивКолонок, ОбъектыВыгруженныеСОшибками, массивДанных);
									
		КонецЕсли;
		
		ВсегоОбработаноОбъектов = ВсегоОбработанныхЗаписей();
		Попытка
					
			//ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов);
			
			//ЗаписатьXML(ЗаписьXML, НаборЗаписей);			
			
			ОписательЭлемента = СоздатьОписательЭлементаПоНаборуЗаписей(НаборЗаписей, МассивИмен);
			МассивДанных.Добавить(ОписательЭлемента);
				//Мд = НаборЗаписей.Метаданные();
				////Для каждого ЗаписьНабора Из НаборЗаписей Цикл
				//	ОписательЭлемента = СоздатьОписательЭлемента();
				//	ОписательЭлемента.Реквизиты = НаборЗаписей; //ЗаписьНабора;
				//	ОписательЭлемента.Ссылка = Неопределено;
				//	ОписательЭлемента.Метаданное = Мд;
				//	МассивДанных.Добавить(ОписательЭлемента);
				////КонецЦикла;
			
		Исключение
			
			СтрокаОписанияОшибки = ОписаниеОшибки();
			//не смогли записать в XML
			// возможно проблема с недопустимыми символами в XML
			//Если ТолькоПроверкаНедопустимыхСимволов Тогда
			//	
			//	НовыйНабор = МенеджерНабораЗаписей.СоздатьНаборЗаписей();
			//	
			//	Для Каждого СтрокаОтбора Из НаборЗаписей.Отбор Цикл
			//		
			//		СтрокаОтбораФормы = НовыйНабор.Отбор.Найти(СтрокаОтбора.Имя);
			//		
			//		Если СтрокаОтбораФормы = Неопределено Тогда
			//			Продолжить;
			//		КонецЕсли;
			//		
			//		СтрокаОтбораФормы.Использование = СтрокаОтбора.Использование;
			//		СтрокаОтбораФормы.ВидСравнения = СтрокаОтбора.ВидСравнения;
			//		СтрокаОтбораФормы.Значение = СтрокаОтбора.Значение;
			//		
			//	КонецЦикла;
			//	
			//	ОбъектыВыгруженныеСОшибками.Вставить(НовыйНабор, СтрокаОписанияОшибки);
			//									
			//Иначе
				
				ИтоговаяСтрокаСообщения = "Ошибка при выгрузке набора записей регистра: " + ДляЗапроса + ИмяОбъекта + "
				|" + СтрокаОписанияОшибки;
				
				Сообщить(ИтоговаяСтрокаСообщения);
				
				ВызватьИсключение ИтоговаяСтрокаСообщения;
				
			//КонецЕсли;
			
		КонецПопытки;	
		
		ОбработанныхНаборовЗаписей = ОбработанныхНаборовЗаписей + 1;
		ОкноИсполненияОбработано = ОкноИсполненияОбработано + 1;
		
		ПоказатьПользователюИнформациюОСостоянииВыгрузки(ВсегоОбработаноОбъектов, ОбъектыВыгруженныеСОшибками);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьПользователюИнформациюОСостоянииВыгрузки(ВсегоОбработаноОбъектов, ОбъектыВыгруженныеСОшибками)
	
	#Если Клиент Тогда
		
		Если ВсегоОбработаноОбъектов %100 = 0 Тогда
			
			Если ОбъектыВыгруженныеСОшибками <> Неопределено
				И ОбъектыВыгруженныеСОшибками.Количество() > 0 Тогда
				
				Состояние("Выгруженных объектов - " + ВсегоОбработаноОбъектов + ", ошибок при выгрузке - " + ОбъектыВыгруженныеСОшибками.Количество());
				
			Иначе
				Состояние("Выгруженных объектов - " + ВсегоОбработаноОбъектов);
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

Функция ПолучитьРезультатЗапросаСКД(СКД)
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	СистемныеПоля = Новый ПолеКомпоновкиДанных("СистемныеПоля");
	ПараметрыДанных = Новый ПолеКомпоновкиДанных("ПараметрыДанных");
	Для Каждого ДоступноеПоле Из Компоновщик.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если ДоступноеПоле.Поле = СистемныеПоля Или ДоступноеПоле.Поле = ПараметрыДанных Тогда
			Продолжить;
		КонецЕсли;
		ПолеНабора = СКД.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Поле = Строка(ДоступноеПоле.Поле);
		ПолеНабора.ПутьКДанным = Строка(ДоступноеПоле.Поле);
		Если ДоступноеПоле.Папка Тогда
			ВыбранноеПолеГруппа = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранноеПолеГруппа.Заголовок = ДоступноеПоле.Заголовок;
			Для Каждого ВложенныйЭлемент Из ДоступноеПоле.Элементы Цикл
				ПолеНабора = СКД.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
				ПолеНабора.Поле = Строка(ВложенныйЭлемент.Поле);
				ПолеНабора.ПутьКДанным = Строка(ВложенныйЭлемент.Поле);
				ВыбранноеПоле = ВыбранноеПолеГруппа.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = ВложенныйЭлемент.Поле;
			КонецЦикла;
		Иначе
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ДоступноеПоле.Поле;
		КонецЕсли;
		
	КонецЦикла;
	
	ПолеГруппировки = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	
	//#Если Клиент Тогда
	//	
	//НастройкиКомпоновщикаXDTO = СериализаторXDTO.ЗаписатьXDTO(Компоновщик.Настройки);
	//СКДXDTO = СериализаторXDTO.ЗаписатьXDTO(СКД);
	//СКДXDTO.defaultSettings = НастройкиКомпоновщикаXDTO;
	//СКД = СериализаторXDTO.ПрочитатьXDTO(СКДXDTO);
	//	
	//КонструкторСКД = Новый КонструкторСхемыКомпоновкиДанных(СКД);
	//КонструкторСКД.Редактировать(ПолучитьФорму("Форма"));
	//#КонецЕсли
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Компоновщик.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Запрос = Новый Запрос(МакетКомпоновки.НаборыДанных.ОсновнойЗапрос.Запрос);
	ПараметрыЗапроса = Запрос.НайтиПараметры();
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		ПараметрМакетаСКД = МакетКомпоновки.ЗначенияПараметров.Найти(Параметр.Имя);
		Запрос.УстановитьПараметр(Параметр.Имя, ПараметрМакетаСКД.Значение);
	КонецЦикла;
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции


мНаличиеВыгрузкиПодчиненныхОбъектов = Ложь;
мТипРезультатЗапроса = Тип("РезультатЗапроса");
мСоответствиеКолонокДвижений = Новый Соответствие;



ЭтоВстроеннаяОбработка = Не Метаданные.НайтиПоТипу(ТипЗнч(ЭтотОбъект)) = Неопределено;
ЕстьВстроеннаяОбработка_юТест = Не Метаданные.Обработки.Найти(ИмяЗапускателяТестов()) = Неопределено;
