{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",2,0,0,0,0,0,3,3,0,0,2,100,1,1,0},"&НаКлиенте
Перем ТекущийКлиент;

&НаКлиенте
Перем ТекущийПорт;

&НаКлиенте
Перем СтатусыРезультатаТестирования;

// { Plugin interface
&НаКлиенте
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Возврат ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов);
КонецФункции

&НаСервере
Функция ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов)
	Возврат ЭтотОбъектНаСервере().ОписаниеПлагина(ВозможныеТипыПлагинов);
КонецФункции
// } Plugin interface

// { Helpers
&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение(""Объект"");
КонецФункции
// } Helpers

// FLUENT ASSERTIONS

&НаКлиенте
Функция ПодключениеКлиентаТестирования(ИмяПользователя = """", Пароль = """", Порт = 1538) Экспорт
	
	ПодключитьТестКлиент(ИмяПользователя, Пароль, Порт);
	
	Если ТекущийКлиент = Неопределено Тогда
		ПроверяемоеЗначение= СтрШаблон(""Клиент тестирования с именем пользователя %1"", ИмяПользователя);
		СообщениеОшибки = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, ""БУДЕТ ПОДКЛЮЧЕН."");
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
	
	Возврат ЭтаФорма;
	
КонецФункции

&НаКлиенте
Функция ОтключениеКлиентаТестирования() Экспорт
	
	ОтключитьТестКлиент();
	
	Если ТекущийКлиент <> Неопределено Тогда
		ПроверяемоеЗначение= СтрШаблон(""Клиент тестирования на порту %1"", XMLСтрока(ТекущийПорт));
		СообщениеОшибки = СформироватьСообщениеОбОшибке(ПроверяемоеЗначение, ""БУДЕТ ОТКЛЮЧЕН."");
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
	
	Возврат ЭтаФорма;
	
КонецФункции

&НаКлиенте
Функция ТестНаКлиенте() Экспорт
	Возврат ""Получилось."";
КонецФункции


// Из УтвержденияBDD

&НаКлиенте
Процедура ВызватьОшибкуПроверки(Знач СообщениеОшибки)
	Префикс = ""[""+ СтатусыРезультатаТестирования.ОшибкаПроверки + ""]"";
	ВызватьИсключение Префикс + "" "" + СообщениеОшибки;
КонецПроцедуры

&НаКлиенте
Функция СформироватьСообщениеОбОшибке(Знач ПроверяемоеЗначение, Знач Ожидание)
	Возврат 
		""Ожидали, что проверяемое значение ("" + ПроверяемоеЗначение + "") "" 
		//+ ?(ФлагОтрицанияДляСообщения, "" НЕ "", "" "") 
		+ Ожидание 
		//+ ФорматДСО(ДопСообщениеОшибки)
	;
КонецФункции

// Из ТестКлиенты

&НаКлиенте
Функция ПодключитьТестКлиент(ИмяПользователя = """", Пароль = """", Порт = 1538) Экспорт
	
	Если ТекущийКлиент <> Неопределено Тогда
		ОтключитьТестКлиент();
	КонецЕсли;
	
	Результат = Неопределено;
	
	Попытка
		Выполнить ""Результат = Новый ТестируемоеПриложение(, XMLСтрока(Порт));"";
	Исключение
	КонецПопытки;
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение ""Не удалось создать объект ТестируемоеПриложение.
		|Возможно, что 1С:Предприятие 8 не было запущено в режиме Менеджера тестирования (ключ командной строки /TESTMANAGER)
		|При запуске Предприятия через Конфигуратор можно включить этот режим в параметрах конфигуратора Сервис -> Параметры -> Запуск 1С:Предприятия -> Дополнительные -> Автоматизированное тестирование -> пункт """"Запускать как менеджер тестирования""""."";
	КонецЕсли;
	
	// Попытка подключиться к уже запущенному приложению.
	Подключен = Ложь;
	Попытка
		Результат.УстановитьСоединение();
		Подключен = Истина;
	Исключение
	КонецПопытки;
	
	Если Подключен Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗапуститьПриложение(СтрокаЗапускаТестКлиента(ИмяПользователя, Пароль, Порт));
	
	ВремяОкончанияОжидания = ТекущаяДата() + ТаймаутВСекундах();
	ОписаниеОшибкиСоединения = """";
	Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл
		Попытка
			Результат.УстановитьСоединение();
			Подключен = Истина;
			Прервать;
		Исключение
			ОписаниеОшибкиСоединения = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	
	Если Не Подключен Тогда
		ВызватьИсключение СтрШаблон(
		""Не смогли установить соединение с тестовым приложением для пользователя %1!
		|%2"",
		ИмяПользователя,
		ОписаниеОшибкиСоединения); 
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		ТекущийКлиент= Результат;
		ТекущийПорт= Порт;
	Иначе
		ТекущийКлиент= Неопределено;
		ТекущийПорт= Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтключитьТестКлиент()
	
	Если ТекущийКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоLinux() Тогда
		ЗапуститьПриложение(""kill -9 `ps aux | grep -ie TESTCLIENT | grep -ie 1cv8c | awk '{print $2}'`"");
	Иначе
		Scr = Новый COMОбъект(""MSScriptControl.ScriptControl"");
		Scr.Language = ""vbscript"";
		Scr.AddCode(ТекстСкриптаЗавершитьТестКлиент(ТекущийПорт));
	КонецЕсли;
	
	ТекущийКлиент = Неопределено;
	ТекущийПорт = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Функция ТекстСкриптаЗавершитьТестКлиент(НомерПорта)
	
	Результат = ""
	|Option Explicit
	|
	|Dim objWMIService, objProcess, colProcess
	|
	|Set objWMIService = GetObject(""""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"""") 
	|
	|Set colProcess = objWMIService.ExecQuery(""""Select * from Win32_Process Where (CommandLine Like '%/TESTCLIENT%' And ExecutablePath Like '%1cv8c%')"""")
	|
	|For Each objProcess in colProcess
	|	objProcess.Terminate()
	|Next
	|"";
	
	Если Не ЗначениеЗаполнено(НомерПорта) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат СтрЗаменить(
	Результат,
	""%/TESTCLIENT%"",
	""%/TESTCLIENT -TPort"" + XMLСтрока(НомерПорта) + ""%"");
	
КонецФункции

&НаКлиенте
Функция СтрокаЗапускаТестКлиента(ИмяПользователя = """", Пароль = """", Порт = """")
	
	Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда
		ИмяПользователя = ИмяТекущегоПользователя();
	КонецЕсли;
	
	СтрокаЗапуска1с = КаталогПрограммы() + ""1cv8c"";
	
	Если Не ЭтоLinux() Тогда
		СтрокаЗапуска1с = СтрШаблон(""%1.exe"", СтрокаЗапуска1с);;
	КонецЕсли;
	
	Результат = СтрШаблон(
	""%1 ENTERPRISE /IBConnectionString""""%2"""" /N""""%3""""%4 /TESTCLIENT -TPort%5"",
	СтрокаЗапуска1с,
	СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """""""", """"""""""""),
	ИмяПользователя,
	?(ПустаяСтрока(Пароль), """","" /P"""""" + Пароль + """"""""),
	XMLСтрока(Порт));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяТекущегоПользователя()
	
	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
КонецФункции

&НаКлиенте
Функция ТаймаутВСекундах()
	
	Возврат 20;
	
КонецФункции

&НаКлиенте
Функция ЭтоLinux()
	
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	
	Возврат СтрНайти(Строка(СисИнфо.ТипПлатформы), ""Linux"") > 0;
	
КонецФункции

СтатусыРезультатаТестирования = Новый Структура;
СтатусыРезультатаТестирования.Вставить(""ОшибкаПроверки"", ""Failed"");
СтатусыРезультатаТестирования.Вставить(""НеизвестнаяОшибка"", ""Broken"");
СтатусыРезультатаТестирования.Вставить(""ТестПропущен"", ""Pending"");
СтатусыРезультатаТестирования = Новый ФиксированнаяСтруктура(СтатусыРезультатаТестирования);
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",0e3bdb19-dec8-4860-8554-9d05e2a33cfd}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}