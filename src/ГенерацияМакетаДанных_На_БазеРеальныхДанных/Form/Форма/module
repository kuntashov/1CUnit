
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТаблицаДанных

Процедура ТаблицаДанныхСсылкаПриИзменении(Элемент)
	ТаблицаДанныхСсылкаПриИзмененииСервер(ЭлементыФормы.ТаблицаДанных.ТекущаяСтрока);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

Процедура КоманднаяПанель1СоздатьМакетДанных(Кнопка)
	Если ПроверитьЗаполнение() Тогда
		НовыйМакет = СоздатьМакетДанныхСервер();
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанель1ПротестироватьЗагрузкуМакета(Кнопка)
	Макет = ЭлементыФормы.Макет;
	
	Если ЭтоВстроеннаяОбработка И Не ЕстьВстроеннаяОбработка_юТест Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = НСтр("ru = 'В конфигураци отсутствует обработка UnitTestRunner. Функция тестирования загрузки макета недоступна.'");
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ЕстьВстроеннаяОбработка_юТест Тогда
		ПроверитьЗагрузкуМакетаСервер(Неопределено, Макет, Истина);
	Иначе
		путьФайл_юТест = ПолучитьПутьОбработкиЗапускателяТестов();
		ИдОбработки_юТест = "UnitTestRunner";
		ИДПодключеннойОбработки = ПодключитьНаСервереВнешнююОбработкуОтКлиента(путьФайл_юТест, ИдОбработки_юТест);
		ПроверитьЗагрузкуМакетаСервер(ИДПодключеннойОбработки, Макет, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель1СохранитьМакетДанныхВФайл(Кнопка)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.ПолноеИмяФайла = "";
	ДиалогВыбораФайла.Фильтр = "Табличный документ (*.mxl)|*.mxl|Все файлы (*.*)|*.*";
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	Если Не ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Макет = ЭлементыФормы.Макет;
	Макет.Записать(ДиалогВыбораФайла.ПолноеИмяФайла);
КонецПроцедуры

Процедура КоманднаяПанель2ОчиститьТаблицуДанных(Кнопка)
	ТаблицаДанных.Очистить();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция Объект()
	Возврат ЭтотОбъект;
КонецФункции

Процедура ТаблицаДанныхСсылкаПриИзмененииСервер(ИдентификаторСтрокиДанных)
	ЭлементДанных = ИдентификаторСтрокиДанных;
	Объект().ПриИзмененииСсылки(ЭлементДанных);
КонецПроцедуры

Функция СоздатьМакетДанныхСервер()
	Возврат Объект().СоздатьМакетДанных(ЭлементыФормы.Макет);
КонецФункции

Функция ПолучитьКаталогОбработкиСервер()
	Возврат Объект().ПолучитьКаталогОбработки();
КонецФункции

Функция ПодключитьВнешнююОбработкуСервер(АдресХранилища, ИдентификаторОбработки, ПолныйПутьФайлаОбработки)
	Возврат Объект().ПодключитьВнешнююОбработку(АдресХранилища, ИдентификаторОбработки, ПолныйПутьФайлаОбработки);
КонецФункции

Функция ПолучитьПутьОбработкиЗапускателяТестов()
	каталогТекущегоФайла = ПолучитьКаталогОбработкиСервер();
	
	имяФайла_Раннера = "UnitTestRunner.epf";
	Файл = Новый Файл(каталогТекущегоФайла + имяФайла_Раннера);
	Если НЕ Файл.Существует() Тогда
		Файл = Новый Файл(каталогТекущегоФайла + "..\" + имяФайла_Раннера);
		Если НЕ Файл.Существует() Тогда
			ВызватьИсключение "Не удалось найти файл "+имяФайла_Раннера;
		КонецЕсли;
	КонецЕсли;
	путьФайл_Раннер = Файл.ПолноеИмя;
	Возврат путьФайл_Раннер;
КонецФункции

Функция ПодключитьНаСервереВнешнююОбработкуОтКлиента(ПолныйПутьФайлаОбработки, ИдентификаторОбработки)
	АдресХранилища = "";
	#Если ТонкийКлиент Тогда
	ПоместитьФайл(АдресХранилища, ПолныйПутьФайлаОбработки,, Ложь);
	#КонецЕсли
	Возврат ПодключитьВнешнююОбработкуСервер(АдресХранилища, ИдентификаторОбработки, ПолныйПутьФайлаОбработки);
КонецФункции

Процедура ПроверитьЗагрузкуМакетаСервер(ИдОбработки_юТест, ТабличныйДокумент, ЕстьВстроеннаяОбработка_юТест)
	Объект().ПроверитьЗагрузкуМакета(ИдОбработки_юТест, ТабличныйДокумент, ЕстьВстроеннаяОбработка_юТест);
КонецПроцедуры
