
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТаблицаДанных

&НаКлиенте
Процедура ТаблицаДанныхСсылкаПриИзменении(Элемент)
	ТаблицаДанныхСсылкаПриИзмененииСервер(Элементы.ТаблицаДанных.ТекущаяСтрока);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СоздатьМакетДанных(Команда)
	Если ПроверитьЗаполнение() Тогда
		НовыйМакет = СоздатьМакетДанныхСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПротестироватьЗагрузкуМакета(Команда)
	ЕстьВстроеннаяОбработка_юТест = Объект.ЕстьВстроеннаяОбработка_юТест;
	
	Если ЕстьВстроеннаяОбработка_юТест Тогда
		ПроверитьЗагрузкуМакетаСервер(Неопределено, Макет, Истина);
	Иначе
		путьФайл_юТест = ПолучитьПутьОбработкиЗапускателяТестов();
		ИдОбработки_юТест = "UnitTestRunner";
		ИДПодключеннойОбработки = ПодключитьНаСервереВнешнююОбработкуОтКлиента(путьФайл_юТест, ИдОбработки_юТест);
		ПроверитьЗагрузкуМакетаСервер(ИДПодключеннойОбработки, Макет, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьМакетДанныхВФайл(Команда)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.ПолноеИмяФайла = "";
	ДиалогВыбораФайла.Фильтр = "Табличный документ (*.mxl)|*.mxl|Все файлы (*.*)|*.*";
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	Если Не ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Макет.Записать(ДиалогВыбораФайла.ПолноеИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуДанных(Команда)
	Объект.ТаблицаДанных.Очистить();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция Объект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервере
Процедура ТаблицаДанныхСсылкаПриИзмененииСервер(ИдентификаторСтрокиДанных)
	ЭлементДанных = Объект.ТаблицаДанных.НайтиПоИдентификатору(ИдентификаторСтрокиДанных);
	Объект().ПриИзмененииСсылки(ЭлементДанных);
КонецПроцедуры

&НаСервере
Функция СоздатьМакетДанныхСервер()
	Возврат Объект().СоздатьМакетДанных(Макет);
КонецФункции

&НаСервере
Функция ПолучитьКаталогОбработкиСервер()
	Возврат Объект().ПолучитьКаталогОбработки();
КонецФункции

&НаСервере
Функция ПодключитьВнешнююОбработкуСервер(АдресХранилища, ИдентификаторОбработки, ПолныйПутьФайлаОбработки)
	Возврат Объект().ПодключитьВнешнююОбработку(АдресХранилища, ИдентификаторОбработки, ПолныйПутьФайлаОбработки);
КонецФункции

&НаКлиенте
Функция ПолучитьПутьОбработкиЗапускателяТестов()
	каталогТекущегоФайла = ПолучитьКаталогОбработкиСервер();
	
	имяФайла_Раннера = "UnitTestRunner.epf";
	Файл = Новый Файл(каталогТекущегоФайла + имяФайла_Раннера);
	Если НЕ Файл.Существует() Тогда
		Файл = Новый Файл(каталогТекущегоФайла + "..\" + имяФайла_Раннера);
		Если НЕ Файл.Существует() Тогда
			ВызватьИсключение "Не удалось найти файл "+имяФайла_Раннера;
		КонецЕсли;
	КонецЕсли;
	путьФайл_Раннер = Файл.ПолноеИмя;
	Возврат путьФайл_Раннер;
КонецФункции

&НаКлиенте
Функция ПодключитьНаСервереВнешнююОбработкуОтКлиента(ПолныйПутьФайлаОбработки, ИдентификаторОбработки)
	АдресХранилища = "";
	#Если ТонкийКлиент Тогда
	ПоместитьФайл(АдресХранилища, ПолныйПутьФайлаОбработки,, Ложь);
	#КонецЕсли
	Возврат ПодключитьВнешнююОбработкуСервер(АдресХранилища, ИдентификаторОбработки, ПолныйПутьФайлаОбработки);
КонецФункции

&НаСервере
Процедура ПроверитьЗагрузкуМакетаСервер(ИдОбработки_юТест, ТабличныйДокумент, ЕстьВстроеннаяОбработка_юТест)
	Объект().ПроверитьЗагрузкуМакета(ИдОбработки_юТест, ТабличныйДокумент, ЕстьВстроеннаяОбработка_юТест);
КонецПроцедуры
