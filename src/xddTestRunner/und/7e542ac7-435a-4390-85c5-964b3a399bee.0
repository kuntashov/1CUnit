{3,
{38,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,0,
{1,0},0,0,1,1,1,0,1,0,
{4,3699f6a3-9a2a-4c82-a775-6ff4824a08ca,"ОбработкаОповещения",3ccc650e-f631-4cae-8e33-3eaac610b5f9,"ПриОткрытии",9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",ca21cd18-35b2-4281-b5c8-016ecc8da8ac,"ПриЗакрытии"},
{0},1,
{19,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},8,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{138,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаЗагрузитьТестыПоУмолчанию",
{1,1,
{"ru","Загрузить тесты"}
},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABmJLR0QA/wD/AP+g
vaeTAAAACXBIWXMAAABIAAAASABGyWs+AAAEtUlEQVRIx6WUy48UVRTGf+fe6p6e
7ume6aCMEXygIgmgISaSGI0ZSYfEpRt2/gUmxrhwYVy410R36pawksBKNCajji9C
lEgCBGGAGZkB5kU/pt9dVfceF9XdM82486RqUfXdOud85ztfyec/984/+4h9Ze+U
IZsWANqhcrfmWSjHv6mK/T94AARnf7nOjYVlNutNACYLExx4Zi8v7H8y7VXtmZ8W
mb+zwma9tQ1/giMH9weo2jM/XWF+cZl6o4VKMIILwPsnr+vxQ3l6sWIEljYa/H5t
jfXvP34U8C++/UX5+OHCEF9+0OT8fJ3Vbz6wwNTBE5+Wjx0sQDCONTLET713VAKA
fC7Da4emcVgCcfxwscmYUYA0sJafGB/iaQsXbmxw6Z82wGNAKpexHHvpadSktvA7
XQAM/TAieO+oVat47xExAGuzs3NugAMI4L3HdRsAKSBKZScJrB3igyiVZmRYQNB+
cocxBpvJM0gOYE3yqaqj1aih6gEiYE3EDHEZVFAFyAT9J9qtFs45xsYsufwUSJeH
w3tHdXMnw99PHOKFxZM82LXI0bEZvrr/GWdvneN1jiSnfByheKy1FItFjDHsjGR8
zu1kKEZB4JPND7nausR3N8+BJp0PM6UDy1SxiO3PcnuoehqbNZxzBMGA4VYTIvCI
3U0QQKqVxiIDMbrDU7lcDmN2Ji+VZuy7c4dx8+eZun2K3VLmlYvv8NGFI1uHJBE+
3QlQ71CjxDZmdnYuYWCC1H+OpVSascC0MwHWGoq3v8RUbxBfPjtyzojQqjexAiYw
xNmoP6HhmsqO5CRbMg2kbGAo5nOY7DhYAzYYaSLVSSXCZzy5qSza12TEB6PbMrrn
xTGfMBzPgrEQBCMMBTDGoMUIsTLSrgE4eX6Zucsr/FVRVpsxX/+5yulf54d7bmz/
k/FxMAasxSdppoGUArnCBIrSv0YLDEp+u+S4tlRh7noNTV4mTh7ok8mCGLxY6i49
ZBhlIowxuFiS5JrcI06OnNKrV3DOoVhCyW45WQR8CJkMXj21OI1LGoiANY/S0w4u
FFQV1eGYMqa/6KxstoiimFpoiFMTgxFsRW8NL5bq2hIOwSa9JgwV7sZLuFBYCe8j
TghckHgQQF3MessROksmX8TpTu198x7VWg/nHRalYMMhQ1W4E97ChYKLFdsJHnKy
Kq1IiFNT9JzBK/htSnkH1coDXKeH9SFTQYjZJqV6oRJVibuGWnkTYjPqZKdC3Wfp
xkKl7XEONPkbUirN2GpocO0yNuxSDFoYHz+01rDRXYdymkq3ivOMOjnGstFWuqHn
QVtxXlHd5mTnsd0NiraDaW+Ac6Pzc8JqeQ3fM5SjCmE6HnWyj2I6kdANlYWKJ5e2
WNna83oPiqaN6bahfBNJT9DydsgwXcnSCyNiBwt6h3yqgInHthVoN6oblQaPjkGt
rUjUJp+Oa0AING5FxfVmrQqpaWiWacYB83bveqk0Y4DJsZXna5vVgD2TT1ELG6Tr
j5PtHKhuWezNU4XJglxxcbQHBBHu7apcfPk5c6UBdN+K53LT+/b9KBq+KKqE3l69
v7z6xrfBqzEgfxeqE7XJ4h8a1/aCgEzcbXeuH+b0RvNf+XOfI5UewfYAAAAldEVY
dGRhdGU6Y3JlYXRlADIwMTMtMDUtMjlUMDk6NDc6NDItMDU6MDBTDo/DAAAAJXRF
WHRkYXRlOm1vZGlmeQAyMDEzLTA1LTI4VDA2OjE3OjMwLTA1OjAwR0bHqQAAAABJ
RU5ErkJggg==}
},0,""},1,
{"Pattern"},"",2,0,1,
{8,
{357,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаЗагрузитьТестыПоУмолчаниюExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{19,
{131,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ПодменюЗагрузитьТесты",
{1,1,
{"ru","Загрузить ..."}
},
{1,1,
{"ru","Подменю загрузить тесты"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{6,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABmJLR0QA/wD/AP+g
vaeTAAAACXBIWXMAAABIAAAASABGyWs+AAAEtUlEQVRIx6WUy48UVRTGf+fe6p6e
7ume6aCMEXygIgmgISaSGI0ZSYfEpRt2/gUmxrhwYVy410R36pawksBKNCajji9C
lEgCBGGAGZkB5kU/pt9dVfceF9XdM82486RqUfXdOud85ztfyec/984/+4h9Ze+U
IZsWANqhcrfmWSjHv6mK/T94AARnf7nOjYVlNutNACYLExx4Zi8v7H8y7VXtmZ8W
mb+zwma9tQ1/giMH9weo2jM/XWF+cZl6o4VKMIILwPsnr+vxQ3l6sWIEljYa/H5t
jfXvP34U8C++/UX5+OHCEF9+0OT8fJ3Vbz6wwNTBE5+Wjx0sQDCONTLET713VAKA
fC7Da4emcVgCcfxwscmYUYA0sJafGB/iaQsXbmxw6Z82wGNAKpexHHvpadSktvA7
XQAM/TAieO+oVat47xExAGuzs3NugAMI4L3HdRsAKSBKZScJrB3igyiVZmRYQNB+
cocxBpvJM0gOYE3yqaqj1aih6gEiYE3EDHEZVFAFyAT9J9qtFs45xsYsufwUSJeH
w3tHdXMnw99PHOKFxZM82LXI0bEZvrr/GWdvneN1jiSnfByheKy1FItFjDHsjGR8
zu1kKEZB4JPND7nausR3N8+BJp0PM6UDy1SxiO3PcnuoehqbNZxzBMGA4VYTIvCI
3U0QQKqVxiIDMbrDU7lcDmN2Ji+VZuy7c4dx8+eZun2K3VLmlYvv8NGFI1uHJBE+
3QlQ71CjxDZmdnYuYWCC1H+OpVSascC0MwHWGoq3v8RUbxBfPjtyzojQqjexAiYw
xNmoP6HhmsqO5CRbMg2kbGAo5nOY7DhYAzYYaSLVSSXCZzy5qSza12TEB6PbMrrn
xTGfMBzPgrEQBCMMBTDGoMUIsTLSrgE4eX6Zucsr/FVRVpsxX/+5yulf54d7bmz/
k/FxMAasxSdppoGUArnCBIrSv0YLDEp+u+S4tlRh7noNTV4mTh7ok8mCGLxY6i49
ZBhlIowxuFiS5JrcI06OnNKrV3DOoVhCyW45WQR8CJkMXj21OI1LGoiANY/S0w4u
FFQV1eGYMqa/6KxstoiimFpoiFMTgxFsRW8NL5bq2hIOwSa9JgwV7sZLuFBYCe8j
TghckHgQQF3MessROksmX8TpTu198x7VWg/nHRalYMMhQ1W4E97ChYKLFdsJHnKy
Kq1IiFNT9JzBK/htSnkH1coDXKeH9SFTQYjZJqV6oRJVibuGWnkTYjPqZKdC3Wfp
xkKl7XEONPkbUirN2GpocO0yNuxSDFoYHz+01rDRXYdymkq3ivOMOjnGstFWuqHn
QVtxXlHd5mTnsd0NiraDaW+Ac6Pzc8JqeQ3fM5SjCmE6HnWyj2I6kdANlYWKJ5e2
WNna83oPiqaN6bahfBNJT9DydsgwXcnSCyNiBwt6h3yqgInHthVoN6oblQaPjkGt
rUjUJp+Oa0AING5FxfVmrQqpaWiWacYB83bveqk0Y4DJsZXna5vVgD2TT1ELG6Tr
j5PtHKhuWezNU4XJglxxcbQHBBHu7apcfPk5c6UBdN+K53LT+/b9KBq+KKqE3l69
v7z6xrfBqzEgfxeqE7XJ4h8a1/aCgEzcbXeuH+b0RvNf+XOfI5UewfYAAAAldEVY
dGRhdGU6Y3JlYXRlADIwMTMtMDUtMjlUMDk6NDc6NDItMDU6MDBTDo/DAAAAJXRF
WHRkYXRlOm1vZGlmeQAyMDEzLTA1LTI4VDA2OjE3OjMwLTA1OjAwR0bHqQAAAABJ
RU5ErkJggg==}
},0,""},
{0},2,3},8,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{19,
{132,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ГруппаЗагрузитьТестыИзКонфигурации",
{1,1,
{"ru","Группа загрузить тесты из конфигурации"}
},
{1,1,
{"ru","Группа загрузить тесты из конфигурации"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,
{0},2},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{76,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаЗагрузитьТестыИзКонфигурации",
{1,0},1,
{9,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{360,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаЗагрузитьТестыИзКонфигурацииExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{79,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаЗагрузитьТестыИзКонфигурацииПоИмени",
{1,0},1,
{10,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{361,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаЗагрузитьТестыИзКонфигурацииПоИмениExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},1,0,1,
{8,
{359,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаЗагрузитьТестыИзКонфигурацииExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{19,
{133,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ГруппаЗагрузитьТесты",
{1,1,
{"ru","Группа загрузить тесты"}
},
{1,1,
{"ru","Группа загрузить тесты"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,
{0},2},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{28,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаЗагрузитьТестовыйНабор",
{1,1,
{"ru","Загрузить тесты из каталога"}
},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{363,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаЗагрузитьТестовыйНаборExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{29,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаЗагрузитьТестовыеСлучаи",
{1,0},1,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{364,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаЗагрузитьТестовыеСлучаиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},1,0,1,
{8,
{362,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаЗагрузитьТестыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{134,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаРегистрацияПрохожденияТестовВЖР",
{1,0},1,
{12,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{365,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаРегистрацияПрохожденияТестовВЖРExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{135,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаРегистрацияОшибокТестовВЖР",
{1,0},1,
{13,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{366,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаРегистрацияОшибокТестовВЖРExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{139,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаВключитьРежимОтладки",
{1,1,
{"ru","Режим отладки выполнения тестов"}
},1,
{16,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{367,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаВключитьРежимОтладкиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{190,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаСлучайныйПорядокВыполнения",
{1,0},1,
{14,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{368,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаСлучайныйПорядокВыполненияExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{19,
{242,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ИсторияВыбораМест",
{1,1,
{"ru","История выбора мест"}
},
{1,1,
{"ru","История выбора мест"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,
{0},2},0,1,0,1,
{8,
{369,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ИсторияВыбораМестExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{19,
{244,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ИсторияВыбораФайлов",
{1,1,
{"ru","История выбора файлов"}
},
{1,1,
{"ru","История выбора файлов"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,
{0},2},0,1,0,1,
{8,
{370,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ИсторияВыбораФайловExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},1,0,1,
{8,
{358,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПодменюЗагрузитьТестыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{31,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаПерезагрузитьТесты",
{1,0},1,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64: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
7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJ
gUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5p
DoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85
ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7
F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/R
NtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9
MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo
1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5
sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWF
fevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTP
ZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJ
zs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ
+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3v
dy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtb
Ylu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ7
52PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7
nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9
zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9D
BY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfy
l5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT
0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADq
YAAAOpgAABdvkl/FRgAAAlFJREFUeNqkk11Ik2EUx3/Pu3duc35NRefSTMlNM52l
IZIZgaUWtaAPDPGiiygiKoIKUsEu7CLEQJCIPq68ihK6KrsxSoz8QAJFA800rEQt
bbqW27unC7NGjrzw3J0D/8M5/3N+QkrJuiK4gTUPso9CWROU3QKHCwBjxXUemOJJ
DKVVggsBDbxe8CwR5XYTHZNNtNHOJrst+eS+anN9qAHU4EQfIewlu3OuObdZD/j8
Y3qhkxwqliIrIYfS4skzP/yDPG/xnCeAb0UjpJQIRWBJ12XVNJe3FzgDKe6fw/jk
NEKRIMA9r2E0KXT3mWcbq6cz0Pi2soIKYEog8fAF283cgqmU/vFeXr9k9F03Pd7v
LGoS8/GLVOpg7n6N5zQac6oBAv4gI2LSOVjXHicfLxhk1W3GUNgStFmy6wbvEzKp
VFRI3Qu7rkL85mWtkFISHityU/I5FRZO1PxnXn3s4d7Gnegn3+DT/BiAZGC05AoV
tqy4Qs+019N5Z/Hh7Ij8wD9/IACStlJ0oln/Vo3EYC0ASxpEOjCfbdk+PDRRK+ta
M2RkGq4/HgSfNtbOjtqmwjYlkGodqXrWsMGB2/1JmLKd1lKXs8gxNH2XvoGpF0vz
DP69ghDLch1Rl1utw3sKLEn+pQjCw8PQ/BKhghLQ+Ood4Wnn7OyjBo65J+hYPYHE
1/9qpisz78uRmRmYGMer6kAI8AfQBrro7H1C48IkHSFf+XfEll+i7VwbEiP70ZGP
jkJU8oGYVRiEhElgSyumXlGxrMnRf2g0Abq1Goj14vxrAEGh9iL0BPs8AAAAAElF
TkSuQmCC}
},0,""},1,
{"Pattern"},"",2,0,1,
{8,
{371,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаПерезагрузитьТестыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{30,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаВыполнитьВсеТесты",
{1,0},1,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64: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
7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJ
gUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5p
DoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85
ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7
F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/R
NtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9
MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo
1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5
sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWF
fevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTP
ZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJ
zs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ
+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3v
dy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtb
Ylu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ7
52PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7
nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9
zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9D
BY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfy
l5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT
0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADq
YAAAOpgAABdvkl/FRgAAAhJJREFUeNrUk01rE1EYhc+duZOZSYNtPqgVqmkVpNJF
UQlqNtlpRdBuhIKgC/fiX/AnKCrVjQs34kLQahe1wYUJNUpqWkpUMLa2dtKkmXx0
ksxkPu51IdiKdZWV5wc8vOe85xDOObqRgC7VNYACQDwx1j94rDW+tUFW9FX//Ei8
PVndJGulQk9KIJRRiQPkb6vZbPYXwB9qnbp0NXw70ntQmXm1ODs8IiWiBw6r8+n1
Zx+SjQeVVTUlwOfuBaIAwDj3O64rRwf6levXzl5c3yyh3jBwJj48GTttX84taLOZ
ZP1uuaDOEc9nixQgAt8F8ATesT1umFtwbA8DoX2IBMMo61U0am1x7Hj0/MkYObfw
ce3t+2T9XqUQeMkZNX+H6DHAtjlcl8N2PRimDtPSEOmjGD0yBAgWimVNmBiPJW7e
Ovr0xIQ+RXus/TsXMALDtKC3dHRsFxwAFUTIbgcNQ8OPUg0BVcJ3/QvynyvljU9q
2rOkxi4LBJbN0HYseIxDkRQYTYZ8sQgwhmCfH1rJLD1/Un2o5QJTxOnVRMp2MvAY
iONyIssUhsGwXNDhOC5CQQWVilNNz+mPtCX1PjPC30QJIBL78wuckbbVgb20vO29
mam9GBrFhUODvdLr6e3HWk6+w5qhvEgBKvO9i8RNJZOZbt2wavZXrx5516k1ryzW
3BW3GkyJIgH1sX82kfz/Y/o5APw/CNRIkXZ3AAAAAElFTkSuQmCC}
},0,""},1,
{"Pattern"},"",2,0,1,
{8,
{372,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаВыполнитьВсеТестыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{245,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаКомандаВыполнитьВыделенныеТесты",
{1,0},1,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,1,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{373,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаКомандаВыполнитьВыделенныеТестыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{19,
{126,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ГруппаВнешниеИнструменты",
{1,1,
{"ru","Внешние инструменты"}
},
{1,1,
{"ru","Внешние инструменты"}
},1,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{6,
{4,0,
{0},"",-1,-1,1,0,""},
{0},2,3},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{71,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаГенераторМакетовДанных",
{1,0},1,
{7,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{375,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаГенераторМакетовДанныхExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{73,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаПоказатьГУИД",
{1,0},1,
{8,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{376,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаПоказатьГУИДExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{19,
{128,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ГруппаОПроекте",
{1,1,
{"ru","Группа о проекте"}
},
{1,1,
{"ru","Группа о проекте"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,
{0},2},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{70,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КомандаОПроекте",
{1,0},1,
{6,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{378,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомандаОПроектеExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},1,0,1,
{8,
{377,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаОПроектеExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},1,0,1,
{8,
{374,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаВнешниеИнструментыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{137,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаКомандаПерезагрузитьФорму",
{1,0},1,
{15,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{379,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаКомандаПерезагрузитьФормуExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{356,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаИзменитьФорму",
{1,0},1,
{0,198ea630-fda2-4cda-8a23-f999f4c67ee6},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{380,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаИзменитьФормуExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},1,0,0},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{19,
{124,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаДеревоТестов",
{1,1,
{"ru","Дерево тестов"}
},
{1,1,
{"ru","Дерево тестов"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0}
},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{19,
{36,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаПути",
{1,1,
{"ru","Группа пути"}
},
{1,1,
{"ru","Группа пути"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{17,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0}
},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{37,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ПутиНадпись",2,0,
{1,1,
{"ru","Пути"}
},
{1,0},
{1,
{4}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{3,0},1,0,2,2,1,2,1,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,3,
{-1}
},
{3,3,
{-1}
},
{7,1,60,
{0},700,0,0,0,1,100},0,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{38,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПутиНадписьКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{383,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПутиНадписьExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},1,0,1,
{8,
{382,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаПутиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},143c00f7-a42d-4cd7-9189-88e4467dc768,
{48,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,2,1,
{0,
{0,
{"B",1},0}
},"ДеревоТестов",0,0,1,
{1,0},
{1,0},
{2,
{1},
{0,74ab8988-f52c-40cb-9b09-66a817b93074}
},0,1,1,0,0,1,1,0,0,0,0,0,1,0,1,1,0,1,2,2,0,0,0,0,0,1,2,2,0,1,1,
{1,
{4,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{4,3,
{0},"",-1,-1,0,
{
{#base64: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}
},0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,1,0,
{0},
{0},1,
{19,
{2,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,0},4,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{39,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоТестовКонтекстноеМенюКомандаВыполнитьВыделенныеТесты",
{1,0},1,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64: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
7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJ
gUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5p
DoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85
ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7
F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/R
NtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9
MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo
1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5
sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWF
fevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTP
ZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJ
zs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ
+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3v
dy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtb
Ylu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ7
52PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7
nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9
zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9D
BY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfy
l5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT
0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADq
YAAAOpgAABdvkl/FRgAAAahJREFUeNrUkz9oU1EYxc/37k1ekj7UNmIQCi4iOBW6
FERMN/+BdlDQwbo66ebs6KpgqV3EVTq1BcFqEYyBGiO2tZaCLVI11vqSGJOXvNx3
7/1clSY6ZPJs33I4v8P5iJnRixz0qJ4N5O/HsezQgcGjwSm/RB93NryccKSVMQZo
N2axWNxtkBoIRs6Pp+/s3zfozT9eny4s1O9XtvpyDuK6m9EfCJY5FWntHspk5NUr
o5du3h56evYaz6QPV85EVsW1IrCl7gjWONxWhuut74iUwcH+PeLyheOnT2T9k/n8
hxevnv245294c2xlq2MCYwGlGFozlDb42SyjWvuEfk86F8+NZG/cOvJoeKw8KfvC
TOcEllBvhSgHZbSVBgOQQiDJCtu1ElZW/Z0va8mXJozVuiAQQmXRjEIYw0glEmgr
izfLn78VFppTpSVvkqK9JSFt5w6MBUWayXUlGppReOtXXj8PHmy/S05wI70pYgDF
bPcS2VIzbEMtr9Yo/6Tx8OuKe5cb6fdCAuTyv4fErcTi4mxwPaxGm6Y6kBOCQHH7
1yXS//9MvwYA7VrPBwpDNkQAAAAASUVORK5CYII=}
},0,""},1,
{"Pattern"},"",2,0,1,
{8,
{384,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюКомандаВыполнитьВыделенныеТестыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{80,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоТестовКонтекстноеМенюЗагрузитьТолькоВыделенныеТесты",
{1,0},1,
{11,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{385,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюЗагрузитьТолькоВыделенныеТестыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{189,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоТестовКонтекстноеМенюКомандаВыполнитьВыделенныеТестыСИсключением",
{1,0},1,
{17,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{386,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюКомандаВыполнитьВыделенныеТестыСИсключениемExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{25,
{300,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоТестовКонтекстноеМенюПоказатьОшибки",
{1,0},1,
{18,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{8,
{387,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКонтекстноеМенюПоказатьОшибкиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},
{"U"},1,0,0,1,0,0,0,3,3,3},1,0,0},1,
{19,
{3,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ДеревоТестовКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},0,1,0,0},14,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{20,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"ДеревоТестовСостояние",0,0,
{1,0},
{1,0},
{3,
{1},
{0,74ab8988-f52c-40cb-9b09-66a817b93074},
{5,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,1,0,0,1,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAAEAAAAAQCAYAAACm53kpAAAAAXNSR0IArs4c6QAA
AAlwSFlzAAALEwAACxMBAJqcGAAABCRpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAA
ADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhN
UCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3
LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpE
ZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0i
aHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICAgICAgICAgIHhtbG5z
OmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIgogICAgICAgICAg
ICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAg
ICAgICAgICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4w
LyI+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1
dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjU8L3RpZmY6Q29t
cHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjcyPC90aWZmOlhS
ZXNvbHV0aW9uPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9y
aWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj43MjwvdGlmZjpZ
UmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6UGl4ZWxYRGltZW5zaW9uPjY0PC9l
eGlmOlBpeGVsWERpbWVuc2lvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT4x
PC9leGlmOkNvbG9yU3BhY2U+CiAgICAgICAgIDxleGlmOlBpeGVsWURpbWVuc2lv
bj4xNjwvZXhpZjpQaXhlbFlEaW1lbnNpb24+CiAgICAgICAgIDxkYzpzdWJqZWN0
PgogICAgICAgICAgICA8cmRmOkJhZy8+CiAgICAgICAgIDwvZGM6c3ViamVjdD4K
ICAgICAgICAgPHhtcDpNb2RpZnlEYXRlPjIwMTUtMDMtMjBUMjI6MDM6MDI8L3ht
cDpNb2RpZnlEYXRlPgogICAgICAgICA8eG1wOkNyZWF0b3JUb29sPlBpeGVsbWF0
b3IgMy4zLjE8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgPC9yZGY6RGVzY3JpcHRp
b24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CjiAOxsAAAPbSURBVFgJ7VZr
aBRXFD6zs7uzrzzsNpJEzKZNWdMnoohNpZhYSputlZaoiP6TPjb4yyIi+Ns/Iukv
TZAWSn8aA0XqWilttDRNH1GIzcv1QTRsNmpTdnd2dmfuvHrO6MiyzK77q2CbC8O5
59xzzj3fd8+9DMDKWGFghYH/CgPsyJ79yt6tKSW+PeGESYn3JpS9b6bYkd377XXO
npTLZDI5CKYZN3HBcuK4oWg02l/uV0mPnYBBw4C4gQlcmMDlgqHEIag53rz8Cu6v
xwEeVcDxQ9zWqarx2se9KfOFzjFjenIDBAJJYejbmF0fgYdCMep5PnJVnbm5RTgz
tobWHAkg8LgQ9weD6IEz0wRJksi5JhIIfEu4Mb5zy0fgdXuBaQzOjn0B6eVMTSSY
l18bBE84Dqt34f5e3J8B3BsG0JaRhGsVSaCT5zlX1HiuY9ycnXlZ8dcv1Z8ajikH
9yUgc6/ZHVkzrSVvd0F9CMm5YJFTgYDrZjBUB3kEbSJ4DkkIIRlSXoRodJ1jjM00
yd7jYB744BNI/vUdMF0GL++D6LPvwslvTsOFw86kl8abl14yYe0BgMwVAAPBu5CE
xo0ACyeB656pur92cFeCU9Vms73jj+LcrU3ugNHCGULaHVk7wWZnYzxnXBO+vPi4
M1ylG5fOVVWzuo+jerELLb3UococOYOUNApZdhcK6n1Lkk72mgebx9PPA/BIAEnS
axjuz4djzHAvsbmbm4RX183ybZGfWGPjlDR9fTsLrVooBU/p3NVyCj6f1f72Najm
W7pGdz4j34AghRtYP9JMOtlrG+jIiQCBMLo/egMA9Sc3j5Xef+psLN3XnQ6kH0wa
um7g8DBR4lq+Ot9Vvr9jB6RSiyO6poLX4wFBECxJOtnLEzjpShZG/pwC8GLn0jNC
knSyO/mX2+7c10cgOwPgq3tIAknULXu5s4M+1901aOhCOrec4cXljBtkbUGWjL/v
7Hv/63L3SmfSNjo6OtDa2tpnBywuLo709PR8hvpd21ZFtr11FAaEBuijtqd3lMD/
cAxqjp8/0zkQWc33WfcGExD49t1zT4wn8Cxf2Bxqb/5FEbNvKLlCC9O5tBxugLCq
CGJG/vn1iclP7dorEUDrbfg12Y4oH+BXC3g75F+Pn9i84TTPlG3Ae84VVbU7EKj7
bf34r/0WKTmpvaAZU6Jc/LAp3PQ92anQagTYQJ4a+fuLHUsuf/CcrKjbQvUNj0ES
ACKhmM29nZfVHwuMvffOrXnrP8DxDXhqEJcVavq9A6KY2+EL+S/aJ2y7dF4a7+eE
wHkB9B3PrKo7YdtX5P+dgX8Ax9moY3JcXXwAAAAASUVORK5CYII=}
},0,""},0,0,0,
{1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,0,
{0},1,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{0}
},
{0},1,
{19,
{21,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовСостояниеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{398,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовСостояниеExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{40,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"ДеревоТестовМодульИлиФорма",0,0,
{1,0},
{1,0},
{3,
{1},
{0,74ab8988-f52c-40cb-9b09-66a817b93074},
{8,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,1,0,0,1,
{4,3,
{0},"",-1,-1,0,
{
{#base64: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
7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJ
gUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5p
DoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85
ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7
F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/R
NtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9
MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo
1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5
sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWF
fevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTP
ZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJ
zs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ
+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3v
dy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtb
Ylu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ7
52PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7
nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9
zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9D
BY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfy
l5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT
0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADq
YAAAOpgAABdvkl/FRgAAAsBJREFUeNrUljFoFFEQhr9LVjMLJ96CyC5G4xMFLypk
AxZJZ8DCYEANNhEESRk7LVNql3QG0gQrbQ0opLtGyFlIrrCIILiKgRwksNvtGDdZ
i71sNHcRxbsi08z++97s/DPzfvYV0jTlMJvVrg9V3tXSYEOBGLB/WWmNbUImxkYL
AHPPX6YvPoTo92yHdAu6rXlEKzzuw6MHk4W2FRBsKJM3h/56//TMHIxlz6tr65gC
aI8iBUHTCDkiaHowDuql9k4g6yzMLVYpXzCYYkw9qBPvxNhddu5d42L6zG+Rw4M+
E6Mj/5Rtema23QVkx2Tq1t4U9hP9kz2crxCKjSMlEAHLhiRu8roZEX+s0N8r7S4g
s7k3NQaNhylB8CWAH8ARcm/OGtxTblPcelBj+v4dSJQnSzUe3ygjljD9apknt300
CZlZWmX0vFAB4kQ7U8DUTT9/bkX0IPP8ERY+AZaDd9Hnxbes42ZgmIVPcf6+uhkB
q4B0RgOzizV842FKMcHn+t5yGkPBxpwzmL7mwmbu+ugW6JaC5UICcrQ1do/7ndGA
bsPUWEZEjoJz0jSS8ptvZdINyytVNAwxFwyCEKI4vWXCtdUcizho0cW2OqSB2VdV
yqddTBGCr0FGrgt0Z0/Y/qVmces29F8eyv8aMYqDECfguOU93Ci2IxrQLZi8PkSM
YiOUek1Oxm4ktxtkW9lKtUK0Wce/6mcdL3qIJYRR8wQ6poFnr6v097q4x5T6t3XY
UegS4kSxLcE97TE8UG4OT8BcGUYTBQuiJKMYaYQUvQxbQpQoXgKgHdDAlnLvWhlt
JHNOeIhFjjVRxMrINmmgB4wrjWtDdkwyL/smJkg3ndGAe1woFaUp+S7eHbt07yPf
pTydX/iF4m5/D8au6wBQaNdttPK+llberkDe8UanD8CDZzwmxrPL3P9Y4bBfp38O
ABGmMsc72DG0AAAAAElFTkSuQmCC}
},0,""},0,0,0,
{1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,0,
{0},1,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{0}
},
{0},1,
{19,
{41,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовМодульИлиФормаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{399,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовМодульИлиФормаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{4,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовИмя",1,0,
{1,0},
{1,0},
{3,
{1},
{0,74ab8988-f52c-40cb-9b09-66a817b93074},
{1,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{5,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовИмяКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{400,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовИмяExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{68,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовКоличествоТестов",1,0,
{1,1,
{"ru","Кол-во"}
},
{1,0},
{3,
{1},
{0,74ab8988-f52c-40cb-9b09-66a817b93074},
{14,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{3,0},7,0,0,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{69,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовКоличествоТестовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{401,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовКоличествоТестовExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{6,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовВремяВыполнения",1,0,
{1,0},
{1,0},
{3,
{1},
{0,74ab8988-f52c-40cb-9b09-66a817b93074},
{2,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,0,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,1,
{"ru","ЧН=-"}
},
{1,1,
{"ru","ЧН=-"}
},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{7,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовВремяВыполненияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{402,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовВремяВыполненияExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{26,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",0},0}
},2,"ДеревоТестовТестовыйСлучайОбъектИмя",1,0,
{1,0},
{1,0},
{3,
{1},
{0,74ab8988-f52c-40cb-9b09-66a817b93074},
{6,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{27,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовТестовыйСлучайОбъектИмяКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{403,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовТестовыйСлучайОбъектИмяExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{48,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовТипСтроки",1,0,
{1,0},
{1,0},
{3,
{1},
{0,74ab8988-f52c-40cb-9b09-66a817b93074},
{4,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{49,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовТипСтрокиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{404,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовТипСтрокиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{52,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовТестовыйСлучайОбъектМетаданныхИмя",1,0,
{1,0},
{1,0},
{3,
{1},
{0,74ab8988-f52c-40cb-9b09-66a817b93074},
{6,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{53,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовТестовыйСлучайОбъектМетаданныхИмяКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{405,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовТестовыйСлучайОбъектМетаданныхИмяExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{54,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестов_GUID",1,0,
{1,0},
{1,0},
{3,
{1},
{0,74ab8988-f52c-40cb-9b09-66a817b93074},
{7,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{55,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестов_GUIDКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{406,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестов_GUIDExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{58,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовПараметрыТеста",1,0,
{1,0},
{1,0},
{3,
{1},
{0,74ab8988-f52c-40cb-9b09-66a817b93074},
{9,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{59,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовПараметрыТестаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{407,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовПараметрыТестаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{60,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ДеревоТестовЕстьПараметрыТеста",1,0,
{1,0},
{1,0},
{3,
{1},
{0,74ab8988-f52c-40cb-9b09-66a817b93074},
{10,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{0},1,
{19,
{61,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовЕстьПараметрыТестаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{408,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовЕстьПараметрыТестаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{62,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовИмяТестовогоСлучая",1,0,
{1,0},
{1,0},
{3,
{1},
{0,74ab8988-f52c-40cb-9b09-66a817b93074},
{11,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{63,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовИмяТестовогоСлучаяКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{409,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовИмяТестовогоСлучаяExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{66,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовПолныйПуть",1,0,
{1,0},
{1,0},
{3,
{1},
{0,74ab8988-f52c-40cb-9b09-66a817b93074},
{3,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{67,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовПолныйПутьКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{410,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовПолныйПутьExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{64,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоТестовПредставлениеПути",1,0,
{1,0},
{1,0},
{3,
{1},
{0,74ab8988-f52c-40cb-9b09-66a817b93074},
{12,5bdad865-f2c5-434b-8041-ba4aad3b6687}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{30,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0},
{0},1,
{19,
{65,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоТестовПредставлениеПутиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{411,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовПредставлениеПутиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},2,2,1,0,
{"Pattern"},"","",2,2,0,1,
{8,
{388,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},1,1,1,1,
{3,
{389,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовSearchString",
{1,0},
{1,0},1,1,0,1,
{0,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0}
},1,
{19,
{390,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоТестовSearchStringContextMenu",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{8,
{391,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовSearchStringExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},2,
{1,0},0},1,
{3,
{392,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ДеревоТестовViewStatus",
{1,0},
{1,0},1,1,0,1,
{0,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0}
},1,
{19,
{393,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоТестовViewStatusContextMenu",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{8,
{394,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовViewStatusExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},2,
{1,1},0},1,
{3,
{395,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоТестовSearchControl",
{1,0},
{1,0},1,1,0,1,
{0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0}
},1,
{19,
{396,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоТестовSearchControlContextMenu",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{8,
{397,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоТестовSearchControlExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0},2,
{1,2},0},0},1,0,1,
{8,
{381,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаДеревоТестовExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{32,
{129,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ИндикаторВыполнения",0,0,
{1,0},
{1,0},
{1,
{16}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{3,32,1,1,0,0,100,0,0,1,
{3,4,
{0}
}
},
{0},1,
{19,
{130,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ИндикаторВыполненияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{8,
{412,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ИндикаторВыполненияExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},"","",1,
{19,
{0},0,0,1,
{0,
{0,
{"B",1},0}
},7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{8,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},1,"",2,0,1,
{19,
{0},0,0,0,7,"LeftCaptionButtons",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{8,
{0},0,0,0,0,"LeftCaptionButtonsExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},1,
{19,
{0},0,0,0,7,"RightCaptionButtons",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{8,
{0},0,0,0,0,"RightCaptionButtonsExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
}
},"
&НаКлиенте
Перем MiddleMan;

&НаКлиенте
Перем СоответствиеСтатусовДляTeamCity;

&НаКлиенте
Перем кэшТестовыхОбработок;

////////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙС АВТОМАТИЧЕСКИХ ТЕСТОВ

//#Область ИнтерфейсАвтоматическихТестов

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПРОВЕДЕНИЯ ТЕСТИРОВАНИЯ 

//#Область СлужебныеПроцедурыИФункцииДляПроведенияТестирования

// { функции утверждения- проверки значений. 

&НаКлиенте
Процедура Проверить(_Истина, ДопСообщениеОшибки = """") Экспорт
	Если Не _Истина Тогда
		СообщениеОшибки = ""Переданный параметр (""+Формат(_Истина, ""БЛ=ложь; БИ=истина"")+"") не является Истиной, а хотели, чтобы являлся."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИстину(_Истина, ДопСообщениеОшибки = """") Экспорт
	Проверить(_Истина, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЛожь(_Ложь, ДопСообщениеОшибки = """") Экспорт
	Если _Ложь Тогда
		СообщениеОшибки = ""Переданный параметр (""+Формат(_Ложь, ""БЛ=ложь; БИ=истина"")+"") не является Ложью, а хотели, чтобы являлся."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДату(_Дата, _Период, ДопСообщениеОшибки = """") Экспорт
	Если _Дата < _Период.ДатаНачала или _Дата > _Период.ДатаОкончания Тогда
		представление = ПредставлениеПериода(_Период.ДатаНачала, _Период.ДатаОкончания, ""ФП = Истина"");
		СообщениеОшибки = ""Переданный параметр (""+Формат(_Дата, ""ДФ='dd.MM.yyyy HH:mm:ss'"")+"") не входит в период ""+представление+"", а хотели, чтобы являлся."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенствоДатСТочностью2Секунды(_Дата, _Дата2, ДопСообщениеОшибки = """") Экспорт
	Если _Дата < _Дата2-2 или _Дата > _Дата2+2 Тогда
		СообщениеОшибки = ""Переданная дата (""+Формат(_Дата, ""ДФ='dd.MM.yyyy HH:mm:ss'"")+"") не равна дате (""+Формат(_Дата2, ""ДФ='dd.MM.yyyy HH:mm:ss'"")+"") с точностью до 2-х секунд, а хотели, чтобы они равнялись."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенство(_1, _2, ДопСообщениеОшибки = """") Экспорт
	Если _1 <> _2 Тогда
		СообщениеОшибки = ""Сравниваемые значения (""+_1+""; ""+_2+"") не равны, а хотели, чтобы были равны."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеРавенство(_1, _2, ДопСообщениеОшибки = """") Экспорт
	Если _1 = _2 Тогда
		СообщениеОшибки = ""Сравниваемые значения (""+_1+""; ""+_2+"") равны, а хотели, чтобы были не равны."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольше(_Больше, _Меньше, ДопСообщениеОшибки = """") Экспорт
	Если _Больше <= _Меньше Тогда
		СообщениеОшибки = ""Первый параметр (""+_Больше+"") меньше или равен второму (""+_Меньше+"") а хотели, чтобы был больше."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольшеИлиРавно(_Больше, _Меньше, ДопСообщениеОшибки = """") Экспорт
	Если _Больше < _Меньше Тогда
		СообщениеОшибки = ""Первый параметр (""+_Больше+"") меньше второго (""+_Меньше+"") а хотели, чтобы был больше или равен."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньше(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = """") Экспорт
	Если проверяемоеЗначение1 >= проверяемоеЗначение2 Тогда
		СообщениеОшибки = ""Значение <""+проверяемоеЗначение1+""> больше или равно, чем <""+проверяемоеЗначение2+"">, а ожидалось меньше""+
				ФорматДСО(СообщениеОбОшибке);
		ВызватьОшибкуПроверки(СообщениеОшибки)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньшеИлиРавно(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = """") Экспорт
	Если проверяемоеЗначение1 > проверяемоеЗначение2 Тогда
		СообщениеОшибки = ""Значение <""+проверяемоеЗначение1+""> больше, чем <""+проверяемоеЗначение2+"">, а ожидалось меньше или равно""+
				ФорматДСО(СообщениеОбОшибке);
		ВызватьОшибкуПроверки(СообщениеОшибки)
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнилось(Знач СтрокаАлгоритм, ПараметрыИлиДопСообщениеОшибки = Неопределено, Знач ДопСообщениеОшибки = """") Экспорт
	Перем Параметры;
	
	Если ТипЗнч(ПараметрыИлиДопСообщениеОшибки) = Тип(""Строка"") Тогда
		ДопСообщениеОшибки = ПараметрыИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиДопСообщениеОшибки;
	КонецЕсли;
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОшибки = ""Хотели, чтобы алгоритм """"""+СтрокаАлгоритм+"""""" выполнился, а он упал с ошибкой """"""+ПолученноеОписаниеОшибки+""""""."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодВыполнился(Объект, Знач ИмяМетода, ПараметрыИлиДопСообщениеОшибки = Неопределено, Знач ДопСообщениеОшибки = """") Экспорт
	Перем Параметры;
	
	Если ТипЗнч(ПараметрыИлиДопСообщениеОшибки) = Тип(""Строка"") Тогда
		ДопСообщениеОшибки = ПараметрыИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиДопСообщениеОшибки;
		Если Параметры <> Неопределено Тогда
			ТипПараметра = ТипЗнч(Параметры);
			Если ТипПараметра <> Тип(""Массив"") Тогда
				ВызватьИсключение (""Ожидали, что вторым параметром будет передан массив параметров для метода <""+ИмяМетода+"">, а получили другой объект с типом <""+ТипПараметра+"">"");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСтрока = ПараметрыСтрокой(Параметры);
	
	СтрокаВыполнения = ""Объект."" + ИмяМетода + ""("" + ПараметрыСтрока + "")"";
	
	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОшибки = ""Хотели, чтобы код """"""+СтрокаВыполнения+"""""" выполнился, а он упал с ошибкой """"""+ПолученноеОписаниеОшибки+""""""."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыСтрокой(Параметры, ИмяПеременной = ""Параметры"")
	
	ПараметрыСтрока = """";
	Если Параметры <> Неопределено Тогда
		Если ТипЗнч(Параметры) = Тип(""Массив"") Тогда
			Для Индекс = 0 По Параметры.ВГраница() Цикл 
				ПараметрыСтрока = ПараметрыСтрока + "", "" + ИмяПеременной + ""["" + Формат(Индекс, ""ЧН=0; ЧГ=0"") + ""]"";
			КонецЦикла;
			ПараметрыСтрока = Сред(ПараметрыСтрока, 3);
		Иначе
			ПараметрыСтрока = ИмяПеременной;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыСтрока;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНеВыполнилось(Знач СтрокаАлгоритм, ПараметрыИлиОжидаемоеОписаниеОшибки, Знач ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки = """", Знач ДопСообщениеОшибки = """") Экспорт
	Перем Параметры, ОжидаемоеОписаниеОшибки; 
	Если ТипЗнч(ПараметрыИлиОжидаемоеОписаниеОшибки) = Тип(""Строка"") Тогда
		ОжидаемоеОписаниеОшибки = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ДопСообщениеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ОжидаемоеОписаниеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	КонецЕсли;
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ВызватьОшибкуПроверки(""Хотели, чтобы алгоритм """"""+СтрокаАлгоритм+"""""" упал с сообщением об ошибке """"""+ОжидаемоеОписаниеОшибки+"""""", а он упал с сообщением """"""+ПолученноеОписаниеОшибки+""""""."" + ФорматДСО(ДопСообщениеОшибки));
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	ВызватьОшибкуПроверки(""Хотели, чтобы алгоритм """"""+СтрокаАлгоритм+"""""" упал, а он выполнился"" + ФорматДСО(ДопСообщениеОшибки));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодНеВыполнился(Объект, ИмяМетода, ПараметрыИлиОжидаемоеОписаниеОшибки, Знач ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки = """", Знач ДопСообщениеОшибки = """") Экспорт
	Перем Параметры, ОжидаемоеОписаниеОшибки; 
	
	Если ТипЗнч(ПараметрыИлиОжидаемоеОписаниеОшибки) = Тип(""Строка"") Тогда
		ОжидаемоеОписаниеОшибки = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ДопСообщениеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиОжидаемоеОписаниеОшибки;
		Если Параметры <> Неопределено Тогда
			ТипПараметра = ТипЗнч(Параметры);
			Если ТипПараметра <> Тип(""Массив"") Тогда
				ВызватьИсключение (""Ожидали, что третьим параметром будет передан массив параметров для метода <""+ИмяМетода+"">, а получили другой объект с типом <""+ТипПараметра+"">"");
			КонецЕсли;
		КонецЕсли;
		ОжидаемоеОписаниеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	КонецЕсли;
	
	ПараметрыСтрока = ПараметрыСтрокой(Параметры);
	
	СтрокаВыполнения = ""Объект."" + ИмяМетода + ""("" + ПараметрыСтрока + "")"";
	
	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ВызватьОшибкуПроверки(""Хотели, чтобы код """"""+СтрокаВыполнения+"""""" упал с сообщением об ошибке """"""+ОжидаемоеОписаниеОшибки+"""""", а он упал с сообщением """"""+ПолученноеОписаниеОшибки+""""""."" + ФорматДСО(ДопСообщениеОшибки));
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	ВызватьОшибкуПроверки(""Хотели, чтобы код """"""+СтрокаВыполнения+"""""" упал, а он выполнился"" + ФорматДСО(ДопСообщениеОшибки));
	
КонецПроцедуры

// проверка идет через ЗначениеЗаполнено, но мутабельные значение всегда считаем заполненными
&НаКлиенте
Процедура ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = """") Экспорт
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		Возврат;
	КонецПопытки;
	Если НЕ фЗаполнено Тогда
		ВызватьОшибкуПроверки(""Значение (""+ПроверяемоеЗначение+"") не заполнено, а ожидалась заполненность"" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = """") Экспорт
	СообщениеОшибки = ""Значение (""+ПроверяемоеЗначение+"") заполнено, а ожидалась незаполненность"" + ФорматДСО(ДопСообщениеОшибки);
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецПопытки;
	Если фЗаполнено Тогда
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТип(значение, ТипИлиИмяТипа, ДопСообщениеОшибки = """") Экспорт
	Если ТипЗнч(ТипИлиИмяТипа) = Тип(""Строка"") Тогда
		искомыйТип = Тип(ТипИлиИмяТипа);
	ИначеЕсли ТипЗнч(ТипИлиИмяТипа) = Тип(""Тип"") Тогда
		искомыйТип = ТипИлиИмяТипа;
	Иначе
		ВызватьИсключение (""ПроверитьТип: Тип значения параметра ТипИлиИмяТипа должен быть <Тип> или <Строка>, а получили <""+ ТипЗнч(ТипИлиИмяТипа) + "">"" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
	Если ТипЗнч(значение) <> искомыйТип Тогда
		ВызватьОшибкуПроверки(""Типом значения <""+значение+""> является <""+ТипЗнч(значение)+"">, а ожидался тип <""+ТипИлиИмяТипа+"">.""+ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВхождение(строка, подстрокаПоиска, ДопСообщениеОшибки = """") Экспорт
	Если Найти(строка, подстрокаПоиска) = 0 Тогда
		ПредставлениеСтроки = ""<""+строка+"">"";
		Если СтрДлина(строка) > 20 Тогда
			ПредставлениеСтроки = ПредставлениеСтроки + Символы.ПС;
		КонецЕсли;
		ПредставлениеПодСтроки = ""<""+подстрокаПоиска+"">"";
		Если СтрДлина(подстрокаПоиска) > 20 Тогда
			ПредставлениеПодСтроки = ПредставлениеПодСтроки + Символы.ПС;
		КонецЕсли;
		СообщениеОшибки = ""Искали в ""+ПредставлениеСтроки+"" подстроку ""+ПредставлениеПодСтроки+"", но не нашли."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

//Коллекция - Массив, Структура, Соответствие, ФиксированныйМассив, ФиксированнаяСтруктура, ФиксированноеСоответствие, СписокЗначений
&НаКлиенте
Процедура ПроверитьВхождениеВКоллекцию(Элемент, Коллекция, ДопСообщениеОшибки = """") Экспорт
	Нашли = Неопределено;
	ТипКоллекции = ТипЗнч(Коллекция);
	Если ТипКоллекции = Тип(""Массив"") или ТипКоллекции = Тип(""ФиксированныйМассив"") Тогда
		Нашли = Коллекция.Найти(Элемент) <> Неопределено;
	ИначеЕсли ТипКоллекции = Тип(""Структура"") или ТипКоллекции = Тип(""Соответствие"") 
			или ТипКоллекции = Тип(""ФиксированнаяСтруктура"") или ТипКоллекции = Тип(""ФиксированноеСоответствие"") Тогда
		Для каждого КлючЗначение Из Коллекция Цикл
			Нашли = КлючЗначение.Значение = Элемент;
			Если Нашли Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипКоллекции = Тип(""СписокЗначений"") Тогда
		Нашли = Коллекция.НайтиПоЗначению(Элемент) <> Неопределено;
	КонецЕсли;
	Если Нашли = Неопределено Тогда
		СообщениеОшибки = ""Утверждение """"ПроверитьВхождениеВКоллекцию"""" не умеет работать с типом коллекции <""+ТипКоллекции+"">."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение СообщениеОшибки;
	КонецЕсли;
	Если Не Нашли Тогда
		СообщениеОшибки = ""Не нашли элемент <""+Элемент+""> в коллекции, а хотели, чтобы он был в коллекции."" + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки = """") Экспорт
	ПроверитьВалидностьЗапросаСКДНаСервере(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

// Только для внутреннего использования
&НаСервере
Процедура ПроверитьВалидностьЗапросаСКДНаСервере(ТекстЗапроса, ДопСообщениеОшибки = """")
	Объект().ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, Знач ДопСообщениеОшибки = """") Экспорт
	ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениямСервер(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки, ДопСообщениеОшибки);
КонецПроцедуры

&НаСервере
Процедура ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениямСервер(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, Знач ДопСообщениеОшибки = """") Экспорт
	Объект().ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОшибкуПроверки(СообщениеОшибки)
	
	Префикс = ""["" + СтатусыРезультатаТестирования.ОшибкаПроверки + ""]"";
	ВызватьИсключение Префикс + "" "" + СообщениеОшибки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьТест(Знач Сообщение = """") Экспорт
	
	Префикс = ""["" + СтатусыРезультатаТестирования.ТестПропущен + ""]"";
	Если ПустаяСтрока(Сообщение) Тогда
		Сообщение = НСтр(""ru = 'Тест пропущен'"");
	КонецЕсли;
	ВызватьИсключение Префикс + "" "" + Сообщение;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКонтекст(Знач ИдентификаторКонтекста = Неопределено) Экспорт
	Перем Контекст;
	
	Если ИдентификаторКонтекста = Неопределено Тогда
		ИдентификаторКонтекста = ИдентификаторПустогоКонтекста();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Мир) Или Не Объект.Мир.Свойство(ИдентификаторКонтекста, Контекст) Тогда
		ТекстОшибки = СтрЗаменить(НСтр(""ru = 'Отсутствует запрашиваемый контекст%1.'""), ""%1"", ?(ИдентификаторКонтекста = ИдентификаторПустогоКонтекста(), """", "" ("" + ИдентификаторКонтекста + "")""));
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Контекст;
	
КонецФункции

&НаКлиенте
Процедура УстановитьКонтекст(Контекст, Знач ИдентификаторКонтекста = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Мир) Тогда
		Объект.Мир = Новый Структура;
	КонецЕсли;
	
	Если ИдентификаторКонтекста = Неопределено Тогда
		ИдентификаторКонтекста = ИдентификаторПустогоКонтекста();
	КонецЕсли;
	
	Объект.Мир.Вставить(ИдентификаторКонтекста, Контекст);
	
КонецПроцедуры

&НаКлиенте
Функция КонтекстУстановлен(Знач ИдентификаторКонтекста = Неопределено) Экспорт
	
	Если ИдентификаторКонтекста = Неопределено Тогда
		ИдентификаторКонтекста = ИдентификаторПустогоКонтекста();
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(Объект.Мир) И Объект.Мир.Свойство(ИдентификаторКонтекста);
	
КонецФункции

&НаКлиенте
Процедура УдалитьКонтекст(Знач ИдентификаторКонтекста = Неопределено) Экспорт
	
	Если ИдентификаторКонтекста = Неопределено Тогда
		ИдентификаторКонтекста = ИдентификаторПустогоКонтекста();
	КонецЕсли;
	
	Если КонтекстУстановлен(ИдентификаторКонтекста) Тогда
		Объект.Мир.Удалить(ИдентификаторКонтекста);
	КонецЕсли;
	
КонецПроцедуры

// создается копия данных текущего теста - структура ""Имя, ПолныйПуть, СостояниеТеста""
&НаКлиенте
Функция ДанныеТекущегоТеста() Экспорт
	
	ИдентификаторКонтекста = ИдентификаторКонтекстаДанныхТекущегоТеста();
	Если Не КонтекстУстановлен(ИдентификаторКонтекста) Тогда
		ВызватьИсключение НСтр(""ru = 'Нельзя получить данные текущего теста вне режима тестирования'"");
	КонецЕсли;
	
	ДанныеТекущегоТеста = ПустыеДанныеТекущегоТеста();
	ЗаполнитьЗначенияСвойств(ДанныеТекущегоТеста, ПолучитьКонтекст(ИдентификаторКонтекста));
	
	Возврат ДанныеТекущегоТеста;
	
КонецФункции

// }

//#КонецОбласти

//#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем версию платформы для определения вызова процедур\функций для 8.2 или 8.3
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = Лев(СистемнаяИнформация.ВерсияПриложения, 3);
	ЕстьПоддержкаНемодальныхФорм = (СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, ""8.3.3.641"") >= 0);
	ЕстьПоддержкаАсинхронныхВызовов = (СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, ""8.3.5.1383"") >= 0)
		И Вычислить(""Метаданные.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент <> Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент.Использовать"");
	
	ИнициализироватьНастройки();
	
	ОбъектНаСервере = Объект();
	ЭтаФорма.Заголовок = ОбъектНаСервере.ЗаголовокФормы();
	
	ЭтоВстроеннаяОбработка = ОбъектНаСервере.ЭтоВстроеннаяОбработка;
	Если Не ЭтоВстроеннаяОбработка Тогда
		ИспользуемоеИмяФайла = ОбъектНаСервере.ИспользуемоеИмяФайла;
	КонецЕсли;
	УстановитьПоУмолчаниюОбработчикКоманды_ЗагрузитьТесты();
	
	ЗапретИспользованияИнформатора = Истина;
	
	БылаОшибкаПриПредыдущейЗагрузке = ОбъектНаСервере.СохраненнаяНастройка_БылаОшибкаПриПредыдущейЗагрузке();
	ОбъектНаСервере.УстановитьНастройку_БылаОшибкаПриПредыдущейЗагрузке(Истина);
	
	Если ЗначениеЗаполнено(Параметры.Пути) Тогда
		Пути.ЗагрузитьЗначения(Параметры.Пути.ВыгрузитьЗначения());
	КонецЕсли;
	
	ЗначенияСостоянияТестов = ОбъектНаСервере.мЗначенияСостоянияТестов;
	ЗначенияТиповСтроки = ОбъектНаСервере.мЗначенияТиповСтроки;
	ЗначениеМодульИлиФорма = ОбъектНаСервере.мЗначениеМодульИлиФорма;
	СтатусыРезультатаТестирования = ОбъектНаСервере.СтатусыРезультатаТестирования;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПоУмолчаниюОбработчикКоманды_ЗагрузитьТесты()
	Перем Команда;
	
	Если ЭтоВстроеннаяОбработка Тогда
		Команда = Команды.КомандаЗагрузитьТестыИзКонфигурацииПоИмени;
	Иначе
		Команда = Команды.КомандаЗагрузитьТестовыйНабор;
	КонецЕсли;
	
	Элементы.ФормаЗагрузитьТестыПоУмолчанию.ИмяКоманды = Команда.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СоздатьСоответствиеСтатусовДляTeamCity();
	
	Если ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = КодВозвратаДиалога.Нет;
	Если ЗначениеЗаполнено(Пути) Тогда
		
		Если БылаОшибкаПриПредыдущейЗагрузке Тогда
			Текст = НСтр(""ru = 'Возникла ошибка при предыдущей загрузке тестов. Хотите отменить загрузку тестов?'"");
			Если ЕстьПоддержкаНемодальныхФорм Тогда
				Оповещение = Вычислить(""Новый ОписаниеОповещения(""""ПриОткрытииПослеВопросаОбОтменеЗагрузкиТестов"""", ЭтаФорма)"");
				Выполнить(""ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет)"");
				Возврат;
			Иначе
				Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, 0);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПриОткрытииПослеВопросаОбОтменеЗагрузкиТестов(Ответ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииПослеВопросаОбОтменеЗагрузкиТестов(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Пути.Очистить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пути) Тогда
		
		ОбновитьНадписьПути();
		
		Попытка
			LoadAllTests();
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ТекстСообщения = НСтр(""ru='ОШИБКА загрузки тестов: %ТекстОшибки%'; en='Error loading testcases: %ТекстОшибки%'"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%ТекстОшибки%"", ТекстОшибки); 
			ВывестиСообщение(ТекстСообщения);
			
		КонецПопытки;
		
	КонецЕсли;
	
	СброситьПризнак_БылаОшибкаПриПредыдущейЗагрузкеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСоответствиеСтатусовДляTeamCity()

	//{ Соответствие Статуса сообщения 1с Статусу в Buildlog TeamCity
	СоответствиеСтатусовДляTeamCity = Новый Соответствие;
	СоответствиеСтатусовДляTeamCity.Вставить(СтатусСообщения.БезСтатуса,""NORMAL"");
	СоответствиеСтатусовДляTeamCity.Вставить(СтатусСообщения.Обычное,""NORMAL"");
	СоответствиеСтатусовДляTeamCity.Вставить(СтатусСообщения.Информация,""NORMAL"");
	СоответствиеСтатусовДляTeamCity.Вставить(СтатусСообщения.Внимание,""WARNING"");
	СоответствиеСтатусовДляTeamCity.Вставить(СтатусСообщения.Важное,""FAILURE"");
	СоответствиеСтатусовДляTeamCity.Вставить(СтатусСообщения.ОченьВажное,""ERROR"");
	СоответствиеСтатусовДляTeamCity = Новый ФиксированноеСоответствие(СоответствиеСтатусовДляTeamCity);
	//} Соответствие Статуса сообщения 1с Статусу в Buildlog TeamCity
КонецПроцедуры

// Обработка оповещений о загрузке или ходе выполнения тестов.
// 
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Возможные события:
	// 		xUnitFor1C.TestLoaded
	// 		xUnitFor1C.TestPassed
	// 		xUnitFor1C.TestNotInplemented
	// 		xUnitFor1C.TestFailed
	
	Если ИмяСобытия = ""xUnitFor1C.TestPassed"" Тогда
		
		ИндикаторВыполнения = ИндикаторВыполнения + 1; //Элементы.ИндикаторВыполнения.Значение = Элементы.ИндикаторВыполнения.Значение + 1;
		
	ИначеЕсли ИмяСобытия = ""xUnitFor1C.TestNotImplemented"" Тогда
		
		ИндикаторВыполнения = ИндикаторВыполнения + 1; //Элементы.ИндикаторВыполнения.Значение = Элементы.ИндикаторВыполнения.Значение + 1;
		
		Если Элементы.ИндикаторВыполнения.ЦветРамки <> WebЦвета.Красный Тогда
			Элементы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Золотой;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = ""xUnitFor1C.TestFailed"" Тогда
		
		ИндикаторВыполнения = ИндикаторВыполнения + 1; //Элементы.ИндикаторВыполнения.Значение = Элементы.ИндикаторВыполнения.Значение + 1;
		Элементы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Красный;
		
	ИначеЕсли ИмяСобытия = ""xUnitFor1C.LoadSubSystem"" Тогда
		
		Если ТипЗнч(Параметр) = Тип(""Строка"") И НЕ ПустаяСтрока(Параметр)  Тогда
			
			Пути.Очистить();
			Пути.Добавить(Параметр);
			ОбновитьНадписьПути();
			LoadAllTests();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если Не ЭтоЗапускВПакетномРежиме Тогда
		СохранитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

//#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЦЫ ФОРМЫ ДЕРЕВОТЕСТОВ

//#Область ОбработчикиТаблицыФормы_ДеревоТестов

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ВключаяПодчиненные = Ложь)
	
	Для Каждого СтрокаДерева Из Объект.ДеревоТестов.ПолучитьЭлементы() Цикл
		Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
		Элементы.ДеревоТестов.Развернуть(Идентификатор, ВключаяПодчиненные);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(СтрокиДереваТестов, ОставитьРазвернутым)
	
	ЭлементДеревоТестов = Элементы.ДеревоТестов;
	Для Каждого СтрокаДерева из СтрокиДереваТестов Цикл
		Если Не ОставитьРазвернутым Тогда
			Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
			Если СтрокаДерева.Состояние = ЗначенияСостоянияТестов.Сломался
			 Или СтрокаДерева.Состояние = ЗначенияСостоянияТестов.НеРеализован Тогда
				ЭлементДеревоТестов.Развернуть(Идентификатор, Ложь);
			ИначеЕсли СтрокаДерева.Состояние <> ЗначенияСостоянияТестов.НеВыполнялся Тогда
				ЭлементДеревоТестов.Свернуть(Идентификатор);
			КонецЕсли;
		КонецЕсли;
		СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(СтрокаДерева.ПолучитьЭлементы(), Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеВыполненияРодителей(СтрокаДереваТестов)
	
	СтрокаРодителя = СтрокаДереваТестов.ПолучитьРодителя();
	Если СтрокаРодителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдушееСостояние = СтрокаРодителя.Состояние;
	Состояние = ЗначенияСостоянияТестов.НеВыполнялся;
	Для Каждого Строка Из СтрокаРодителя.ПолучитьЭлементы() Цикл
		Если Строка.Состояние = ЗначенияСостоянияТестов.НеВыполнялся Тогда
			Состояние = ЗначенияСостоянияТестов.НеВыполнялся;
			Прервать;
		КонецЕсли;
		ЗапомнитьСамоеХудшееСостояние(Состояние, Строка.Состояние);
	КонецЦикла;
	Если ПредыдушееСостояние <> Состояние Тогда
		СтрокаРодителя.Состояние = Состояние;
		ИзменитьСостояниеВыполненияРодителей(СтрокаРодителя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВремяВыполненияРодителей(СтрокаДереваТестов)
	
	СтрокаРодителя = СтрокаДереваТестов.ПолучитьРодителя();
	Если СтрокаРодителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВремяВыполнения = 0;
	Для Каждого Строка Из СтрокаРодителя.ПолучитьЭлементы() Цикл
		ВремяВыполнения = ВремяВыполнения + Строка.ВремяВыполнения;
	КонецЦикла;
	Если СтрокаРодителя.ВремяВыполнения <> ВремяВыполнения Тогда
		СтрокаРодителя.ВремяВыполнения = ВремяВыполнения;
		ИзменитьВремяВыполненияРодителей(СтрокаРодителя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустуюСтрокуДерева(СтрокаТеста, РодительскаяСтрока)
	Если СтрокаТеста <> Неопределено И СтрокаТеста.ПолучитьЭлементы().Количество() = 0 Тогда
		Если РодительскаяСтрока <> Неопределено Тогда
			РодительскаяСтрока.ПолучитьЭлементы().Удалить(СтрокаТеста);
		Иначе
			Объект.ДеревоТестов.ПолучитьЭлементы().Удалить(СтрокаТеста);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеСтрокиКаталогов(СтрокиДерева)
	
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ТипСтроки = ЗначенияТиповСтроки.КаталогТестов Тогда
			УдалитьПустыеСтрокиКаталогов(СтрокаДерева.ПолучитьЭлементы());
			Если СтрокаДерева.ПолучитьЭлементы().Количество() = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из УдаляемыеСтроки Цикл
		СтрокиДерева.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(РодительскаяСтрока)
	коллекцияСтрок = РодительскаяСтрока.ПолучитьЭлементы();
	Если коллекцияСтрок.Количество() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	количествоТестов = 0;
	Для каждого СтрокаДерева из коллекцияСтрок Цикл
		лКоличество = ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(СтрокаДерева);
		СтрокаДерева.КоличествоТестов = лКоличество;
		количествоТестов = количествоТестов + лКоличество;
	КонецЦикла;
	Возврат количествоТестов;
КонецФункции

&НаСервере
Процедура УпорядочитьСтрокиДереваТестов()
	
	Дерево = РеквизитФормыВЗначение(""Объект.ДеревоТестов"");
	Объект().УпорядочитьСтрокиДереваТестов(Дерево);
	ЗначениеВРеквизитФормы(Дерево, ""Объект.ДеревоТестов"");
	
КонецПроцедуры

//#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

//#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнитьВсеТесты(Команда)
	ОчиститьСообщения();
	RunAllTests();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерезагрузитьВсеТесты(Команда)
	LoadAllTests();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТестовыйНабор(Команда)
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить(""ИмяИстории"", Элементы.ИсторияВыбораМест.Имя);
	ПараметрыВыбора.Вставить(""РазвернутьСтроки"", Ложь);
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = """";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр(""en='Choose a folder with testcases'; ru='Выберите каталог с тестовыми случаями'"");
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить(""Новый ОписаниеОповещения(""""ПослеВыбораФайлаТестов"""", ЭтаФорма, ПараметрыВыбора)"");
		ДиалогОткрытияФайла.Показать(Оповещение);
	ИначеЕсли ДиалогОткрытияФайла.Выбрать() Тогда
		ВыбранныеФайлы = Новый Массив;
		ВыбранныеФайлы.Добавить(ДиалогОткрытияФайла.Каталог);
		ПослеВыбораФайлаТестов(ВыбранныеФайлы, ПараметрыВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТестовыеСлучаи(Команда)
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить(""ИмяИстории"", Элементы.ИсторияВыбораФайлов.Имя);
	ПараметрыВыбора.Вставить(""РазвернутьСтроки"", Истина);
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Фильтр = НСтр(""en='External processing form files (*.epf, *.erf)|*.epf; *.erf'; ru='Файлы внешних обработок (*.epf, *.erf)|*.epf; *.erf'"");
	ДиалогОткрытияФайла.Заголовок = НСтр(""en='Choose an external processing form file'; ru='Выберите файл с внешней обработкой'"");
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить(""Новый ОписаниеОповещения(""""ПослеВыбораФайлаТестов"""", ЭтаФорма, ПараметрыВыбора)"");
		ДиалогОткрытияФайла.Показать(Оповещение);
	ИначеЕсли ДиалогОткрытияФайла.Выбрать() Тогда
		ПослеВыбораФайлаТестов(ДиалогОткрытияФайла.ВыбранныеФайлы, ПараметрыВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаТестов(ВыбранныеФайлы, ПараметрыВыбора) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пути.ЗагрузитьЗначения(ВыбранныеФайлы);
	
	ДобавитьВИсториюКонтекст(ПараметрыВыбора.ИмяИстории, Пути.ВыгрузитьЗначения());
	
	ОбновитьНадписьПути();
	LoadAllTests(ПараметрыВыбора.РазвернутьСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТолькоВыделенныеТесты(Команда)
	
	Пути.Очистить();
	МассивИдентификаторовСтрок = Элементы.ДеревоТестов.ВыделенныеСтроки;
	Для каждого Идентификатор Из МассивИдентификаторовСтрок Цикл
		
		СтрокаДерева = Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаДерева.ТипСтроки = ЗначенияТиповСтроки.ТестовыйМетод Тогда
			СтрокаДерева = СтрокаДерева.ПолучитьРодителя();
		КонецЕсли;
		
		Путь = СтрокаДерева.ПолныйПуть;
		Если Пути.НайтиПоЗначению(Путь) = Неопределено Тогда
			Пути.Добавить(Путь);
			Если СтрокаДерева.ТипСтроки = ЗначенияТиповСтроки.КаталогТестов Тогда
				ДобавитьВИсториюКонтекст(Элементы.ИсторияВыбораМест.Имя, Путь);
			ИначеЕсли СтрокаДерева.ТипСтроки = ЗначенияТиповСтроки.ТестовыйСлучай
					И Не СтрокаДерева.ЭтоВнутренняяОбработка Тогда
				ДобавитьВИсториюКонтекст(Элементы.ИсторияВыбораФайлов.Имя, Путь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьНадписьПути();
	LoadAllTests();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьВыделенныеТесты(Команда)
	ВыполнитьВыделенныеТесты();
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьВыделенныеТестыСИсключением(Команда)
	Сообщить(НСтр(""ru = 'Подключитесь на исключение """"ПередЗапускомТеста""""'""));
	ВыполнитьВыделенныеТесты(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ГенераторМакетовДанных(Команда)
	ИмяИнструмента = ""xddDataFixtureGen"";
	ОткрытьИнструмент(ИмяИнструмента);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьГУИД(Команда)
	ИмяИнструмента = ""xddGuidShow"";
	ОткрытьИнструмент(ИмяИнструмента);
КонецПроцедуры

&НаКлиенте
Процедура ОПроекте(Команда)
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить(""Новый ОписаниеОповещения(""""ОПроектеПослеЗапуска"""", ЭтаФорма)"");
		Выполнить(""НачатьЗапускПриложения(Оповещение, """"https://github.com/xDrivenDevelopment/xUnitFor1C/wiki"""")"");
	Иначе
		ЗапуститьПриложение(""https://github.com/xDrivenDevelopment/xUnitFor1C/wiki"");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОПроектеПослеЗапуска(КодВозврата, ДополнительныеПараметры)
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТестыИзКонфигурации(Команда)
	ЗагрузитьТестыИзКонфигурации("""");
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТестыИзКонфигурацииПоИмени(Команда)
	ЗагрузитьТестыИзКонфигурации(""Тест_"");
КонецПроцедуры

&НаКлиенте
Процедура КомандаРегистрацияПрохожденияТестовВЖР(Команда)
	
	ИзменитьЗначениеРеквизитаИУстановитьПометкуНаКнопке(""РегистрацияПрохожденияТестовВЖР"", ""КомандаРегистрацияПрохожденияТестовВЖР"");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРегистрацияОшибокТестовВЖР(Команда)
	
	ИзменитьЗначениеРеквизитаИУстановитьПометкуНаКнопке(""РегистрацияОшибокТестовВЖР"", ""КомандаРегистрацияОшибокТестовВЖР"");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнятьТестыВСлучайномПорядке(Команда)
	ИзменитьЗначениеРеквизитаИУстановитьПометкуНаКнопке(""СлучайныйПорядокВыполнения"", ""КомандаСлучайныйПорядокВыполнения"");
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерезагрузитьФорму(Команда)
	
	Закрыть();
	ОткрытьФормуЗапускаТестов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВключитьРежимОтладки(Команда)
	
	ИзменитьЗначениеРеквизитаИУстановитьПометкуНаКнопке(""РежимОтладки"", ""КомандаВключитьРежимОтладки"");
	Закрыть();
	
	ОткрытьФормуЗапускаТестов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗапускаТестов(НастройкиФормы = Неопределено)
	
	Если Не ЭтоВстроеннаяОбработка Тогда
		ИмяОбработки = ПодключитьНаСервереВнешнююОбработкуОтКлиента(ИспользуемоеИмяФайла, Неопределено);
	КонецЕсли;
	
	Форма = ПолучитьФорму(ЭтаФорма.ИмяФормы, НастройкиФормы,, Истина);
	Форма.ИспользуемоеИмяФайла = ИспользуемоеИмяФайла;
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаЗагрузитьТестыИзИстории(Команда)
	
	ИмяИстории = Элементы[Команда.Имя].Родитель.Имя;
	ПунктИстории = Число(СтрЗаменить(Команда.Имя, ИмяИстории, """"));
	Пути.Очистить();
	Пути.Добавить(ЭтаФорма[ИмяИстории].Получить(ПунктИстории).Значение);
	
	ДобавитьВИсториюКонтекст(ИмяИстории, Пути.ВыгрузитьЗначения());
	
	ОбновитьНадписьПути();
	LoadAllTests();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибки(Команда)
	
	МассивИдентификаторовСтрок = Элементы.ДеревоТестов.ВыделенныеСтроки;
	НовыйМассивИдентификаторовСтрок = ПолучитьТолькоТестовыеМетодыИзДерева(МассивИдентификаторовСтрок);
	СписокОшибок = Новый СписокЗначений;
	Для Каждого Идентификатор Из НовыйМассивИдентификаторовСтрок Цикл
		ТестовыйСлучай = Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор);
		Для Каждого ЭлементСписка Из ТестовыйСлучай.СписокОшибок Цикл
			СписокОшибок.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
	КонецЦикла;
	
	ВсегоТестов = СписокОшибок.Количество();
	ОбработатьОтчетТестирования(ТекущаяДата());
	
КонецПроцедуры

//#КонецОбласти



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАГРУЗКИ ВЫПОЛНЕНИЯ ТЕСТОВ 

//#Область СлужебныеПроцедурыИФункцииЗагрузкиВыполненияТестов

&НаСервере
Функция Объект() Экспорт
	ОбъектНаСервере = Неопределено;
	Если ЭтоАдресВременногоХранилища(АдресОбъектаНаСервере) Тогда
		КэшОбъекта = ПолучитьИзВременногоХранилища(АдресОбъектаНаСервере);
		Если ТипЗнч(КэшОбъекта) = Тип(""Структура"") Тогда
			КэшОбъекта.Свойство(""Объект"", ОбъектНаСервере);
		КонецЕсли;
	КонецЕсли;

	Если ОбъектНаСервере = Неопределено Тогда
		ОбъектНаСервере = РеквизитФормыВЗначение(""Объект"");
		АдресОбъектаНаСервере = ПоместитьВоВременноеХранилище(Новый Структура(""Объект"", ОбъектНаСервере), УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ОбъектНаСервере;
КонецФункции

&НаСервере
Функция ВерсияСервер()
	Возврат Объект().Версия();
КонецФункции

//#Область ВнешнееAPI

// { ВНЕШНЕЕ API

// Процедура загружает тесты из внешних файлов и из тестируемой конфигурации
//
// Параметры:
//	Нет
&НаКлиенте
Процедура LoadAllTests(РазвернутьСтроки = Ложь, ОповеститьПослеЗагрузки = Неопределено) Экспорт
	ИнициализироватьИндикаторВыполнения();
	
	Объект.ДеревоТестов.ПолучитьЭлементы().Очистить();
	ОчередьЗагрузки.Очистить();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить(""Родитель"", Объект.ДеревоТестов);
	ДополнительныеПараметры.Вставить(""РазвернутьСтроки"", РазвернутьСтроки);
	Если ОповеститьПослеЗагрузки <> Неопределено Тогда
		ДополнительныеПараметры.Вставить(""ОповеститьПослеЗагрузки"", ОповеститьПослеЗагрузки);
	КонецЕсли;
	
	ВерхняяГраница = Пути.Количество() - 1;
	Для Индекс = 0 По ВерхняяГраница Цикл
		
		ОбработкаПрерыванияПользователя();
		
		ПутьКТесту = Пути[Индекс].Значение;
		ДополнительныеПараметры.Вставить(""ПоследнийПуть"", Индекс = ВерхняяГраница);
		Если Найти(ВРег(ПутьКТесту), ""МЕТАДАННЫЕ."") = 1 Тогда
			ЗагрузитьТестыКонфигурации(ПутьКТесту, ДополнительныеПараметры);
		Иначе
			ДополнительныеПараметры.Вставить(""Путь"", ПутьКТесту);
			ДополнительныеПараметры.Вставить(""СообщитьОбОтсутствииФайлов"", Истина);
			Если ЕстьПоддержкаАсинхронныхВызовов Тогда
				Оповещение = Вычислить(""Новый ОписаниеОповещения(""""ЗагрузитьТестыПослеПоискаФайлов"""", ЭтаФорма, ДополнительныеПараметры)"");
				Выполнить(""НачатьПоискФайлов(Оповещение, ПутьКТесту);"");
			Иначе
				НайденныеФайлы = НайтиФайлы(ПутьКТесту);
				ЗагрузитьТестыПослеПоискаФайлов(НайденныеФайлы, ДополнительныеПараметры);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция RunAllTests() Экспорт
	
	МассивИдентификаторовСтрок = Новый Массив();
	Для каждого ЭлементДерева Из Объект.ДеревоТестов.ПолучитьЭлементы() Цикл
		МассивИдентификаторовСтрок.Добавить(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
	Возврат _ВыполнитьВыбранныеТесты(МассивИдентификаторовСтрок);
	
КонецФункции

&НаКлиенте
Функция OpenBrowserForm() Экспорт
	ЭтаФорма.Открыть();
КонецФункции

&НаКлиенте
Функция SetHandlerObject(obj) Экспорт
	MiddleMan = obj;
КонецФункции

// }

//#КонецОбласти

&НаКлиенте
Процедура ЗагрузитьТесты(ОбъектФайл, ПараметрыЗагрузки)
	
	ЭтоФайл = (ТипЗнч(ОбъектФайл) = Тип(""Файл""));
	
	ДополнительныеПараметры = СкопироватьСтруктуру(ПараметрыЗагрузки);
	ДополнительныеПараметры.Вставить(""ОбъектФайл"", ОбъектФайл);
	
	Если ЭтоФайл Тогда
		Если ЕстьПоддержкаАсинхронныхВызовов Тогда
			Оповещение = Вычислить(""Новый ОписаниеОповещения(""""ЗагрузитьТестыПослеПолученияСвойствФайла"""", ЭтаФорма, ДополнительныеПараметры)"");
			СвойстваФайла(ОбъектФайл, Оповещение);
		Иначе
			СвойстваФайла = СвойстваФайла(ОбъектФайл);
			ЗагрузитьТестыПослеПолученияСвойствФайла(СвойстваФайла, ДополнительныеПараметры);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектФайл) = Тип(""Структура"") Тогда
		СвойстваФайла = Новый Структура(""ЭтоКаталог"", ОбъектФайл.ТипСтроки = ЗначенияТиповСтроки.КаталогТестов);
		ОбъектФайл.Вставить(""Расширение"", "".epf"");
		ЗагрузитьТестыПослеПолученияСвойствФайла(СвойстваФайла, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестыПослеПолученияСвойствФайла(СвойстваФайла, ПараметрыЗагрузки) Экспорт
	
	РодительскаяСтрока = ПараметрыЗагрузки.Родитель;
	ОбъектФайл = ПараметрыЗагрузки.ОбъектФайл;
	ЭтоФайл = (ТипЗнч(ОбъектФайл) = Тип(""Файл""));
	
	Если СвойстваФайла.Свойство(""ОписаниеОшибки"") Тогда
		ВывестиОшибку(СвойстваФайла.ОписаниеОшибки);
		ОчередьЗагрузки.Удалить(ОчередьЗагрузки.НайтиПоЗначению(ОбъектФайл.ПолноеИмя));
	ИначеЕсли СвойстваФайла.ЭтоКаталог Тогда
		Если ОбъектФайл.Имя = "".git"" Тогда
			ОчередьЗагрузки.Удалить(ОчередьЗагрузки.НайтиПоЗначению(ОбъектФайл.ПолноеИмя));
		Иначе
			ПараметрыСтроки = Новый Структура;
			ПараметрыСтроки.Вставить(""Имя"", ОбъектФайл.Имя);
			ПараметрыСтроки.Вставить(""ПолныйПуть"", ОбъектФайл.ПолноеИмя);
			
			ТипСтроки = ?(ЭтоФайл, ЗначенияТиповСтроки.КаталогТестов, ЗначенияТиповСтроки.Подсистема);
			СтрокаКаталога = ДобавитьЭлементИерархииТестовыхНаборов(ТипСтроки, ПараметрыСтроки, РодительскаяСтрока); //TODO Развернуть, нужно ли тут оповещение ОповеститьОСобытии(""TestLoaded"", СтрокаТеста);?
			
			ПараметрыЗагрузкиКаталога = СкопироватьСтруктуру(ПараметрыЗагрузки,, ""ОбъектФайл, Родитель, Путь, СообщитьОбОтсутствииФайлов"");
			ПараметрыЗагрузкиКаталога.Вставить(""Родитель"", СтрокаКаталога);
			ПараметрыЗагрузкиКаталога.Вставить(""СообщитьОбОтсутствииФайлов"", Ложь);
			Если ЭтоФайл Тогда
				Если ЕстьПоддержкаАсинхронныхВызовов Тогда
					Оповещение = Вычислить(""Новый ОписаниеОповещения(""""ЗагрузитьТестыПослеПоискаФайлов"""", ЭтаФорма, ПараметрыЗагрузкиКаталога)"");
					Выполнить(""НачатьПоискФайлов(Оповещение, ОбъектФайл.ПолноеИмя, """"*"""", Ложь);"");
				Иначе
					НайденныеФайлы = НайтиФайлы(ОбъектФайл.ПолноеИмя, ""*"", Ложь);
					ЗагрузитьТестыПослеПоискаФайлов(НайденныеФайлы, ПараметрыЗагрузкиКаталога);
				КонецЕсли;
			Иначе
				НайденныеФайлы = ОбъектФайл.Строки;
				ЗагрузитьТестыПослеПоискаФайлов(НайденныеФайлы, ПараметрыЗагрузкиКаталога);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ОбъектФайл.Расширение = "".epf"" Тогда
			ПараметрыЗагрузкиНабора = Новый Структура;
			ПараметрыЗагрузкиНабора.Вставить(""ВнешнийФайл"", ЭтоФайл);
			ПараметрыЗагрузкиНабора.Вставить(""ИмяТестовогоСлучая"", ОбъектФайл.ИмяБезРасширения);
			
			Если ТипЗнч(РодительскаяСтрока) <> Тип(""ДанныеФормыДерево"") Тогда
				ПараметрыЗагрузкиНабора.Вставить(""Идентификатор"", РодительскаяСтрока.ПолучитьИдентификатор());
			КонецЕсли;
			
			Если ЭтоФайл Тогда
				Если ЕстьПоддержкаНемодальныхФорм Тогда
					Оповещение = Вычислить(""Новый ОписаниеОповещения(""""ЗагрузитьТестовыйНаборНаКлиенте"""", ЭтаФорма, ПараметрыЗагрузкиНабора)"");
					Выполнить(""НачатьПомещениеФайла(Оповещение,, ОбъектФайл.ПолноеИмя, Ложь, УникальныйИдентификатор);"");
				Иначе
					АдресХранилища = """";
					ПоместитьФайл(АдресХранилища, ОбъектФайл.ПолноеИмя, , Ложь, УникальныйИдентификатор);
					ЗагрузитьТестовыйНаборНаКлиенте(Неопределено, АдресХранилища, ОбъектФайл.ПолноеИмя, ПараметрыЗагрузкиНабора);
				КонецЕсли;
			Иначе
				ЗагрузитьТестовыйНаборНаКлиенте(Неопределено, ОбъектФайл.Имя, ОбъектФайл.ПолноеИмя, ПараметрыЗагрузкиНабора);
			КонецЕсли;
		КонецЕсли;
		ОчередьЗагрузки.Удалить(ОчередьЗагрузки.НайтиПоЗначению(ОбъектФайл.ПолноеИмя));
	КонецЕсли;
	
	ВыполнитьДействияПослеЗагрузкиТестов(ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестыПослеПоискаФайлов(НайденныеФайлы, ПараметрыЗагрузки) Экспорт
	
	Если НайденныеФайлы.Количество() = 0 Тогда
		Если ПараметрыЗагрузки.СообщитьОбОтсутствииФайлов Тогда
			ТекстСообщения = НСтр(""en='File or directory does not exist """"%Путь%""""'; ru='Файл или каталог не существует """"%Путь%""""'"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%Путь%"", ПараметрыЗагрузки.Путь);
			ВывестиОшибку(ТекстСообщения);
		КонецЕсли;
		Если ТипЗнч(ПараметрыЗагрузки.Родитель) = Тип(""ДанныеФормыДерево"") Тогда
			ВыполнитьДействияПослеЗагрузкиТестов(ПараметрыЗагрузки);
		КонецЕсли;
	Иначе
		
		Для Каждого Файл Из НайденныеФайлы Цикл
			ОбработкаПрерыванияПользователя();
			ОчередьЗагрузки.Добавить(Файл.ПолноеИмя);
			ЗагрузитьТесты(Файл, ПараметрыЗагрузки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗагрузки.Родитель) = Тип(""ДанныеФормыЭлементДерева"") Тогда
		ОчередьЗагрузки.Удалить(ОчередьЗагрузки.НайтиПоЗначению(ПараметрыЗагрузки.Родитель.ПолныйПуть));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеЗагрузкиТестов(ПараметрыЗагрузки)
	
	Если ПараметрыЗагрузки.ПоследнийПуть И ОчередьЗагрузки.Количество() = 0 Тогда
		УдалитьПустыеСтрокиКаталогов(Объект.ДеревоТестов.ПолучитьЭлементы());
		Если Объект.ДеревоТестов.ПолучитьЭлементы().Количество() > 0 Тогда
			УпорядочитьСтрокиДереваТестов();
			ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(Объект.ДеревоТестов);
			РазвернутьСтрокиДерева(ПараметрыЗагрузки.РазвернутьСтроки);
		КонецЕсли;
		ПодготовитьДанныеТестовДляОтчетаТестирования();
		Если ПараметрыЗагрузки.Свойство(""ОповеститьПослеЗагрузки"") Тогда
			Выполнить(""ВыполнитьОбработкуОповещения(ПараметрыЗагрузки.ОповеститьПослеЗагрузки);"");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестыИзКонфигурации(ОтборПоИмениТеста)
	
	ПараметрыОткрытия = Новый Структура(""ОтборПоИмениТеста, РежимОткрытияОкна "", ОтборПоИмениТеста, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИмяФормыВыбораПодсистемыУФ = СтрЗаменить(ЭтаФорма.ИмяФормы, ""УправляемаяФорма"", ""ФормаВыбораПодсистемУФ"");
	ОткрытьФорму(ИмяФормыВыбораПодсистемыУФ, ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьТестыКонфигурации(Путь, ДополнительныеПараметры) Экспорт
	
	КоллекцияВстроенныхТестов = Новый Массив;
	КоллекцияВстроенныхТестовСервер(КоллекцияВстроенныхТестов, Путь);
	
	ДополнительныеПараметры.Вставить(""СообщитьОбОтсутствииФайлов"", Ложь);
	ЗагрузитьТестыПослеПоискаФайлов(КоллекцияВстроенныхТестов, ДополнительныеПараметры);
	
КонецФункции

&НаСервере
Функция КоллекцияВстроенныхТестовСервер(КоллекцияВстроенныхТестовСервер, Путь)
	
	ОсновнойОбъект = Объект();
	
	ДеревоВстроенныхТестов = Новый ДеревоЗначений;
	ДеревоВстроенныхТестов.Колонки.Добавить(""Имя"");
	ДеревоВстроенныхТестов.Колонки.Добавить(""ИмяБезРасширения"");
	ДеревоВстроенныхТестов.Колонки.Добавить(""ПолноеИмя"");
	ДеревоВстроенныхТестов.Колонки.Добавить(""ТипСтроки"");
	
	ОбъектМетаданных = ОсновнойОбъект.ПолучитьОбъектМетаданныхПоПути(Путь);
	Если ОбъектМетаданных<>Неопределено Тогда
		Если ВРег(Лев(ОбъектМетаданных.ПолноеИмя(),11)) = ""ПОДСИСТЕМА."" Тогда
			ДобавитьИменаТестовПодсистемы(ДеревоВстроенныхТестов, ОбъектМетаданных);
		Иначе
			ДобавитьИмяВстроенногоТестовогоСлучая(ДеревоВстроенныхТестов, ОбъектМетаданных);
		КонецЕсли;
		
		ВыгрузитьИменаТестовИзДереваВСписокЗначений(ДеревоВстроенныхТестов.Строки, КоллекцияВстроенныхТестовСервер);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДобавитьИменаТестовПодсистемы(СтрокаДерева, МетаПодсистема) Экспорт
	
	СтрокаТеста = СтрокаДерева.Строки.Добавить();
	СтрокаТеста.Имя = МетаПодсистема.Имя;
	СтрокаТеста.ПолноеИмя = СтрЗаменить(""Метаданные."" + МетаПодсистема.ПолноеИмя(), "".Подсистема."", "".Подсистемы."");
	СтрокаТеста.ТипСтроки = ЗначенияТиповСтроки.КаталогТестов;
	
	Для каждого МетаПодчиненнаяПодсистема из МетаПодсистема.Подсистемы цикл
		ДобавитьИменаТестовПодсистемы(СтрокаТеста, МетаПодчиненнаяПодсистема);
	КонецЦикла;
	
	Для каждого МетаОбработка из МетаПодсистема.Состав цикл
		ДобавитьИмяВстроенногоТестовогоСлучая(СтрокаТеста, МетаОбработка);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ДобавитьИмяВстроенногоТестовогоСлучая(СтрокаДерева, МетаОбработка)
	Если Метаданные.Обработки.Найти(МетаОбработка.Имя) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НоваяСтрока = СтрокаДерева.Строки.Добавить();
	НоваяСтрока.Имя = МетаОбработка.Имя;
	НоваяСтрока.ИмяБезРасширения = МетаОбработка.Имя;
	НоваяСтрока.ПолноеИмя = СтрЗаменить(""Метаданные."" + МетаОбработка.ПолноеИмя(), "".Обработка."", "".Обработки."");
	НоваяСтрока.ТипСтроки = ЗначенияТиповСтроки.ТестовыйСлучай;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ВыгрузитьИменаТестовИзДереваВСписокЗначений(СтрокиДереваВстроенныхТестов, КоллекцияВстроенныхТестов)
	Для каждого Строка Из СтрокиДереваВстроенныхТестов Цикл
		НоваяКоллекция = Новый Массив;
		ЭлементКоллекции = Новый Структура(""Имя,ИмяБезРасширения,ПолноеИмя,ТипСтроки,Строки"");
		ЭлементКоллекции.Имя = Строка.Имя;
		ЭлементКоллекции.ИмяБезРасширения = Строка.ИмяБезРасширения;
		ЭлементКоллекции.ПолноеИмя = Строка.ПолноеИмя;
		ЭлементКоллекции.ТипСтроки = Строка.ТипСтроки;
		ЭлементКоллекции.Строки = НоваяКоллекция;
		КоллекцияВстроенныхТестов.Добавить(ЭлементКоллекции);
		Если Строка.Строки.Количество() > 0 Тогда
			ВыгрузитьИменаТестовИзДереваВСписокЗначений(Строка.Строки, НоваяКоллекция);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьТестовыйНаборНаКлиенте(НеИспользуется, АдресХранилища, ВыбранноеИмяФайла, ПараметрыПодключения) Экспорт
	
	Идентификатор = ЗагрузитьТестовыйНаборНаСервере(АдресХранилища, ВыбранноеИмяФайла, ПараметрыПодключения);
	ОповеститьОЗагрузкеТестов(ОчередьОповещений);
	
	Если Идентификатор <> Неопределено Тогда
		
		СтрокаТестовогоНабора = Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор);
		GUID = СтрокаТестовогоНабора._GUID;
		РезультатПоиска = ТаблицаИменаФорм.НайтиСтроки(Новый Структура(""GUID, ОсновнаяФорма"", GUID, Истина));
		Если РезультатПоиска.Количество() Тогда
			ЗагрузитьСписокТестовыхФормИзОсновнойФормыОбъекта(СтрокаТестовогоНабора, РезультатПоиска[0].ИмяФормы);
		КонецЕсли;
		
		РезультатПоиска = ТаблицаИменаФорм.НайтиСтроки(Новый Структура(""GUID"", GUID));
		Для Каждого ЭлементПоиска Из РезультатПоиска Цикл
			ЗагрузитьТестыИзФормыОбъекта(СтрокаТестовогоНабора, ЭлементПоиска.ИмяФормы);
		КонецЦикла;
		
		УдалитьПустуюСтрокуДерева(СтрокаТестовогоНабора, СтрокаТестовогоНабора.ПолучитьРодителя());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьТестовыйНаборНаСервере(Знач АдресХранилищаОбъектМетаданныхИмя, Знач ПолныйПуть, Знач ПараметрыПодключения)
	
	Перем ЭтоВнешнийФайл, ИмяТестовогоСлучая, Идентификатор;
	
	ЮнитОбъект = Объект();
	ПараметрыПодключения.Свойство(""ВнешнийФайл"", ЭтоВнешнийФайл);
	ПараметрыПодключения.Свойство(""ИмяТестовогоСлучая"", ИмяТестовогоСлучая);
	ПараметрыПодключения.Свойство(""Идентификатор"", Идентификатор);
	
	Попытка
		Если ЭтоВнешнийФайл Тогда
			АдресХранилища = АдресХранилищаОбъектМетаданныхИмя;
			ИдентификаторОбработки = Строка(Новый УникальныйИдентификатор);
			ИмяОбъекта = ПодключитьВнешнююОбработку(АдресХранилища, ПолныйПуть, ИдентификаторОбработки, Объект.РежимОтладки);
			ТестовыйНабор = ВнешниеОбработки.Создать(ИмяОбъекта);
		Иначе
			ИмяОбъекта = АдресХранилищаОбъектМетаданныхИмя;
			ТестовыйНабор = Обработки[ИмяОбъекта].Создать();
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр(""ru='ОШИБКА загрузки тестов: %ТекстОшибки%, %ВыбранноеИмяФайла%'; en='Error loading testcases: %ТекстОшибки%, %ВыбранноеИмяФайла%'"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%ТекстОшибки%"", ТекстОшибки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%ВыбранноеИмяФайла%"", ПолныйПуть);
		ЮнитОбъект.ВывестиСообщение(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	ПараметрыСтроки = Новый Структура;
	ПараметрыСтроки.Вставить(""Имя"", ИмяТестовогоСлучая);
	ПараметрыСтроки.Вставить(""ПолныйПуть"", ПолныйПуть);
	ПараметрыСтроки.Вставить(""ЭтоВнутренняяОбработка"", Не ЭтоВнешнийФайл);
	ПараметрыСтроки.Вставить(""ТестовыйСлучайОбъектМетаданныхИмя"", ИмяОбъекта);
	
	Если Идентификатор = Неопределено Тогда
		Родитель = Объект.ДеревоТестов;
	Иначе
		Родитель = Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор);
	КонецЕсли;
	
	СтрокаТестовогоНабора = ДобавитьТестовыйНабор(ПараметрыСтроки, Родитель);
	
	ЗагрузитьСписокТестовыхФормИзМодуляОбъекта(ЮнитОбъект, ТестовыйНабор, СтрокаТестовогоНабора);
	ЗагрузитьТестыИзМодуляОбъекта(ЮнитОбъект, ТестовыйНабор, СтрокаТестовогоНабора, ОчередьОповещений);
	
	Возврат СтрокаТестовогоНабора.ПолучитьИдентификатор();
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьТестыИзФормыОбъекта(ТестовыйНабор, ИмяФормы)
	
	Попытка
		ТестовыйНаборФорма = ПолучитьФормуОбъекта(ТестовыйНабор.ТестовыйСлучайОбъектМетаданныхИмя, ИмяФормы, ТестовыйНабор.ЭтоВнутренняяОбработка);
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр(""ru='ОШИБКА загрузки тестов: %ТекстОшибки%'; en='Error loading testcases: %ТекстОшибки%'"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%ТекстОшибки%"", ТекстОшибки);
		ВывестиСообщение(ТекстСообщения);
		Возврат;
		
	КонецПопытки;
	
	ЗагрузитьТестыИзМодуляОбъекта(ЭтаФорма, ТестовыйНаборФорма, ТестовыйНабор, ОчередьОповещений, ИмяФормы);
	ОповеститьОЗагрузкеТестов(ОчередьОповещений)
	
КонецПроцедуры

// Загружает список управляемых форм из которых нужно получить тестовые случаи
//
// Параметры:
//	ЮнитОбъект 	  			- ОбработкаОбъект 			- Преобразованный реквизит формы ""Объект"" в объект прикладного тип
//  Родитель   	  			- ДанныеФормыЭлементДерева 	- Элемент дерева ""ДеревоТестов""
//  ВнешнийОбъект 			- ВнешняяОбработкаОбъект, 
//							  ВнешнийОтчетОбъект, 
//							  ОбработкаОбъект, 
//							  ОтчетОбъект 				- Объект содержащий тестовые случаи  
//
&НаСервере
Процедура ЗагрузитьСписокТестовыхФормИзМодуляОбъекта(ЮнитОбъект, ТестовыйНабор, СтрокаТестовогоНабора)
	Перем GUID;
	
	МетаданныеОбъекта = ТестовыйНабор.Метаданные();
	Если МетаданныеОбъекта.Формы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		СписокТестовыхФорм = ВыполнитьНеобязательнуюФункциюОбъекта(ТестовыйНабор, ""ПолучитьСписокТестовыхФорм"",, Новый Массив);
	Исключение
		ТекстОшибки = НСтр(""ru = 'Не удалось загрузить список тестовых форм объекта:
								 |  Ошибка получения списка тестовых форм: %1'"");
		ЮнитОбъект.ВывестиОшибку(СтрЗаменить(ТекстОшибки, ""%1"", ОписаниеОшибки()));
		СтрокаТестовогоНабора.Состояние = ЗначенияСостоянияТестов.Сломался; // TODO: нужно ли отображение, что при получении списка форм вывалилась ошибка?
	КонецПопытки;
	
	// Обычные формы при проведении тестов в управляемом режиме не поддерживаются
	ТипФормыОбъекта = Метаданные.СвойстваОбъектов.ТипФормы.Управляемая;
	
	Если МетаданныеОбъекта.ОсновнаяФорма <> Неопределено
	   И МетаданныеОбъекта.ОсновнаяФорма.ТипФормы = ТипФормыОбъекта Тогда
		
		ИмяОсновнойФормы = МетаданныеОбъекта.ОсновнаяФорма.Имя;
		
	ИначеЕсли МетаданныеОбъекта.ДополнительнаяФорма <> Неопределено 
			И МетаданныеОбъекта.ДополнительнаяФорма.ТипФормы = ТипФормыОбъекта Тогда
		
		ИмяОсновнойФормы = МетаданныеОбъекта.ДополнительнаяФорма.Имя;
		
	Иначе
		ИмяОсновнойФормы = Неопределено;
	КонецЕсли;
	
	GUID = СтрокаТестовогоНабора._GUID;
	
	Для Каждого Форма Из МетаданныеОбъекта.Формы Цикл
		Если Форма.ТипФормы = ТипФормыОбъекта Тогда
			Если Форма.Имя <> ИмяОсновнойФормы Тогда
				Если СписокТестовыхФорм.Найти(Форма.Имя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяЗапись = ТаблицаИменаФорм.Добавить();
			НоваяЗапись.GUID = GUID;
			НоваяЗапись.ИмяФормы = Форма.Имя;
			НоваяЗапись.ИмяОбъекта = МетаданныеОбъекта.Имя;
			НоваяЗапись.ОсновнаяФорма = Форма.Имя = ИмяОсновнойФормы;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСписокТестовыхФормИзОсновнойФормыОбъекта(ТестовыйНабор, ИмяФормы)
	Перем GUID;
	
	Попытка
		Форма = ПолучитьФормуОбъекта(ТестовыйНабор.ТестовыйСлучайОбъектМетаданныхИмя, ИмяФормы, ТестовыйНабор.ЭтоВнутренняяОбработка);
		ЕстьМетодОбъекта = Ложь;
		СписокТестовыхФорм = ВыполнитьНеобязательнуюФункциюОбъекта(Форма, ""ПолучитьСписокТестовыхФорм"",,, ЕстьМетодОбъекта);
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр(""ru='ОШИБКА загрузки тестовых форм из основной формы объекта: %ТекстОшибки%'; en='Error loading testforms from main object form: %ТекстОшибки%'"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%ТекстОшибки%"", ТекстОшибки);
		ВывестиСообщение(ТекстСообщения);
		Возврат;
		
	КонецПопытки;
	
	Если Не ЕстьМетодОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	GUID = ТестовыйНабор._GUID;
	ПараметрыОтбора = Новый Структура(""GUID, ОсновнаяФорма"", GUID, Ложь);
	РезультатОтбора = ТаблицаИменаФорм.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ЭлементОтбора Из РезультатОтбора Цикл
		ТаблицаИменаФорм.Удалить(ЭлементОтбора);
	КонецЦикла;
	
	Для Каждого ИмяТестовойФормы Из СписокТестовыхФорм Цикл
		Если ИмяТестовойФормы <> ИмяФормы Тогда
			НоваяЗапись = ТаблицаИменаФорм.Добавить();
			НоваяЗапись.GUID = GUID;
			НоваяЗапись.ИмяФормы = ИмяТестовойФормы;
			НоваяЗапись.ОсновнаяФорма = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗагрузитьТестыИзМодуляОбъекта(ЮнитОбъект, ТестовыйНабор, СтрокаТестовогоНабора, ОчередьОповещений, ИмяФормы = """")
	
	ПолныйПуть = СтрокаТестовогоНабора.ПолныйПуть;
	
	ТестовыеМетоды = ПолучитьТестовыеСлучаи(ЮнитОбъект, ТестовыйНабор, ПолныйПуть);
	Если Не ЗначениеЗаполнено(ТестовыеМетоды) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РазрешенСлучайныйПорядокВыполнения = РазрешенСлучайныйПорядокВыполненияТестов(ТестовыйНабор, ПолныйПуть);
	Исключение
		ЮнитОбъект.ВывестиОшибку(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(ЮнитОбъект) = Тип(""УправляемаяФорма"") Тогда
		МодульИлиФорма = ЮнитОбъект.ЗначениеМодульИлиФорма.Форма;
		ТипСтроки = ЮнитОбъект.ЗначенияТиповСтроки.ТестовыйМетод;
	Иначе
		МодульИлиФорма = ЮнитОбъект.мЗначениеМодульИлиФорма.Модуль;
		ТипСтроки = ЮнитОбъект.мЗначенияТиповСтроки.ТестовыйМетод;
	КонецЕсли;
	
	Для Каждого МетодТестовогоНабора Из ТестовыеМетоды Цикл
		
		Если ТипЗнч(МетодТестовогоНабора) = Тип(""Строка"") Тогда
			ИмяТестовогоСлучая = МетодТестовогоНабора;
			ПараметрыТеста = Неопределено;
			ПредставлениеТеста = ИмяТестовогоСлучая;
		Иначе
			ИмяТестовогоСлучая = МетодТестовогоНабора.ИмяТеста;
			ПараметрыТеста = МетодТестовогоНабора;
			Если Не ПараметрыТеста.Свойство(""ПредставлениеТеста"", ПредставлениеТеста) Или Не ЗначениеЗаполнено(ПредставлениеТеста) Тогда
				ПредставлениеТеста = ИмяТестовогоСлучая;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыСтроки = Новый Структура;
		ПараметрыСтроки.Вставить(""Имя"", ПредставлениеТеста);
		ПараметрыСтроки.Вставить(""ПолныйПуть"", ПолныйПуть);
		ПараметрыСтроки.Вставить(""ИмяТестовогоСлучая"", ИмяТестовогоСлучая);
		ПараметрыСтроки.Вставить(""ПараметрыТеста"", ПараметрыТеста);
		ПараметрыСтроки.Вставить(""МодульИлиФорма"", МодульИлиФорма);
		ПараметрыСтроки.Вставить(""ИмяФормы"", ИмяФормы);
		ПараметрыСтроки.Вставить(""РазрешенСлучайныйПорядокВыполнения"", РазрешенСлучайныйПорядокВыполнения);
		
		СтрокаТеста = ДобавитьТестовыйМетод(ТипСтроки, ПараметрыСтроки, СтрокаТестовогоНабора);
		
		ОчередьОповещений.Добавить(СтрокаТеста.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОЗагрузкеТестов(ОчередьОповещений)
	
	Для Каждого Оповещение Из ОчередьОповещений Цикл
		СтрокаТеста = Объект.ДеревоТестов.НайтиПоИдентификатору(Оповещение.Значение);
		Если СтрокаТеста <> Неопределено Тогда
			ОповеститьОСобытии(""TestLoaded"", СтрокаТеста);
		КонецЕсли;
	КонецЦикла;
	ОчередьОповещений.Очистить();
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция РазрешенСлучайныйПорядокВыполненияТестов(ТестОбъект, ПолноеИмяОбъекта) Экспорт
	
	ИмяМетода = ""РазрешенСлучайныйПорядокВыполненияТестов"";
	Попытка
		РазрешенСлучайныйПорядок = ВыполнитьНеобязательнуюФункциюОбъекта(ТестОбъект, ИмяМетода,, Истина);
	Исключение
		ТекстОшибки = НСтр(""ru = 'Набор тестов не загружен: %1:
								 |  Ошибка вызова метода %2 из теста: %3'"");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, ""%1"", ПолноеИмяОбъекта);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, ""%2"", ИмяМетода);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, ""%3"", ОписаниеОшибки());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат РазрешенСлучайныйПорядок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьФормуОбъекта(ИдентификаторОбработки, ИмяФормы, ЭтоВнутренняяОбработка)
	
	Если ЭтоВнутренняяОбработка Тогда
		Форма = ПолучитьФорму(""Обработка."" + ИдентификаторОбработки + "".Форма."" + ИмяФормы);
	Иначе
		Форма = ПолучитьФорму(""ВнешняяОбработка."" + ИдентификаторОбработки + "".Форма."" + ИмяФормы);
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции

&НаКлиенте
Функция ДобавитьЭлементИерархииТестовыхНаборов(ТипСтроки, ПараметрыСтроки, РодительскаяСтрока)
	
	НоваяСтрока = РодительскаяСтрока.ПолучитьЭлементы().Добавить();
	
	НоваяСтрока.ТипСтроки = ТипСтроки;
	НоваяСтрока.Имя = ПараметрыСтроки.Имя;
	НоваяСтрока.ПолныйПуть = ПараметрыСтроки.ПолныйПуть;
	НоваяСтрока.Состояние = ЗначенияСостоянияТестов.НеВыполнялся;
	НоваяСтрока._guid = Строка(Новый УникальныйИдентификатор);
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Функция ДобавитьТестовыйНабор(ПараметрыСтроки, РодительскаяСтрока)
	
	НоваяСтрока = РодительскаяСтрока.ПолучитьЭлементы().Добавить();
	
	НоваяСтрока.ТипСтроки = ЗначенияТиповСтроки.ТестовыйСлучай;
	НоваяСтрока.Имя = ПараметрыСтроки.Имя;
	НоваяСтрока.ПолныйПуть = ПараметрыСтроки.ПолныйПуть;
	НоваяСтрока.Состояние = ЗначенияСостоянияТестов.НеВыполнялся;
	НоваяСтрока._guid = Строка(Новый УникальныйИдентификатор);
	
	НоваяСтрока.ТестовыйСлучайОбъектМетаданныхИмя = ПараметрыСтроки.ТестовыйСлучайОбъектМетаданныхИмя;
	НоваяСтрока.ЭтоВнутренняяОбработка = ПараметрыСтроки.ЭтоВнутренняяОбработка;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьТестовыйМетод(ТипСтроки, ПараметрыСтроки, РодительскаяСтрока)
	
	НоваяСтрока = РодительскаяСтрока.ПолучитьЭлементы().Добавить();
	
	НоваяСтрока.ТипСтроки = ТипСтроки;
	НоваяСтрока.Имя = ПараметрыСтроки.Имя;
	НоваяСтрока.ПолныйПуть = ПараметрыСтроки.ПолныйПуть;
	НоваяСтрока._guid = Строка(Новый УникальныйИдентификатор);
	
	НоваяСтрока.ИмяТестовогоНабора = РодительскаяСтрока.Имя;
	НоваяСтрока.ИмяТестовогоСлучая = ПараметрыСтроки.ИмяТестовогоСлучая;
	НоваяСтрока.ТестовыйСлучайОбъектМетаданныхИмя = РодительскаяСтрока.ТестовыйСлучайОбъектМетаданныхИмя;
	НоваяСтрока.ЭтоВнутренняяОбработка = РодительскаяСтрока.ЭтоВнутренняяОбработка;
	НоваяСтрока.МодульИлиФорма = ПараметрыСтроки.МодульИлиФорма;
	НоваяСтрока.ИмяОсновнойУправляемойФормы = ПараметрыСтроки.ИмяФормы;
	НоваяСтрока.РазрешенСлучайныйПорядокВыполнения = ПараметрыСтроки.РазрешенСлучайныйПорядокВыполнения;
	
	ПараметрыТеста = ПараметрыСтроки.ПараметрыТеста;
	НоваяСтрока.ЕстьПараметрыТеста = ПараметрыТеста <> Неопределено;
	Если НоваяСтрока.ЕстьПараметрыТеста Тогда
		НоваяСтрока.ПараметрыТеста = ПараметрыТеста;
		Если НоваяСтрока.Имя = НоваяСтрока.ИмяТестовогоСлучая Тогда
			ОписаниеПараметра = ""<пусто>"";
			Если ПараметрыТеста.Свойство(""Параметр"") Тогда
				ОписаниеПараметра = Строка(ПараметрыТеста.Параметр);
			КонецЕсли;
			
			НоваяСтрока.Имя = НоваяСтрока.Имя + "" ( "" + ОписаниеПараметра + "" )"";
		КонецЕсли;
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

//#Область ОбработкаПараметровЗапуска

// { Обработка параметров запуска

// Пример строки запуска - ""Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования""
//	""C:\Program Files (x86)\1cv82\8.2.18.96\bin\1cv8c.exe"" /DisableStartupMessages /Execute E:\ТестыИМ\xddTestRunner.epf /S ""server\ib"" /Out ""E:\ТестыИМ\Тесты\log.txt""  /C ""Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования"" /LogUI
&НаКлиенте
Функция ОбработатьПараметрыЗапуска(СтрокаПараметровЗапуска)
	
	ПараметрыЗапуска = РазобратьПараметрыЗапускаСервер(СтрокаПараметровЗапуска);
	Если ПараметрыЗапуска = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьЗначенияНастроекПоУмолчанию(ЭтаФорма);
	
	ПутьКТестам = ПараметрыЗапуска.ПутьТестов;
	Если ЗначениеЗаполнено(ПутьКТестам) Тогда
		Пути.Добавить(ПутьКТестам);
	КонецЕсли;
	
	ОбновитьНадписьПути();
	
	//ПутьОтчетаТестирования  = ПараметрыЗапуска.ПутьОтчета;
	УстановитьТипОтчетаТестирования(ЭтаФорма, ПараметрыЗапуска.ФорматОтчета);
	
	Объект.РегистрацияПрохожденияТестовВЖР = ПараметрыЗапуска.РегистрацияПрохожденияТестовВЖР;
	Объект.РегистрацияОшибокТестовВЖР      = ПараметрыЗапуска.РегистрацияОшибокТестовВЖР;
	Объект.СлучайныйПорядокВыполнения      = ПараметрыЗапуска.СлучайныйПорядокВыполнения;
	Объект.РежимОтладки                    = ПараметрыЗапуска.РежимОтладки;
	
	Объект.ВыводЛогаВФорматеTeamCity = ПараметрыЗапуска.ВыводЛогаВФорматеTeamCity;
	
	ПривестиИнерфейсВСоответствиеСНастройками(ЭтаФорма);
	Если Не ПараметрыЗапуска.Загрузить Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоЗапускВПакетномРежиме = Истина; // ПараметрыЗапуска.ОстановитьСистему;
	
	ПакетныйРежимЗапуска_ЗагрузитьТесты(ПараметрыЗапуска);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПакетныйРежимЗапуска_ЗагрузитьТесты(ПараметрыЗапуска)
	
	ПутьКФайлуЛога = ПараметрыЗапуска.ПутьКодаВозврата;
	ЗаписатьКодВозвратаВЛогФайл(ПутьКФайлуЛога, ""1""); //По умолчанию считаем что ошибка. Перед завершением работы запишем 0.
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить(""Новый ОписаниеОповещения(""""ПакетныйРежимЗапуска_ПослеЗагрузкиТестов"""", ЭтотОбъект, ПараметрыЗапуска)"");
		LoadAllTests(, Оповещение);
	Иначе
		LoadAllTests();
		ПакетныйРежимЗапуска_ПослеЗагрузкиТестов(Неопределено, ПараметрыЗапуска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетныйРежимЗапуска_ПослеЗагрузкиТестов(НеиспользуемыйПараметр, ПараметрыЗапуска) Экспорт
	
	лЗавершитьРаботуПослеТестирования = ПараметрыЗапуска.ОстановитьСистему;
	Если Объект.ДеревоТестов.ПолучитьЭлементы().Количество() = 0 Тогда
		ОписаниеОшибки = СтрЗаменить(НСтр(""ru = 'ОШИБКА загрузки тестов: путь <%1>'; en = 'Error loading testcases: path <%1>'""), ""%1"", ПараметрыЗапуска.ПутьТестов);
		ВывестиСообщение(ОписаниеОшибки);
		ЗарегистрироватьОшибкуЗапускаТестированияСервер(ПараметрыЗапуска.ПутьТестов, ОписаниеОшибки);
		Если лЗавершитьРаботуПослеТестирования Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПакетныйРежимЗапуска_ОпределитьПутьОтчетаТестирования(ПараметрыЗапуска);
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетныйРежимЗапуска_ОпределитьПутьОтчетаТестирования(ПараметрыЗапуска)
	Перем ПутьОтчета;
	
	Если ПустаяСтрока(ПараметрыЗапуска.ПутьОтчета) Тогда
		Если Не ПараметрыЗапуска.ВстроенныеТесты Тогда
			ПутьОтчета = ПараметрыЗапуска.ПутьТестов;
		КонецЕсли;
	Иначе
		ПутьОтчета = ПараметрыЗапуска.ПутьОтчета
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьОтчета) Тогда
		ВывестиОшибку(НСтр(""ru = 'ОШИБКА загрузки тестов: не задан путь отчета о тестировании.'""));
		Если ПараметрыЗапуска.ОстановитьСистему Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить(""Новый ОписаниеОповещения(""""ПакетныйРежимЗапуска_ПослеПолученияСвойствФайлаОтчетаТестирования"""", ЭтотОбъект, ПараметрыЗапуска)"");
		СвойстваФайла(ПутьОтчета, Оповещение);
	Иначе
		СвойстваФайла = СвойстваФайла(ПутьОтчета);
		ПакетныйРежимЗапуска_ПослеПолученияСвойствФайлаОтчетаТестирования(СвойстваФайла, ПараметрыЗапуска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетныйРежимЗапуска_ПослеПолученияСвойствФайлаОтчетаТестирования(СвойстваФайла, ПараметрыЗапуска) Экспорт
	
	Если СвойстваФайла.Свойство(""ОписаниеОшибки"") Тогда
		ВывестиОшибку(СвойстваФайла.ОписаниеОшибки);
		Если ПараметрыЗапуска.ОстановитьСистему Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Файл = СвойстваФайла.Файл;
	Если ПустаяСтрока(ПараметрыЗапуска.ПутьОтчета) Тогда
		Если СвойстваФайла.ЭтоКаталог Тогда
			УстановитьПутьОтчетаТестирования(Файл.ПолноеИмя);
		Иначе
			УстановитьПутьОтчетаТестирования(Файл.Путь);
		КонецЕсли;
	Иначе
		Если СвойстваФайла.Существует Тогда
			Если СвойстваФайла.ЭтоКаталог Тогда
				УстановитьПутьОтчетаТестирования(Файл.ПолноеИмя);
			Иначе
				УстановитьПутьОтчетаТестирования(Файл.Путь, Файл.Имя);
			КонецЕсли;
		Иначе
			УстановитьПутьОтчетаТестирования(Файл.Путь, Файл.Имя);
			Если ЕстьПоддержкаАсинхронныхВызовов Тогда
				Оповещение = Вычислить(""Новый ОписаниеОповещения(""""ПакетныйРежимЗапуска_ПослеПроверкиСуществованияПутиОтчетаТестирования"""", ЭтотОбъект, ПараметрыЗапуска)"");
				СвойстваФайла(Файл.Путь, Оповещение);
			Иначе
				Результат = СвойстваФайла(Файл.Путь);
				ПакетныйРежимЗапуска_ПослеПроверкиСуществованияПутиОтчетаТестирования(Результат, ПараметрыЗапуска);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПакетныйРежимЗапуска_ВыполнитьТесты(ПараметрыЗапуска);
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетныйРежимЗапуска_ПослеПроверкиСуществованияПутиОтчетаТестирования(СвойстваФайла, ПараметрыЗапуска) Экспорт
	
	Если СвойстваФайла.Свойство(""ОписаниеОшибки"") Тогда
		УстановитьПутьОтчетаТестирования("""", """");
		ВывестиОшибку(СвойстваФайла.ОписаниеОшибки);
		Если ПараметрыЗапуска.ОстановитьСистему Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не СвойстваФайла.Существует Тогда
		УстановитьПутьОтчетаТестирования("""", """");
		ТекстОшибки = СтрЗаменить(НСтр(""ru = 'ОШИБКА загрузки тестов: Ожидали, что каталог отчета тестирования будет существовать, а он не существует. Путь <%1>'""), ""%1"", СвойстваФайла.Файл.ПолноеИмя);
		ВывестиОшибку(ТекстОшибки);
		Если ПараметрыЗапуска.ОстановитьСистему Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
	Иначе
		ПакетныйРежимЗапуска_ВыполнитьТесты(ПараметрыЗапуска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетныйРежимЗапуска_ВыполнитьТесты(ПараметрыЗапуска)
	
	лЗавершитьРаботуПослеТестирования = ПараметрыЗапуска.ОстановитьСистему;
	Если ПараметрыЗапуска.Выполнить Тогда
		
		Попытка
			КодРезультатаТестирования = RunAllTests();
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			ТекстСообщения = НСтр(""ru='ОШИБКА выполнения тестов: %ТекстОшибки%'; en='Error running testcases: %ТекстОшибки%'"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%ТекстОшибки%"", ТекстОшибки); 
			ВывестиСообщение(ТекстСообщения);
			
			Если лЗавершитьРаботуПослеТестирования Тогда
				ЗавершитьРаботуСистемы(Ложь);
				Возврат;
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если лЗавершитьРаботуПослеТестирования Тогда
		
		ЗаписатьКодВозвратаВЛогФайл(ПараметрыЗапуска.ПутьКодаВозврата, ""0"", КодРезультатаТестирования);
		ЗавершитьРаботуСистемы(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКодВозвратаВЛогФайл(ПутьКФайлуЛога, КодВозврата, КодРезультатаТестирования = Неопределено)
	
	Попытка
		Запись = Новый ЗаписьТекста(ПутьКФайлуЛога);
		Запись.ЗаписатьСтроку(КодВозврата);
		Если КодРезультатаТестирования <> Неопределено Тогда
			Запись.ЗаписатьСтроку(КодРезультатаТестирования);
		КонецЕсли;
		Запись.Закрыть();
	Исключение
		ТекстСообщения = НСтр(""ru = 'Ошибка записи лог-файла кода возврата: путь <%1>'"");
		ВывестиСообщение(СтрЗаменить(ТекстСообщения, ""%1"", ПутьКФайлуЛога) + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция РазобратьПараметрыЗапускаСервер(СтрокаПараметровЗапуска)
	Возврат Объект().РазобратьПараметрыЗапуска(СтрокаПараметровЗапуска);
КонецФункции

&НаСервере
Функция ЗарегистрироватьОшибкуЗапускаТестированияСервер(ПолныйПуть, ОписаниеОшибки)
	Объект().ЗарегистрироватьОшибкуЗапускаТестирования(ПолныйПуть, ОписаниеОшибки);
КонецФункции

// }

//#КонецОбласти



&НаКлиенте
Процедура ОбновитьНадписьПути()
	
	Если Пути.Количество() = 1 Тогда
		ПутиНадпись = Пути[0].Значение;
		Элементы.ПутиНадпись.МногострочныйРежим = Ложь;
	Иначе
		ПутиНадпись = """";
		КонечныйИндекс = Пути.Количество() - 1;
		Для Индекс = 0 По КонечныйИндекс Цикл
			Если Индекс = КонечныйИндекс Тогда
				ПутиНадпись = ПутиНадпись + Пути[Индекс].Значение;
			Иначе
				ПутиНадпись = ПутиНадпись + Пути[Индекс].Значение + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		Элементы.ПутиНадпись.МногострочныйРежим = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура изменяет значение реквизита обработки и устанавливает пометку на кнопке командной панели
//
// Параметры:
//	ИмяРеквизитаОбъекта 	 - Строка - Имя реквизита типа ""Булево""
//  ИмяКнопкиКоманднойПанели - Строка - Имя кнопки командной панели для которой нужно изменить реквизит ""Пометка""
//
&НаКлиенте
Процедура ИзменитьЗначениеРеквизитаИУстановитьПометкуНаКнопке(ИмяРеквизитаОбработки, ИмяКнопкиКоманднойПанели)
	
	Объект[ИмяРеквизитаОбработки] = НЕ Объект[ИмяРеквизитаОбработки];
	Элементы[ИмяКнопкиКоманднойПанели].Пометка = Объект[ИмяРеквизитаОбработки];
	
КонецПроцедуры



&НаКлиенте
Функция ВывестиОшибку(Ошибка) Экспорт
	НужныйТекстОшибки = ПолучитьРазвернутыйТекстОшибки(Ошибка);
	
	ВывестиСообщение(НужныйТекстОшибки, СтатусСообщения.Важное);
	
	Возврат НужныйТекстОшибки;
КонецФункции

Функция ПолучитьРазвернутыйТекстОшибки(Ошибка)
	ТипОбъектаОшибка = ТипЗнч(Ошибка);
	
	Если ТипОбъектаОшибка = Тип(""Структура"") Тогда
		
		НужныйТекстОшибки = ""["" + Ошибка.ИмяТестовогоНабора + "": "" + Ошибка.ИмяТестовогоСлучая + ""] "" + Ошибка.Описание;
		
	ИначеЕсли ТипОбъектаОшибка = Тип(""ИнформацияОбОшибке"") Тогда
		
		НужныйТекстОшибки = Ошибка.Описание;
		
	Иначе
		
		НужныйТекстОшибки = Ошибка;
		
	КонецЕсли;
	Возврат НужныйТекстОшибки;
КонецФункции

// Выводит сообщение. В тестах ВСЕГДА должна использоваться ВМЕСТО метода Сообщить().
// 
&НаКлиенте
Функция ВывестиСообщение(ТекстСообщения, Статус = Неопределено) Экспорт
	Если MiddleMan <> Неопределено Тогда
		Если НЕ ОповеститьОСобытии(""Message"", ТекстСообщения) Тогда
			ОповеститьОСобытии(""ВывестиСообщение"", ТекстСообщения);
		КонецЕсли;
	Иначе
		Если Объект.ВыводЛогаВФорматеTeamCity Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""|"",""||"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""'"",""|'"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""["",""|["");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,""]"",""|]"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,Символы.ВК,""|r"");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,Символы.ПС,""|n"");
			
			СтатусДляTeamCity = ?(Статус = Неопределено, СтатусСообщения.Обычное, Статус);
			Сообщить(""##teamcity[message text='""+ТекстСообщения+""' errorDetails='' status='""+СоответствиеСтатусовДляTeamCity[СтатусДляTeamCity]+""']"");
		Иначе
			Сообщить(ТекстСообщения, Статус);
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Вызывает исключение с заданным текстом ошибки для прерывания выполнения тестового случая.
// 
&НаКлиенте
Функция ПрерватьТест(ТекстОшибки) Экспорт
	
	ВызватьИсключение ТекстОшибки;
	
КонецФункции


//#КонецОбласти

//#КонецОбласти



// { Методы генерации тестовых данных

// количествоСозданныхОбъектов учитывает только созданные элементы справочников, документы и пользователей ИБ. Записи регистров сведений не считаются!
&НаКлиенте
Функция СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения = Неопределено, ИмяКолонкиЗамещения = Неопределено) Экспорт
	Данные = СоздатьДанныеПоТабличномуДокументуСервер(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения);
	Возврат Данные;
КонецФункции

&НаСервере
Функция СоздатьДанныеПоТабличномуДокументуСервер(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения) //Экспорт
	Данные = Объект().СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения);
	Возврат Неопределено; //Данные;
КонецФункции
//}

// { работа с данными текущего теста

&НаКлиенте
Процедура УстановитьДанныеТекущегоТеста(ДанныеТекущегоТеста)
	
	УстановитьКонтекст(ДанныеТекущегоТеста, ИдентификаторКонтекстаДанныхТекущегоТеста());
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДанныеТекущегоТеста()
	
	УдалитьКонтекст(ИдентификаторКонтекстаДанныхТекущегоТеста());
	
КонецПроцедуры

&НаКлиенте
Функция ПустыеДанныеТекущегоТеста()
	
	ДанныеТеста = Новый Структура;
	ДанныеТеста.Вставить(""Имя"", """");
	ДанныеТеста.Вставить(""ПолныйПуть"", """");
	ДанныеТеста.Вставить(""СостояниеТеста"", """");
	
	Возврат ДанныеТеста;
	
КонецФункции

Функция ИдентификаторКонтекстаДанныхТекущегоТеста()
	
	Возврат ""xUnitFor1C_ДанныеТекущегоТеста"";
	
КонецФункции

// }

// { работа с тестами


&НаКлиенте
Функция ПодключитьНаСервереВнешнююОбработкуОтКлиента(ПолныйПутьФайлаОбработки, ИдентификаторОбработки, РежимОтладки = Ложь)
	
	ИмяВнешнейОбработки = """";
	
	Если ЕстьПоддержкаНемодальныхФорм Тогда
		ПараметрыПодключения = Новый Структура;
		ПараметрыПодключения.Вставить(""ИдентификаторОбработки"", ИдентификаторОбработки);
		ПараметрыПодключения.Вставить(""РежимОтладки"", РежимОтладки);
		
		Оповещение = Вычислить(""Новый ОписаниеОповещения(""""ПодключитьВнешнююОбработкуПослеПолученияФайла"""", ЭтаФорма, ПараметрыПодключения)"");
		Выполнить(""НачатьПомещениеФайла(Оповещение, , ПолныйПутьФайлаОбработки, Ложь);"");// Адрес действителен только на 1 вызов сервера!
	Иначе
		АдресХранилища = """";
		ПоместитьФайл(АдресХранилища, ПолныйПутьФайлаОбработки, , Ложь);
		ИмяВнешнейОбработки = ПодключитьВнешнююОбработку(АдресХранилища, ПолныйПутьФайлаОбработки, ИдентификаторОбработки, РежимОтладки);
	КонецЕсли;
	
	Возврат ИмяВнешнейОбработки;
	
КонецФункции

&НаКлиенте
Процедура ПодключитьВнешнююОбработкуПослеПолученияФайла(НеИспользуется, АдресХранилища, ВыбранноеИмяФайла, ПараметрыПодключения) Экспорт
	
	ИмяВнешнейОбработки = ПодключитьВнешнююОбработку(АдресХранилища, ВыбранноеИмяФайла, ПараметрыПодключения.ИдентификаторОбработки, ПараметрыПодключения.РежимОтладки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодключитьВнешнююОбработку(Знач АдресХранилища, Знач ВыбранноеИмяФайла, Знач ИдентификаторОбработки = Неопределено, Знач РежимОтладки = Ложь)
	
	Если РежимОтладки Тогда
		Файл = Новый Файл(ВыбранноеИмяФайла);
		Если Файл.Существует() Тогда
			//Это файловый вариант или обработка доступна с сервера
			ВнешниеОбработки.Создать(ВыбранноеИмяФайла, Ложь);
		Иначе
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
			ВременноеИмяФайла = ПолучитьИмяВременногоФайла(""epf"");
			ДвоичныеДанные.Записать(ВременноеИмяФайла);
			ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
		КонецЕсли;
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресХранилища,, Ложь);
	Иначе
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресХранилища, ИдентификаторОбработки, Ложь);
	КонецЕсли;
	
	Возврат ИмяОбработки;
	
КонецФункции



&НаСервереБезКонтекста
Функция ЕстьВстроеннаяОбработкаСервер(ИдентификаторОбработки)
	Возврат Метаданные.Обработки.Найти(ИдентификаторОбработки) <> Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеВстроеннойОбработкиСервер(ИдентификаторОбработки)
	Возврат Метаданные.Обработки.Найти(ИдентификаторОбработки).Представление();
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТестовыеСлучаи(Ю_Тест, ТестовыйСлучайОбъект, ТестовыйСлучайИмяФайла)
	
	Попытка
		СписокТестов = ВыполнитьНеобязательнуюФункциюОбъекта(ТестовыйСлучайОбъект, ""ПолучитьСписокТестов"", Ю_Тест);
	Исключение
		ТекстОшибки = НСтр(""ru = 'Тестовый случай не загружен: %1
								 |  Ошибка получения списка тестовых случаев: %2'"");
		Ю_Тест.ВывестиОшибку(СтрЗаменить(СтрЗаменить(ТекстОшибки, ""%1"", ТестовыйСлучайИмяФайла), ""%2"", ОписаниеОшибки()));
		СписокТестов = Неопределено;
	КонецПопытки;
	
	Если СписокТестов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(СписокТестов) <> Тип(""Массив"") Тогда
		ТекстОшибки = НСтр(""ru = 'Тест не загружен: %1
								 |  Ошибка получения списка тестовых случаев: вместо массива
								 |имен тестовых случаев получен объект <%2>'"");
		Ю_Тест.ВывестиОшибку(СтрЗаменить(СтрЗаменить(ТекстОшибки, ""%1"", ТестовыйСлучайИмяФайла), ""%2"", Строка(ТипЗнч(СписокТестов))));
		
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокиДереваВСлучайномПорядке(МассивИдентификаторовСтрок) Экспорт
	Отбор = Новый Структура(""РазрешенСлучайныйПорядокВыполнения"", Ложь);
	МассивСтрокДерева = ПолучитьТолькоТестовыеМетодыИзДерева(МассивИдентификаторовСтрок, Отбор);
	
	Отбор = Новый Структура(""РазрешенСлучайныйПорядокВыполнения"", Истина);
	МассивСтрокДереваДляСлучайногоВыполнения = ПолучитьТолькоТестовыеМетодыИзДерева(МассивИдентификаторовСтрок, Отбор);
	
	ПеремешанныеСтрокиДерева = ПеремешатьМассив(МассивСтрокДереваДляСлучайногоВыполнения);
	Для каждого Элем Из ПеремешанныеСтрокиДерева Цикл
		МассивСтрокДерева.Добавить(Элем);
	КонецЦикла;
	
	Возврат МассивСтрокДерева;
КонецФункции

&НаКлиенте
Функция ПолучитьМассивИдентификаторовСтрок(СтрокаДереваТестов)
	МассивИдентификаторовСтрок = Новый Массив();
	Для каждого ЭлементДерева Из СтрокаДереваТестов.ПолучитьЭлементы() Цикл
		МассивИдентификаторовСтрок.Добавить(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	Возврат МассивИдентификаторовСтрок;
КонецФункции

&НаКлиенте
Функция ПолучитьТолькоТестовыеМетодыИзДерева(МассивИдентификаторовСтрок, Отбор = Неопределено, МассивДляДобавления = Неопределено)
	Если МассивДляДобавления=Неопределено Тогда
		МассивДляДобавления = Новый Массив;
	КонецЕсли;
	Для каждого Идентификатор из МассивИдентификаторовСтрок Цикл
		СтрокаДереваТестов = Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор);
		
		Если СтрокаДереваТестов.ТипСтроки = ЗначенияТиповСтроки.ТестовыйМетод Тогда
			Если ЗначениеЗаполнено(Отбор) И Не СтрокаДереваУдовлетворяетОтбору(СтрокаДереваТестов, Отбор) Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивДляДобавления.Найти(Идентификатор) = Неопределено Тогда
				МассивДляДобавления.Добавить(Идентификатор);
			КонецЕсли;
			
		Иначе
			НовыйМассив = ПолучитьМассивИдентификаторовСтрок(СтрокаДереваТестов);
			ПолучитьТолькоТестовыеМетодыИзДерева(НовыйМассив, Отбор, МассивДляДобавления);
			
		КонецЕсли;
		
	КонецЦикла;
	Возврат МассивДляДобавления;
КонецФункции

&НаКлиенте
Функция СтрокаДереваУдовлетворяетОтбору(СтрокаДерева, Отбор)
	
	Для Каждого КлючЗначение Из Отбор Цикл
		Если СтрокаДерева[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ОбновитьСостояниеВыбранныхСтрок(ВыбранныеСтроки)
	
	СостояниеВыполнения = ЗначенияСостоянияТестов.НеВыполнялся;
	ВремяВыполнения = 0;
	Для Каждого СтрокаИлиИдентификатор Из ВыбранныеСтроки Цикл
		
		Если ТипЗнч(СтрокаИлиИдентификатор) = Тип(""ДанныеФормыЭлементДерева"") Тогда
			Строка = СтрокаИлиИдентификатор;
		Иначе
			Строка = Объект.ДеревоТестов.НайтиПоИдентификатору(СтрокаИлиИдентификатор);
		КонецЕсли;
		
		Если Строка.ТипСтроки <> ЗначенияТиповСтроки.ТестовыйМетод Тогда
			Состояние = ОбновитьСостояниеВыбранныхСтрок(Строка.ПолучитьЭлементы());
			Строка.Состояние = Состояние.СостояниеВыполнения;
			Строка.ВремяВыполнения = Состояние.ВремяВыполнения;
		КонецЕсли;
		
		ЗапомнитьСамоеХудшееСостояние(СостояниеВыполнения, Строка.Состояние);
		ВремяВыполнения = ВремяВыполнения + Строка.ВремяВыполнения;
		
	КонецЦикла;
	
	Возврат Новый Структура(""СостояниеВыполнения, ВремяВыполнения"", СостояниеВыполнения, ВремяВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСостояниеРодителейВыбранныхСтрок(МассивИдентификаторовСтрок)
	
	Для Каждого Идентификатор Из МассивИдентификаторовСтрок Цикл
		СтрокаДереваТестов = Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор);
		ИзменитьСостояниеВыполненияРодителей(СтрокаДереваТестов);
		ИзменитьВремяВыполненияРодителей(СтрокаДереваТестов);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ПеремешатьМассив(ИсходныйМассив)
	
	Результат = Новый Массив;
	Для Каждого Элемент Из ИсходныйМассив Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;
	
	// алгоритм перемешивания взят из книги Кнута ""Искусство программирования"" т.2
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	ПоследнийИндекс = Результат.ВГраница();
	Для Индекс = 1 По ПоследнийИндекс Цикл
		ТекущийИндекс = ПоследнийИндекс - Индекс + 1;
		НовыйИндекс = ГСЧ.СлучайноеЧисло(0, ТекущийИндекс);
		Если НовыйИндекс <> ТекущийИндекс Тогда
			Значение = Результат[НовыйИндекс];
			Результат[НовыйИндекс] = Результат[ТекущийИндекс];
			Результат[ТекущийИндекс] = Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВЫПОЛНЕНИЕ ТЕСТОВ

&НаКлиенте
Процедура ВыполнитьВыделенныеТесты(ВызыватьИсключение = Ложь)
	
	ОчиститьСообщения();
	
	МассивИдентификаторовСтрок = Элементы.ДеревоТестов.ВыделенныеСтроки;
	
	_ВыполнитьВыбранныеТесты(МассивИдентификаторовСтрок, ВызыватьИсключение);
	
КонецПроцедуры

&НаКлиенте
Функция _ВыполнитьВыбранныеТесты(МассивИдентификаторовСтрок, ВызыватьИсключение = Ложь)
	
	датаНачалаТестирования = ТекущаяДата();
	
	Если Объект.СлучайныйПорядокВыполнения Тогда
		НовыйМассивИдентификаторовСтрок = ПолучитьСтрокиДереваВСлучайномПорядке(МассивИдентификаторовСтрок);
	Иначе
		НовыйМассивИдентификаторовСтрок = ПолучитьТолькоТестовыеМетодыИзДерева(МассивИдентификаторовСтрок);
	КонецЕсли;
	
	ПередВыполнениемТестов(НовыйМассивИдентификаторовСтрок);
	
	ИнициализироватьИндикаторВыполнения(НовыйМассивИдентификаторовСтрок.Количество());
	
	СостояниеРезультат = _ВыполнитьТесты(НовыйМассивИдентификаторовСтрок, ВызыватьИсключение);
	
	ОбновитьСостояниеВыбранныхСтрок(МассивИдентификаторовСтрок);
	ОбновитьСостояниеРодителейВыбранныхСтрок(МассивИдентификаторовСтрок);
	СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(Объект.ДеревоТестов.ПолучитьЭлементы(), Истина);
	
	ОбработатьОтчетТестирования(датаНачалаТестирования);
	
	Возврат СостояниеРезультат;
КонецФункции

&НаКлиенте
Процедура СброситьКэшТестовыхОбработок()
	
	кэшТестовыхОбработок = Новый Соответствие;
	УдалитьИзВременногоХранилища(АдресОбъектаНаСервере);
	
КонецПроцедуры

&НаКлиенте
Функция _ВыполнитьТесты(МассивИдентификаторовСтрок, ВызыватьИсключение = Ложь) Экспорт
	СостояниеРезультат = ЗначенияСостоянияТестов.НеВыполнялся;
	Для каждого ИдентификаторСтроки из МассивИдентификаторовСтрок Цикл
		ОбработкаПрерыванияПользователя();
		
		ВсегоТестов = ВсегоТестов + 1;
		СтрокаДереваТестов = Объект.ДеревоТестов.НайтиПоИдентификатору(ИдентификаторСтроки); // обход бага платформы
		НовоеСостояние = ВыполнитьТестВЗависимостиОтВидаТеста_МодульИлиФорма(СтрокаДереваТестов, СписокОшибок, ВызыватьИсключение);
		
		ЗапомнитьСамоеХудшееСостояние(СостояниеРезультат, НовоеСостояние);
	КонецЦикла;
	
	Возврат СостояниеРезультат;
КонецФункции

&НаКлиенте
Функция ВыполнитьТестВЗависимостиОтВидаТеста_МодульИлиФорма(СтрокаДереваТестов, СписокОшибок, ВызыватьИсключение = Ложь)
	
	Родитель = СтрокаДереваТестов.ПолучитьРодителя();
	Если Не Родитель.ЭтоВнутренняяОбработка Тогда
		ТестОбъект = кэшТестовыхОбработок.Получить(Родитель.ПолныйПуть);
		Если ТестОбъект = Неопределено Тогда
			Попытка
				ПодключитьНаСервереВнешнююОбработкуОтКлиента(Родитель.ПолныйПуть, Родитель.ТестовыйСлучайОбъектМетаданныхИмя, Объект.РежимОтладки);
			Исключение
				СостояниеВыполнения = ВывестиОшибкуВыполненияТеста(СтрокаДереваТестов, ИнформацияОбОшибке(), СписокОшибок, Объект.РегистрацияОшибокТестовВЖР);
				СтрокаДереваТестов.Состояние = СостояниеВыполнения;
				Возврат СостояниеВыполнения;
			КонецПопытки;
			кэшТестовыхОбработок.Вставить(Родитель.ПолныйПуть, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДереваТестов.МодульИлиФорма = ЗначениеМодульИлиФорма.Форма Тогда
		СостояниеРезультат = ВыполнитьТест(СтрокаДереваТестов, ВызыватьИсключение);
	Иначе
		
		ОповеститьОСобытии(""TestStart"", СтрокаДереваТестов);
		СостояниеРезультат = ВыполнитьТестНаСервере(СтрокаДереваТестов.ПолучитьИдентификатор(), СписокОшибок, ВызыватьИсключение);
		
		Если СостояниеРезультат = ЗначенияСостоянияТестов.Сломался Тогда
			ОповеститьОСобытии(""TestFailed"", СтрокаДереваТестов);
		ИначеЕсли СостояниеРезультат = ЗначенияСостоянияТестов.НеРеализован Тогда
			ОповеститьОСобытии(""TestNotImplemented"", СтрокаДереваТестов);
		Иначе
			ОповеститьОСобытии(""TestPassed"", СтрокаДереваТестов);
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДереваТестов.Состояние = СостояниеРезультат;
	
	Возврат СостояниеРезультат;
КонецФункции

&НаКлиенте
Функция ВыполнитьТест(СтрокаДереваТестов, ВызыватьИсключение = Ложь) Экспорт
	Перем Тест; // специально локальная переменная для исключения циклических ссылок
	
	ИдентификаторСтроки = СтрокаДереваТестов.ПолучитьИдентификатор();
	
	ТекущаяДатаВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ПолныйПуть = СтрокаДереваТестов.ПолныйПуть;
	
	Если Объект.РегистрацияПрохожденияТестовВЖР Тогда
		ЗарегистрироватьНачалоПрохожденияТестаСервер(СтрокаДереваТестов.Имя, ПолныйПуть);
	КонецЕсли;
	
	СтрокаДереваТестов.СписокОшибок.Очистить();
	
	Попытка
		Тест = ПолучитьТестОбъект(СтрокаДереваТестов);
	Исключение
		Возврат ВывестиОшибкуВыполненияТеста(СтрокаДереваТестов, ИнформацияОбОшибке(), СписокОшибок, Объект.РегистрацияОшибокТестовВЖР);
	КонецПопытки;
	
	Если ЭтоПервыйТестовыйМетодНабора(СтрокаДереваТестов) Тогда
		Попытка
			ВыполнитьНеобязательнуюПроцедуруОбъекта(Тест, ""ПередЗапускомНабораТестов"");
		Исключение
			Возврат ВывестиОшибкуВыполненияТеста(СтрокаДереваТестов, ИнформацияОбОшибке(), СписокОшибок, Объект.РегистрацияОшибокТестовВЖР);
		КонецПопытки;
	КонецЕсли;
	
	УчестьЗапускТеста(СтрокаДереваТестов);
	
	СостояниеВыполнения = ВыполнитьМетодыТеста(Тест, СтрокаДереваТестов, ВызыватьИсключение);
	СтрокаДереваТестов = Объект.ДеревоТестов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЭтоПоследнийТестовыйМетодНабора(СтрокаДереваТестов) Тогда
		Попытка
			ВыполнитьНеобязательнуюПроцедуруОбъекта(Тест, ""ПослеЗапускаНабораТестов"");
		Исключение
			НовоеСостояние = ВывестиОшибкуВыполненияТеста(СтрокаДереваТестов, ИнформацияОбОшибке(), СписокОшибок, Объект.РегистрацияОшибокТестовВЖР);
			ЗапомнитьСамоеХудшееСостояние(СостояниеВыполнения, НовоеСостояние);
		КонецПопытки;
	КонецЕсли;
	
	СтрокаДереваТестов.ВремяВыполнения = Число(ТекущаяУниверсальнаяДатаВМиллисекундах() - ТекущаяДатаВМиллисекундах) / 1000;
	Возврат СостояниеВыполнения;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьМетодыТеста(Тест, СтрокаДереваТестов, ВызыватьИсключение)
	
	СостояниеВыполнения = ЗначенияСостоянияТестов.НеВыполнялся;
	
	ДанныеТекущегоТеста = ПустыеДанныеТекущегоТеста();
	ДанныеТекущегоТеста.Вставить(""Имя"", СтрокаДереваТестов.Имя);
	ДанныеТекущегоТеста.Вставить(""ПолныйПуть"", СтрокаДереваТестов.ПолныйПуть);
	ДанныеТекущегоТеста.Вставить(""СостояниеТеста"", СостояниеВыполнения);
	УстановитьДанныеТекущегоТеста(ДанныеТекущегоТеста);
	
	параметрыТеста = СтрокаДереваТестов.ПараметрыТеста;
	естьПараметры = СтрокаДереваТестов.ЕстьПараметрыТеста;
	
		//TODO Если первый раз запуск setup оказался неуспешным, то при повторном прогоне без перезагрузки
		// не выполнять, также не выполнять для следующих тестовых случаев.
	Попытка
		ВыполнитьНеобязательнуюПроцедуруОбъекта(Тест, ""ПередЗапускомТеста"");
	Исключение
		Возврат ВывестиОшибкуВыполненияТеста(СтрокаДереваТестов, ИнформацияОбОшибке(), СписокОшибок, Объект.РегистрацияОшибокТестовВЖР);
	КонецПопытки;
	
	ОповеститьОСобытии(""TestStart"", СтрокаДереваТестов);
	
	Попытка
		
		ВыполнитьТестовыйМетод(Тест, СтрокаДереваТестов, ВызыватьИсключение);
		СостояниеВыполнения = ЗначенияСостоянияТестов.Прошел;
		ОповеститьОСобытии(""TestPassed"", СтрокаДереваТестов);
		
	Исключение
		Если ВызыватьИсключение = Истина Тогда
			ВызватьИсключение;
		КонецЕсли;
		
		СостояниеВыполнения = ВывестиОшибкуВыполненияТеста(СтрокаДереваТестов, ИнформацияОбОшибке(), СписокОшибок, Объект.РегистрацияОшибокТестовВЖР);
		
	КонецПопытки;
	
	ДанныеТекущегоТеста.Вставить(""СостояниеТеста"", СостояниеВыполнения);
	УстановитьДанныеТекущегоТеста(ДанныеТекущегоТеста);
	
	Попытка
		ВыполнитьНеобязательнуюПроцедуруОбъекта(Тест, ""ПослеЗапускаТеста"");
	Исключение
		НовоеСостояние = ВывестиОшибкуВыполненияТеста(СтрокаДереваТестов, ИнформацияОбОшибке(), СписокОшибок, Объект.РегистрацияОшибокТестовВЖР);
		ЗапомнитьСамоеХудшееСостояние(СостояниеВыполнения, НовоеСостояние);
	КонецПопытки;
	
	УдалитьДанныеТекущегоТеста();
	
	Возврат СостояниеВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьТестовыйМетод(Тест, СтрокаДереваТестов, ВызыватьИсключение);
	
	ПредставлениеТестовогоСлучая = СтрокаДереваТестов.Имя;
	ИмяТестовогоСлучая = СтрокаДереваТестов.ИмяТестовогоСлучая;
	
	СтрокаПараметров = """";
	Если СтрокаДереваТестов.ЕстьПараметрыТеста Тогда
		ПараметрТеста = Неопределено;
		Если СтрокаДереваТестов.ПараметрыТеста.Свойство(""Параметр"", ПараметрТеста) Тогда
			СтрокаПараметров = ""ПараметрТеста"";
		КонецЕсли;
	КонецЕсли;
	
	Если ВызыватьИсключение = Истина Тогда
		ВызватьИсключение ""ПередЗапускомТеста "" + ПредставлениеТестовогоСлучая + "" обработка: "" + СтрокаДереваТестов.ПолныйПуть;
	КонецЕсли;
	
	Попытка
		ИcполняемыйКод = ""Тест."" + ИмяТестовогоСлучая + ""("" + СтрокаПараметров + "");"";
		Выполнить(ИcполняемыйКод);
	Исключение
		
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, ИмяТестовогоСлучая) Тогда
			Сообщение = НСтр(""ru = 'Отсутствует реализация тестового метода (%1).'"");
			ПропуститьТест(СтрЗаменить(Сообщение, ""%1"", ИcполняемыйКод));
		Иначе
			ВызватьИсключение;
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТестОбъект(СтрокаДереваТестов)
	
	ПолныйПуть = СтрокаДереваТестов.ПолныйПуть;
	ИдентификаторКэша = ПолныйПуть + СтрокаДереваТестов.ИмяОсновнойУправляемойФормы;
	Тест = кэшТестовыхОбработок.Получить(ИдентификаторКэша);
	Если Тест = Неопределено Тогда
		
		ИдентификаторОбработки = СтрокаДереваТестов.ТестовыйСлучайОбъектМетаданныхИмя;
		ИмяФормыТеста = СтрокаДереваТестов.ИмяОсновнойУправляемойФормы;
		Тест = ПолучитьФормуОбъекта(ИдентификаторОбработки, ИмяФормыТеста, СтрокаДереваТестов.ЭтоВнутренняяОбработка);
		
		ТестИнициализирован = ВыполнитьНеобязательнуюПроцедуруОбъекта(Тест, ""Инициализация"", ЭтаФорма);
		Если Не ТестИнициализирован Тогда
			
			массивТестов = ПолучитьТестовыеСлучаи(ЭтаФорма, Тест, ПолныйПуть); // возможно, что тест сохранит у себя ссылку на браузер
			Если Не ЗначениеЗаполнено(массивТестов) Тогда
				ВызватьИсключение НСтр(""ru = 'Не удалось получить тестовые случаи'"");
			КонецЕсли;
			
		КонецЕсли;
		
		кэшТестовыхОбработок.Вставить(ИдентификаторКэша, Тест);
		
	КонецЕсли;
	
	Возврат Тест;
	
КонецФункции

&НаСервере
Функция ВыполнитьТестНаСервере(ИдентификаторСтрокиТестовогоМетода, СписокОшибокРез, ВызыватьИсключение)
	ОсновнойОбъект = Объект();
	ОсновнойОбъект.Мир = Объект.Мир;
	ОсновнойОбъект.СостояниеВыполненияНаборовТестов = Объект.СостояниеВыполненияНаборовТестов;
	
	рез = ОсновнойОбъект.ВыполнитьТест(Объект.ДеревоТестов.НайтиПоИдентификатору(ИдентификаторСтрокиТестовогоМетода), 
		СписокОшибокРез, Объект.РегистрацияПрохожденияТестовВЖР, Объект.РегистрацияОшибокТестовВЖР, ВызыватьИсключение);
	
	Объект.Мир = ОсновнойОбъект.Мир;
	Объект.СостояниеВыполненияНаборовТестов = ОсновнойОбъект.СостояниеВыполненияНаборовТестов;
	Возврат рез;
КонецФункции

&НаКлиенте
Процедура ПередВыполнениемТестов(ЗапускаемыеТесты)
	
	СписокОшибок = Новый СписокЗначений;
	ВсегоТестов = 0;
	
	СброситьКэшТестовыхОбработок();
	ИнициализироватьСостояниеВыполненияНаборовТестов(ЗапускаемыеТесты);
	
КонецПроцедуры

&НаКлиенте
Функция ВывестиОшибкуВыполненияТеста(СтрокаДереваТестов, ИнфоОшибки, СписокОшибок, РегистрироватьОшибкуВЖР)
	
	СостояниеВыполнения = ЗначенияСостоянияТестов.Сломался;
	
	СтруктураОшибки = Новый Структура;
	
	ТекстОшибки = КраткоеПредставлениеОшибки(ИнфоОшибки);
	Если ЭтоПропущенныйТест(ТекстОшибки) Тогда
		СостояниеВыполнения = ЗначенияСостоянияТестов.НеРеализован;
		СтруктураОшибки.Вставить(""Статус"", СтатусыРезультатаТестирования.ТестПропущен);
		стИнфоОшибки = Новый Структура;
		стИнфоОшибки.Вставить(""Описание"", ТекстОшибки);
	ИначеЕсли ЭтоОшибкаПроверки(ТекстОшибки) Тогда
		СтруктураОшибки.Вставить(""Статус"", СтатусыРезультатаТестирования.ОшибкаПроверки);
		стИнфоОшибки = Новый Структура;
		стИнфоОшибки.Вставить(""Описание"", ТекстОшибки);
	Иначе
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнфоОшибки);
		СтруктураОшибки.Вставить(""Статус"", СтатусыРезультатаТестирования.НеизвестнаяОшибка);
		стИнфоОшибки = СкопироватьИнформациюОбОшибке(ИнфоОшибки);
	КонецЕсли;
	
	ПредставлениеТестовогоСлучая = СтрокаДереваТестов.Имя;
	СтруктураОшибки.Вставить(""ИмяТестовогоНабора"",    СтрокаДереваТестов.ИмяТестовогоНабора);
	СтруктураОшибки.Вставить(""ИмяТестовогоСлучая"",    ПредставлениеТестовогоСлучая);
	СтруктураОшибки.Вставить(""Описание"",              ТекстОшибки);
	СтруктураОшибки.Вставить(""ИнфоОшибки"",            стИнфоОшибки);
	СтруктураОшибки.Вставить(""ЕстьПараметрыТеста"",    СтрокаДереваТестов.ЕстьПараметрыТеста);
	СтруктураОшибки.Вставить(""ПараметрыТеста"",        СтрокаДереваТестов.ПараметрыТеста);
	СтруктураОшибки.Вставить(""ПолныйПуть"",            СтрокаДереваТестов.ПолныйПуть);
	СтруктураОшибки.Вставить(""УИДСтрокиДерева"",       СтрокаДереваТестов._guid);
	
	СтрокаДереваТестов.СписокОшибок.Добавить(СтруктураОшибки);
	СписокОшибок.Добавить(СтруктураОшибки);
	
	НужныйТекстОшибки = ВывестиОшибку(СтруктураОшибки);
	
	Если РегистрироватьОшибкуВЖР Тогда
		ЗарегистрироватьОшибкуТестаСервер(НужныйТекстОшибки, ПредставлениеТестовогоСлучая, СтрокаДереваТестов.ПолныйПуть);
	КонецЕсли;
	
	Если СостояниеВыполнения = ЗначенияСостоянияТестов.НеРеализован Тогда
		ОповеститьОСобытии(""TestNotImplemented"", СтрокаДереваТестов);
	Иначе
		ОповеститьОСобытии(""TestFailed"", СтрокаДереваТестов);
	КонецЕсли;

	УстановитьДанныеТекущегоТеста(Неопределено);	
	
	Возврат СостояниеВыполнения;
	
КонецФункции

&НаКлиенте
Функция СкопироватьИнформациюОбОшибке(Знач ИнфоОшибки)
	
	стИнфоОшибки = Новый Структура(""ИмяМодуля, ИсходнаяСтрока, НомерСтроки, Описание"");
	ЗаполнитьЗначенияСвойств(стИнфоОшибки, ИнфоОшибки);
	стИнфоОшибки.Вставить(""Причина"", Неопределено);
	
	стИнфоОшибкиЦикл = стИнфоОшибки;
	ИнфоОшибки = ИнфоОшибки.Причина;
	Пока ИнфоОшибки <> Неопределено Цикл
		стИнфоОшибкиЦикл.Причина = Новый Структура(""ИмяМодуля, ИсходнаяСтрока, НомерСтроки, Описание"");
		стИнфоОшибкиЦикл = стИнфоОшибкиЦикл.Причина;
		ЗаполнитьЗначенияСвойств(стИнфоОшибкиЦикл, ИнфоОшибки);
		стИнфоОшибкиЦикл.Вставить(""Причина"", Неопределено);
		
		ИнфоОшибки = ИнфоОшибки.Причина;
	КонецЦикла;
	
	Возврат стИнфоОшибки;
	
КонецФункции

&НаКлиенте
Функция ЭтоОшибкаПроверки(ТекстОшибки)
	
	Возврат Найти(ТекстОшибки, ""["" + СтатусыРезультатаТестирования.ОшибкаПроверки + ""]"") = 1;
	
КонецФункции

&НаКлиенте
Функция ЭтоПропущенныйТест(ТекстОшибки)
	
	Возврат Найти(ТекстОшибки, ""[""+ СтатусыРезультатаТестирования.ТестПропущен + ""]"") = 1;
	
КонецФункции

&НаКлиенте
Функция ОповеститьОСобытии(ИмяСобытия, Аргумент1 = Неопределено) Экспорт
	рез = Истина;
	Если MiddleMan <> Неопределено Тогда
		Попытка
			Выполнить(""MiddleMan."" + ИмяСобытия + ""(Аргумент1);"");
		Исключение
			рез = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Оповестить(""xUnitFor1C."" + ИмяСобытия, Аргумент1);
	
	Возврат рез;
КонецФункции

&НаКлиенте
Функция ЗапомнитьСамоеХудшееСостояние(ТекущееСостояние, НовоеСостояние)
	ТекущееСостояние = Макс(ТекущееСостояние, НовоеСостояние); // TODO некоторый хак, который зависит от порядка заполнения в мЗначенияСостоянияТестов
	Возврат ТекущееСостояние;
КонецФункции

&НаСервере
Процедура ЗарегистрироватьНачалоПрохожденияТестаСервер(ИмяТестовогоСлучая, ПолныйПуть)
	Объект().ЗарегистрироватьНачалоПрохожденияТеста(ИмяТестовогоСлучая, ПолныйПуть);
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОшибкуТестаСервер(НужныйТекстОшибки, ИмяТестовогоСлучая, ПолныйПуть)
	Объект().ЗарегистрироватьОшибкуТеста(НужныйТекстОшибки, ИмяТестовогоСлучая, ПолныйПуть);
КонецПроцедуры

&НаКлиенте
Функция ИдентификаторПустогоКонтекста()
	Возврат ""UF_xUnitFor1C_Empty"";
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// КОНТРОЛЬ СОСТОЯНИЯ ВЫПОЛНЕНИЯ НАБОРОВ ТЕСТОВ

&НаКлиенте
Процедура ИнициализироватьСостояниеВыполненияНаборовТестов(ЗапускаемыеТесты)
	
	Объект.СостояниеВыполненияНаборовТестов = Новый Структура;
	
	Для Каждого ИдентификаторТеста Из ЗапускаемыеТесты Цикл
		
		ТестовыйМетод = Объект.ДеревоТестов.НайтиПоИдентификатору(ИдентификаторТеста);
		ЗарегистрироватьТестовыйМетодКЗапуску(ТестовыйМетод);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьТестовыйМетодКЗапуску(ТестовыйМетод)
	
	Состояние = СостояниеВыполненияНабораТестовТестовогоМетода(Тестовыйметод);
	Если Состояние = Неопределено Тогда
		Состояние = ДобавитьСостояниеВыполненияНабораТестовТестовогоМетода(ТестовыйМетод);
	КонецЕсли;
	
	Состояние.ТестыКЗапуску.Вставить(ИдентификаторПоУИД(ТестовыйМетод._GUID));
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьСостояниеВыполненияНабораТестовТестовогоМетода(ТестовыйМетод)
	
	Состояние = Новый Структура;
	Состояние.Вставить(""ЭтоПервыйТестВНаборе"", Истина);
	Состояние.Вставить(""ТестыКЗапуску"", Новый Структура);
	
	Объект.СостояниеВыполненияНаборовТестов.Вставить(ИдентификаторТестовогоНабора(ТестовыйМетод), Состояние);
	Возврат Состояние;
	
КонецФункции

&НаКлиенте
Процедура УчестьЗапускТеста(ТестовыйМетод)
	
	Состояние = СостояниеВыполненияНабораТестовТестовогоМетода(Тестовыйметод);
	Состояние.ТестыКЗапуску.Удалить(ИдентификаторПоУИД(ТестовыйМетод._GUID));
	Состояние.ЭтоПервыйТестВНаборе = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоПервыйТестовыйМетодНабора(ТестовыйМетод)
	
	Состояние = СостояниеВыполненияНабораТестовТестовогоМетода(Тестовыйметод);
	Возврат Состояние.ЭтоПервыйТестВНаборе;
	
КонецФункции

&НаКлиенте
Функция ЭтоПоследнийТестовыйМетодНабора(ТестовыйМетод)
	
	Состояние = СостояниеВыполненияНабораТестовТестовогоМетода(Тестовыйметод);
	Возврат (Состояние.ТестыКЗапуску.Количество() = 0);
	
КонецФункции

&НаКлиенте
Функция СостояниеВыполненияНабораТестовТестовогоМетода(Тестовыйметод)
	Перем Состояние;
	
	Объект.СостояниеВыполненияНаборовТестов.Свойство(ИдентификаторТестовогоНабора(ТестовыйМетод), Состояние);
	Возврат Состояние;
	
КонецФункции

&НаКлиенте
Функция ИдентификаторТестовогоНабора(ТестовыйМетод)
	
	ТестовыйНабор = ТестовыйМетод.ПолучитьРодителя();
	Возврат ИдентификаторПоУИД(ТестовыйНабор._GUID) + ТестовыйМетод.ИмяОсновнойУправляемойФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторПоУИД(УИД)
	
	Возврат ""_"" + СтрЗаменить(УИД, ""-"", ""_"");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ОТЧЕТА О ТЕСТИРОВАНИИ

&НаСервере
Процедура ПодготовитьДанныеТестовДляОтчетаТестирования()
	
	АдресОсновныхДанныхОтчетаТестирования = Объект().ПодготовитьДанныеТестовОтчетаТестирования(Объект.ДеревоТестов, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтчетТестирования(датаНачалаТестирования)
	
	ОтчетТестирования = ПолучитьОтчетТестирования(датаНачалаТестирования, ТипОтчетаОТестировании);
	
	Если ОтчетТестирования <> Неопределено Тогда
		ПоказатьОтчетТестирования(ОтчетТестирования);
		Если Не ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			ЗаписатьФайлОтчетТестирования(ОтчетТестирования);
		КонецЕсли;
	Иначе // все тесты прошли
		Если Не ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			УдалитьФайлыОтчетовТестирования();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращаем Неопределено, если все тесты прошли
&НаСервере
Функция ПолучитьОтчетТестирования(Знач датаНачалаТестирования, Знач ТипОтчета = ""mxl"") Экспорт
	Возврат Объект().ПолучитьОтчетТестирования(АдресОсновныхДанныхОтчетаТестирования, датаНачалаТестирования, ТипОтчета, СписокОшибок, ВсегоТестов);
КонецФункции

&НаКлиенте
Процедура ПоказатьОтчетТестирования(Отчет)
	
	ЗаголовокОкнаОтчета = СтрЗаменить(НСтр(""ru = 'Отчет об автоматическом тестировании, xUnitFor1C v.%1'""), ""%1"", ВерсияСервер());
	
	ТипКонтейнераОтчета = ТипЗнч(Отчет);
	Если ТипКонтейнераОтчета = Тип(""ТабличныйДокумент"") Тогда
		Отчет.Показать(ЗаголовокОкнаОтчета);
	ИначеЕсли ТипКонтейнераОтчета = Тип(""ТекстовыйДокумент"") Тогда
		Отчет.Показать(ЗаголовокОкнаОтчета);
	Иначе
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(Строка(Отчет));
		Текст.Показать(ЗаголовокОкнаОтчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлОтчетТестирования(Отчет)
	
	Попытка
		ТипКонтейнераОтчета = ТипЗнч(Отчет);
		Если ТипКонтейнераОтчета = Тип(""ТекстовыйДокумент"") Тогда
			Отчет.Записать(ПутьОтчетаТестирования);
		ИначеЕсли ТипКонтейнераОтчета = Тип(""ТабличныйДокумент"") Тогда
			Отчет.Записать(ПутьОтчетаТестирования, ТипФайлаТабличногоДокумента[ТипОтчетаОТестировании]);
		Иначе
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(Строка(Отчет));
			Текст.Записать(ПутьОтчетаТестирования);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлыОтчетовТестирования()
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Выполнить(""НачатьУдалениеФайлов(, ПутьОтчетаТестирования)"");
	Иначе
		Попытка
			УдалитьФайлы(ПутьОтчетаТестирования);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТипОтчетаТестирования(Ю_Тест, ТипОтчета);
	
	Если ЗначениеЗаполнено(ТипОтчета) Тогда
		Ю_Тест.ТипОтчетаОТестировании = ТипОтчета;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПутьОтчетаТестирования(Путь, Имя = Неопределено);
	
	ПутьОтчетаТестирования = ДобавитьКонечныйРазделительПути(Путь) + ?(Имя = Неопределено, ""лог_тестирования."" + РасширениеФайлаПоТипуОтчета(ТипОтчетаОТестировании), Имя);
	
КонецПроцедуры

&НаКлиенте
Функция РасширениеФайлаПоТипуОтчета(ТипОтчета)
	
	Возврат ТипОтчета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИСТОРИЯ ВЫБОРА ТЕСТОВ

&НаСервере
Процедура ДобавитьВИсториюКонтекст(ИмяИстории, Путь)
	
	ДобавитьВИсторию(ЭтаФорма, ИмяИстории, Путь, ДлинаИстории, ""Подключаемый_КомандаЗагрузитьТестыИзИстории"");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВИсторию(Форма, ИмяИстории, Путь, ДлинаИстории, Действие)
	
	История = Форма[ИмяИстории];
	Элементы = Форма.Элементы;
	Команды = Форма.Команды;
	
	Если ТипЗнч(Путь) <> Тип(""Массив"") Тогда
		Пути = Новый Массив;
		Пути.Добавить(Путь);
	Иначе
		Пути = Путь;
	КонецЕсли;
	
	Для Каждого ВыбранныйПуть Из Пути Цикл
		Элемент = История.НайтиПоЗначению(ВыбранныйПуть);
		Если Элемент = Неопределено Тогда
			История.Вставить(0, ВыбранныйПуть);
			Если История.Количество() = ДлинаИстории + 1 Тогда
				История.Удалить(ДлинаИстории);
			Иначе
				Команда = Команды.Добавить(ИмяИстории + Формат(История.Количество() - 1, ""ЧН=0; ЧГ=0""));
				Команда.Действие = Действие;
				ПунктМеню = Элементы.Добавить(Команда.Имя, Тип(""КнопкаФормы""), Элементы[ИмяИстории]);
				ПунктМеню.ИмяКоманды = Команда.Имя;
			КонецЕсли;
		Иначе
			Индекс = История.Индекс(Элемент);
			Если Индекс > 0 Тогда
				История.Сдвинуть(Элемент, -Индекс);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из История Цикл
		ПунктМеню = Элементы[ИмяИстории + Формат(История.Индекс(Элемент), ""ЧН=0; ЧГ=0"")];
		ПунктМеню.Заголовок = Элемент.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьИсторию(ИмяИстории, История)
	
	КоличествоПунктовИстории = История.Количество();
	Для Индекс = 1 По КоличествоПунктовИстории Цикл
		ДобавитьВИсториюКонтекст(ИмяИстории, История[КоличествоПунктовИстории - Индекс]);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКИ

&НаСервере
Процедура ИнициализироватьНастройки()
	
	УстановитьЗначенияНастроекПоУмолчанию(ЭтаФорма);
	ВосстановитьНастройки();
	ПривестиИнерфейсВСоответствиеСНастройками(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияНастроекПоУмолчанию(Ю_Тест)
	
	Ю_Тест.ДлинаИстории = 10;
	
	Объект = Ю_Тест.Объект;
	Объект.РегистрацияПрохожденияТестовВЖР = Ложь;
	Объект.РегистрацияОшибокТестовВЖР = Ложь;
	Объект.РежимОтладки = Ложь;
	Объект.СлучайныйПорядокВыполнения = Ложь;
	
	Ю_Тест.Пути.Очистить();
	
	УстановитьТипОтчетаТестирования(Ю_Тест, ""mxl"");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Настройки = ХранилищеОбщихНастроек.Загрузить(""xUnitFor1C"");
	Если ТипЗнч(Настройки) <> Тип(""Структура"") Тогда
		Настройки = Новый Структура;
	КонецЕсли;
	
	Настройки.Вставить(""РегистрацияПрохожденияТестовВЖР"", Объект.РегистрацияПрохожденияТестовВЖР);
	Настройки.Вставить(""РегистрацияОшибокТестовВЖР"", Объект.РегистрацияОшибокТестовВЖР);
	Настройки.Вставить(""РежимОтладки"", Объект.РежимОтладки);
	Настройки.Вставить(""СлучайныйПорядокВыполнения"", Объект.СлучайныйПорядокВыполнения);
	
	Настройки.Вставить(""Пути"", Пути.ВыгрузитьЗначения());
	
	Настройки.Вставить(""ДлинаИстории"", ДлинаИстории);
	Настройки.Вставить(""ИсторияВыбораМест"", ИсторияВыбораМест.ВыгрузитьЗначения());
	Настройки.Вставить(""ИсторияВыбораФайлов"", ИсторияВыбораФайлов.ВыгрузитьЗначения());
	
	ХранилищеОбщихНастроек.Сохранить(""xUnitFor1C"",, Настройки);
	
	СброситьПризнак_БылаОшибкаПриПредыдущейЗагрузкеСервер();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	Настройки = ХранилищеОбщихНастроек.Загрузить(""xUnitFor1C"");
	Если ТипЗнч(Настройки) = Тип(""Структура"") Тогда
		
		Настройки.Свойство(""РегистрацияПрохожденияТестовВЖР"", Объект.РегистрацияПрохожденияТестовВЖР);
		Настройки.Свойство(""РегистрацияОшибокТестовВЖР"", Объект.РегистрацияОшибокТестовВЖР);
		Настройки.Свойство(""РежимОтладки"", Объект.РежимОтладки);
		Настройки.Свойство(""СлучайныйПорядокВыполнения"", Объект.СлучайныйПорядокВыполнения);
		
		Если Настройки.Свойство(""Пути"") Тогда
			Пути.ЗагрузитьЗначения(Настройки.Пути);
		КонецЕсли;
		
		Если Настройки.Свойство(""ДлинаИстории"") И ЗначениеЗаполнено(Настройки.ДлинаИстории) Тогда
			ДлинаИстории = Настройки.ДлинаИстории;
		КонецЕсли;
		Если Настройки.Свойство(""ИсторияВыбораМест"") Тогда
			ВосстановитьИсторию(Элементы.ИсторияВыбораМест.Имя, Настройки.ИсторияВыбораМест);
		КонецЕсли;
		Если Настройки.Свойство(""ИсторияВыбораФайлов"") Тогда
			ВосстановитьИсторию(Элементы.ИсторияВыбораФайлов.Имя, Настройки.ИсторияВыбораФайлов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПривестиИнерфейсВСоответствиеСНастройками(Ю_Тест)
	
	Элементы = Ю_Тест.Элементы;
	Объект = Ю_Тест.Объект;
	
	Элементы.КомандаРегистрацияПрохожденияТестовВЖР.Пометка = Объект.РегистрацияПрохожденияТестовВЖР;
	Элементы.КомандаРегистрацияОшибокТестовВЖР.Пометка = Объект.РегистрацияОшибокТестовВЖР;
	Элементы.КомандаСлучайныйПорядокВыполнения.Пометка = Объект.СлучайныйПорядокВыполнения;
	Элементы.КомандаВключитьРежимОтладки.Пометка = Объект.РежимОтладки;
	
КонецПроцедуры

&НаСервере
Процедура СброситьПризнак_БылаОшибкаПриПредыдущейЗагрузкеСервер()
	Объект().УстановитьНастройку_БылаОшибкаПриПредыдущейЗагрузке(Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = """" Тогда
		Возврат """";
	КонецЕсли;
	
	Возврат Символы.ПС + ДопСообщениеОшибки;
КонецФункции

&НаКлиенте
Функция Новый_НаборТестов() Экспорт
	Возврат Новый Массив;
КонецФункции

&НаКлиенте
Функция НаборТестов_Добавить(НаборТестов, ИмяТестовогоСлучая, П1 = Неопределено, П2 = Неопределено, П3 = Неопределено,
                             П4 = Неопределено, П5 = Неопределено, П6 = Неопределено, П7 = Неопределено) Экспорт
	НаборТестов.Добавить(ИмяТестовогоСлучая);
	
	Возврат НаборТестов;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьНеобязательнуюПроцедуруОбъекта(Объект, ИмяПроцедуры, Параметры = Неопределено)
	
	ПараметрыМетода = ПараметрыСтрокой(Параметры);
	
	Попытка
		Выполнить(""Объект."" + ИмяПроцедуры + ""("" + ПараметрыМетода + "");"");
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ;
		Если Не ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ИмяПроцедуры) Тогда
			ВызватьИсключение;
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьНеобязательнуюФункциюОбъекта(Объект, ИмяФункции, Параметры = Неопределено, ЗначениеПоУмолчанию = Неопределено, ЕстьМетодОбъекта = Неопределено)
	
	ПараметрыМетода = ПараметрыСтрокой(Параметры);
	
	Попытка
		Значение = Вычислить(""Объект."" + ИмяФункции + ""("" + ПараметрыМетода + "")"");
		ЕстьМетодОбъекта = Истина;
		Возврат Значение;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ;
		Если Не ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ИмяФункции) Тогда
			ВызватьИсключение;
		КонецЕсли;
		ЕстьМетодОбъекта = Ложь;
	КонецПопытки;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, имяМетода)
	Возврат Найти(ТекстОшибки, ""Метод объекта не обнаружен ("" + ИмяМетода + "")"") > 0
		Или Найти(ТекстОшибки, ""Object method not found ("" + ИмяМетода + "")"") > 0;
КонецФункции

&НаКлиенте
Функция ДобавитьКонечныйРазделительПути(Знач Каталог)
	
	Если ПустаяСтрока(Каталог) Тогда
		Возврат Каталог;
	КонецЕсли;
	
	Разделитель = ""\"";
	
	СисИнфо = Новый СистемнаяИнформация;
	Если Найти(Строка(СисИнфо.ТипПлатформы), ""Linux"") > 0 Тогда
		Разделитель = ""/"";
	КонецЕсли;
		
	Если Прав(Каталог, 1) <> Разделитель Тогда
		Каталог = Каталог + Разделитель;
	КонецЕсли;
	
	Возврат Каталог;
	
КонецФункции


// }


// Экспорт нужен для тестов
&НаКлиенте
Функция ОткрытьИнструмент(ИмяИнструмента) Экспорт
	
	Если Не ЭтоВстроеннаяОбработка Тогда
		Если ЕстьПоддержкаАсинхронныхВызовов Тогда
			Оповещение = Вычислить(""Новый ОписаниеОповещения(""""ОткрытьИнструментПослеПоискаЗапускателяТестов"""", ЭтотОбъект, ИмяИнструмента)"");
			Выполнить(""НачатьПоискФайлов(Оповещение, ИспользуемоеИмяФайла);"");
		Иначе
			НайденныеФайлы = НайтиФайлы(ИспользуемоеИмяФайла);
			Возврат ОткрытьИнструментПослеПоискаЗапускателяТестов(НайденныеФайлы, ИмяИнструмента);
		КонецЕсли;
	Иначе
		ИмяОбработки = ИмяИнструмента;
		Если Не ЕстьВстроеннаяОбработкаСервер(ИмяОбработки) Тогда
			Сообщить(СтрЗаменить(НСтр(""ru = 'Инструмент/встроенная обработка <%1> не найден в конфигурации'""), ""%1"", ИмяИнструмента));
			Возврат Неопределено;
		КонецЕсли;
		Возврат ОткрытьИнструментПослеПолученияОбработки(ИмяОбработки, ИмяИнструмента);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОткрытьИнструментПослеПоискаЗапускателяТестов(НайденныеФайлы, ИмяИнструмента) Экспорт
	
	Если НайденныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр(""ru = 'Не удалось найти путь к xddTestRunner'""));
		Сообщить(СтрЗаменить(НСтр(""ru = 'Не удалось открыть инструмент <%1>'""), ""%1"", ИмяИнструмента));
		Возврат Неопределено;
	КонецЕсли;
	
	ПутьВнешнихИнструментов = НайденныеФайлы[0].Путь;
	
	ПутьИнструмента = ПутьВнешнихИнструментов + ИмяИнструмента + "".epf"";
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить(""ИмяИнструмента"", ИмяИнструмента);
	ДополнительныеПараметры.Вставить(""ПутьИнструмента"", ПутьИнструмента);
	ДополнительныеПараметры.Вставить(""ПутьВнешнихИнструментов"", ПутьВнешнихИнструментов);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить(""Новый ОписаниеОповещения(""""ОткрытьИнструментПослеПоискаИнструмента"""", ЭтотОбъект, ДополнительныеПараметры)"");
		Выполнить(""НачатьПоискФайлов(Оповещение, ПутьИнструмента);"");
	Иначе
		НайденныеФайлы = НайтиФайлы(ПутьИнструмента);
		Возврат ОткрытьИнструментПослеПоискаИнструмента(НайденныеФайлы, ДополнительныеПараметры);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОткрытьИнструментПослеПоискаИнструмента(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ИмяИнструмента = ДополнительныеПараметры.ИмяИнструмента;
	ПутьИнструмента = ДополнительныеПараметры.ПутьИнструмента;
	Если НайденныеФайлы.Количество() = 0 Тогда
		Сообщить(СтрЗаменить(СтрЗаменить(НСтр(""ru = 'Инструмент <%1> не найден в каталоге <%2>'""), ""%1"", ИмяИнструмента), ""%2"", ПутьИнструмента));
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяОбработки = ПодключитьНаСервереВнешнююОбработкуОтКлиента(ПутьИнструмента, Строка(Новый УникальныйИдентификатор()));
	Возврат ОткрытьИнструментПослеПолученияОбработки(ИмяОбработки, ИмяИнструмента, ДополнительныеПараметры.ПутьВнешнихИнструментов);
	
КонецФункции

&НаКлиенте
Функция ОткрытьИнструментПослеПолученияОбработки(ИмяОбработки, ИмяИнструмента, ПутьВнешнихИнструментов = """")
	
	ИдентификаторИнструмента = ?(ЭтоВстроеннаяОбработка, ""Обработка"", ""ВнешняяОбработка"") + ""."" + ИмяОбработки;
	ФормаИнструмента = ПолучитьФорму(ИдентификаторИнструмента + "".Форма"");
	Если ФормаИнструмента = Неопределено Тогда
		Сообщить(СтрЗаменить(НСтр(""ru = 'Инструмент <%1>: не удалось получить основную управляемую форму!'""), ""%1"", ИмяИнструмента));
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЭтоВстроеннаяОбработка Тогда
		Попытка
			ФормаИнструмента.ПутьОбработкиЗапускателяТестов = ПутьВнешнихИнструментов;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ОткрытьФорму(ФормаИнструмента);
	Возврат ФормаИнструмента;
	
КонецФункции

&НаКлиенте
Функция МетаданныеИмя() Экспорт
	Возврат МетаданныеИмяСервер();
КонецФункции

&НаСервере
Функция МетаданныеИмяСервер()
	ОсновнойОбъект = Объект();
	НайденноеИмя = ОсновнойОбъект.Метаданные().Имя;
	
	Возврат НайденноеИмя;
КонецФункции



&НаКлиенте
Процедура ИнициализироватьИндикаторВыполнения(КоличествоТестовыхСлучаев = 0)
	
	Элементы.ИндикаторВыполнения.МаксимальноеЗначение = КоличествоТестовыхСлучаев;
	ИндикаторВыполнения = 0; //Элементы.ИндикаторВыполнения.Значение = 1;
	Элементы.ИндикаторВыполнения.ЦветРамки = Новый Цвет(0, 174, 0); // Зеленый.
	
	ОбновитьОтображениеДанных();
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
// Сравнить две строки версий.
//
// Параметры
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), ""0.0.0.0"", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), ""0.0.0.0"", СтрокаВерсии2);
	Версия1 = РазложитьСтрокуВМассивПодстрок(Строка1, ""."");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение СтрЗаменить(НСтр(""ru = 'Неправильный формат параметра СтрокаВерсии1: %1'""), ""%1"", СтрокаВерсии1);
	КонецЕсли;
	Версия2 = РазложитьСтрокуВМассивПодстрок(Строка2, ""."");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение СтрЗаменить(НСтр(""ru = 'Неправильный формат параметра СтрокаВерсии2: %1'""), ""%1"", СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = "","", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = "" "", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = "" "" Тогда
				Результат.Добавить("""");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СкопироватьСтруктуру(Знач Источник, Знач СписокПолей = """", Знач ИсключаемыеПоля = """")
	
	Если Не ПустаяСтрока(СписокПолей) Тогда
		Приемник = Новый Структура(СписокПолей);
		ЗаполнитьЗначенияСвойств(Приемник, Источник);
	Иначе
		Если ПустаяСтрока(ИсключаемыеПоля) Тогда
			Исключить = Новый Структура;
		Иначе
			Исключить = Новый Структура(ИсключаемыеПоля);
		КонецЕсли;
		Приемник = Новый Структура;
		Для Каждого КлючЗначение Из Источник Цикл
			Если Не Исключить.Свойство(КлючЗначение.Ключ) Тогда
				Приемник.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

//}

////////////////////////////////////////////////////////////////////////////////
// ПОДДЕРЖКА АСИНХРОННОЙ ОБРАБОТКИ ФАЙЛОВ

&НаКлиенте
Функция СвойстваФайла(Файл, Оповещение = Неопределено)
	
	Контекст = Новый Структура;
	Контекст.Вставить(""Оповещение"", Оповещение);
	Контекст.Вставить(""Результат"", Новый Структура);
	
	Если ТипЗнч(Файл) = Тип(""Файл"") Тогда
		Контекст.Вставить(""Файл"", Файл);
		Возврат СвойстваФайлаПослеИнициализацииФайла(Контекст.Файл, Контекст);
	Иначе
		Если ЕстьПоддержкаАсинхронныхВызовов Тогда
			Контекст.Вставить(""Файл"", Вычислить(""Новый Файл""));
			Оповещение = Вычислить(""Новый ОписаниеОповещения(""""СвойстваФайлаПослеИнициализацииФайла"""", ЭтотОбъект, Контекст, """"ОбработатьФайлПослеОшибки"""", ЭтотОбъект)"");
			Контекст.Файл.НачатьИнициализацию(Оповещение, Файл);
		Иначе
			Попытка
				Контекст.Вставить(""Файл"", Новый Файл(Файл));
				Возврат СвойстваФайлаПослеИнициализацииФайла(Контекст.Файл, Контекст);
			Исключение
				Возврат ОбработатьФайлПослеОшибки(ИнформацияОбОшибке(), Неопределено, Контекст);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОбработатьФайлПослеОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип(""ИнформацияОбОшибке"") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
	КонецЕсли;
	
	Контекст.Результат.Вставить(""ОписаниеОшибки"", ОписаниеОшибки);
	
	Возврат СвойстваФайлаВернутьРезультат(Контекст)
	
КонецФункции

&НаКлиенте
Функция СвойстваФайлаПослеИнициализацииФайла(Файл, Контекст) Экспорт
	
	Контекст.Результат.Вставить(""Файл"", Файл);
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить(""Новый ОписаниеОповещения(""""СвойстваФайлаПослеПроверкиСуществования"""", ЭтотОбъект, Контекст, """"ОбработатьФайлПослеОшибки"""", ЭтотОбъект)"");
		Контекст.Файл.НачатьПроверкуСуществования(Оповещение);;
	Иначе
		Существует = Контекст.Файл.Существует();
		Возврат СвойстваФайлаПослеПроверкиСуществования(Существует, Контекст);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СвойстваФайлаПослеПроверкиСуществования(Существует, Контекст) Экспорт
	
	Контекст.Результат.Вставить(""Существует"", Существует);
	
	Если Не Существует Тогда
		Возврат СвойстваФайлаВернутьРезультат(Контекст);
	КонецЕсли;
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить(""Новый ОписаниеОповещения(""""СвойстваФайлаПослеПроверкиЭтоКаталог"""", ЭтотОбъект, Контекст, """"ОбработатьФайлПослеОшибки"""", ЭтотОбъект)"");
		Контекст.Файл.НачатьПроверкуЭтоКаталог(Оповещение);
	Иначе
		ЭтоКаталог = Контекст.Файл.ЭтоКаталог();
		Возврат СвойстваФайлаПослеПроверкиЭтоКаталог(ЭтоКаталог, Контекст);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СвойстваФайлаПослеПроверкиЭтоКаталог(ЭтоКаталог, Контекст) Экспорт
	
	Контекст.Результат.Вставить(""ЭтоКаталог"", ЭтоКаталог);
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить(""Новый ОписаниеОповещения(""""СвойстваФайлаПослеПроверкиЭтоФайл"""", ЭтотОбъект, Контекст, """"ОбработатьФайлПослеОшибки"""", ЭтотОбъект)"");
		Контекст.Файл.НачатьПроверкуЭтоФайл(Оповещение);
	Иначе
		ЭтоФайл = Контекст.Файл.ЭтоФайл();
		Возврат СвойстваФайлаПослеПроверкиЭтоФайл(ЭтоФайл, Контекст);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СвойстваФайлаПослеПроверкиЭтоФайл(ЭтоФайл, Контекст) Экспорт
	
	Контекст.Результат.Вставить(""ЭтоФайл"", ЭтоФайл);
	
	Возврат СвойстваФайлаВернутьРезультат(Контекст);
	
КонецФункции

&НаКлиенте
Функция СвойстваФайлаВернутьРезультат(Контекст)
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Выполнить(""ВыполнитьОбработкуОповещения(Контекст.Оповещение, Контекст.Результат);"");
	Иначе
		Возврат Контекст.Результат;
	КонецЕсли;
	
КонецФункции
",
{4,31,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",9176d5a2-441b-4c0a-b8b7-bf86d41bf1d9}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,4,
{1,
{0,07f739b4-709b-41bf-8096-032bddefd0f9}
},
{1,
{0,092b3fc1-7ced-4d20-8a28-79b535f8a9c4}
},
{1,
{0,a2724854-2f5c-4048-b7b2-02cbb9cb7fa3}
},
{1,
{0,e46a4b91-3cc7-4188-b6f0-96c31aa42e19}
}
},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"Пути",
{1,2,
{"en","Path to test cases"},
{"ru","Пути к тестовым случаям"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,1,
{0}
},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"ЗначенияТиповСтроки",
{1,1,
{"ru","Значения типов строки"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{6},0,"ЗначенияСостоянияТестов",
{1,1,
{"ru","Значения состояния тестов"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"ПутиНадпись",
{1,1,
{"ru","Пути надпись"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{8},0,"АдресВХИнформатор",
{1,1,
{"ru","Адрес ВХ Информатор"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{9},0,"ЗначениеМодульИлиФорма",
{1,1,
{"ru","Значение модуль или форма"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{10},0,"ВсегоТестов",
{1,1,
{"ru","Всего тестов"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{11},0,"СписокОшибок",
{1,1,
{"ru","Список ошибок"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{12},0,"ПутьОтчетаТестирования",
{1,1,
{"ru","Путь отчета тестирования"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{13},0,"ТипОтчетаОТестировании",
{1,1,
{"ru","Тип отчета о тестировании"}
},
{"Pattern",
{"S",10,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{7},0,"ЗапретИспользованияИнформатора",
{1,1,
{"ru","Запрет использования информатора"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{14},0,"ВерсияПлатформы",
{1,1,
{"ru","Версия платформы"}
},
{"Pattern",
{"S",3,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{15},0,"ТаблицаИменаФорм",
{1,1,
{"ru","Таблица имена форм"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,4,
{5,1,0,"ИмяОбъекта",
{1,1,
{"ru","Имя объекта"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"ИмяФормы",
{1,1,
{"ru","Имя формы"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"GUID",
{1,1,
{"ru","GUID"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"ОсновнаяФорма",
{1,1,
{"ru","Основная форма"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{16},0,"ИндикаторВыполнения",
{1,1,
{"ru","Индикатор выполнения"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{17},0,"ОчередьОповещений",
{1,1,
{"ru","Очередь оповещений"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{18},0,"ИмяВнешнейОбработки",
{1,1,
{"ru","Имя внешней обработки (используется для запуска внешних инструментов)"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{19},0,"ЭтоВстроеннаяОбработка",
{1,1,
{"ru","Это встроенная обработка"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{21},0,"СтрокаДереваТестовОтладки",
{1,1,
{"ru","Строка дерева тестов отладки"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{22},0,"ЕстьПоддержкаНемодальныхФорм",
{1,1,
{"ru","Есть поддержка немодальных форм"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{23},0,"ИсторияВыбораМест",
{1,1,
{"ru","История выбора мест"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,1,"ElementType",
{"#",f5c65050-3bbb-11d5-b988-0050bae0a95d,
{"Pattern",
{"S"}
}
}
},
{0,0}
},
{9,
{24},0,"ДлинаИстории",
{1,1,
{"ru","Длина истории"}
},
{"Pattern",
{"N",10,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{25},0,"ИсторияВыбораФайлов",
{1,1,
{"ru","История выбора файлов"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,1,"ElementType",
{"#",f5c65050-3bbb-11d5-b988-0050bae0a95d,
{"Pattern",
{"S"}
}
}
},
{0,0}
},
{9,
{26},0,"ЭтоЗапускВПакетномРежиме",
{1,1,
{"ru","Это запуск в пакетном режиме"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{27},0,"СтатусыРезультатаТестирования",
{1,1,
{"ru","Статусы результата тестирования"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"БылаОшибкаПриПредыдущейЗагрузке",
{1,1,
{"ru","Была ошибка при предыдущей загрузке"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{20},0,"АдресОбъектаНаСервере",
{1,1,
{"ru","Адрес объекта на сервере"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{28},0,"ИспользуемоеИмяФайла",
{1,1,
{"ru","Используемое имя файла"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{29},0,"ЕстьПоддержкаАсинхронныхВызовов",
{1,1,
{"ru","Есть поддержка асинхронных вызовов"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{30},0,"ОчередьЗагрузки",
{1,1,
{"ru","Очередь загрузки"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{31},0,"АдресОсновныхДанныхОтчетаТестирования",
{1,1,
{"ru","Адрес основных данных отчета тестирования"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},1,
{0,
{2,
{1},
{0,74ab8988-f52c-40cb-9b09-66a817b93074}
},18,
{5,1,0,"Имя",
{1,1,
{"ru","Имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"ВремяВыполнения",
{1,1,
{"ru","Время выполнения"}
},
{"Pattern",
{"N",15,4,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"ПолныйПуть",
{1,1,
{"ru","Полный путь"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"ТипСтроки",
{1,1,
{"ru","Тип строки"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"Состояние",
{1,1,
{"ru","Состояние"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"ТестовыйСлучайОбъектМетаданныхИмя",
{1,1,
{"ru","Имя объекта метданных Тестового случая (внешней обработки)"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"_GUID",
{1,1,
{"ru","GUID"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,8,0,"МодульИлиФорма",
{1,1,
{"ru","Модуль или форма"}
},
{"Pattern",
{"N",3,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,9,0,"ПараметрыТеста",
{1,0},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,10,0,"ЕстьПараметрыТеста",
{1,1,
{"ru","Есть параметры теста"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,11,0,"ИмяТестовогоСлучая",
{1,1,
{"ru","Имя тестового случая"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,12,0,"ПредставлениеПути",
{1,1,
{"ru","Представление пути"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,13,0,"ИмяОсновнойУправляемойФормы",
{1,1,
{"ru","Имя основной управляемой формы"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,14,0,"КоличествоТестов",
{1,1,
{"ru","Количество тестов"}
},
{"Pattern",
{"N",10,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,15,0,"ЭтоВнутренняяОбработка",
{1,1,
{"ru","Это внутренняя обработка"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,18,0,"РазрешенСлучайныйПорядокВыполнения",
{1,1,
{"ru","Разрешен случайный порядок выполнения"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,16,0,"ИмяТестовогоНабора",
{1,1,
{"ru","Имя тестового набора"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,17,0,"СписокОшибок",
{1,1,
{"ru","Список ошибок"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0}
},0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,1,
{0,"Пути",
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},0}
},
{0,18,
{7,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаЗагрузитьТестовыйНабор",
{1,1,
{"ru","Загрузить наборы"}
},
{1,1,
{"ru","Загрузить тестовые случаи из указанного каталога"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаЗагрузитьТестовыйНабор",2,0,0,
{0,0},1,0},
{7,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаЗагрузитьТестовыеСлучаи",
{1,1,
{"ru","Загрузить тесты из файла"}
},
{1,1,
{"ru","Загрузить выбранные тестовые случаи из файла"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаЗагрузитьТестовыеСлучаи",2,0,0,
{0,0},1,0},
{7,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаВыполнитьВсеТесты",
{1,1,
{"ru","Выполнить все тесты (F7)"}
},
{1,1,
{"ru","Команда выполнить все тесты"}
},
{0,
{0,
{"B",1},0}
},
{0,118,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаВыполнитьВсеТесты",2,0,0,
{0,0},1,0},
{7,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаПерезагрузитьВсеТесты",
{1,1,
{"ru","Перезагрузить"}
},
{1,1,
{"ru","Команда перезагрузить все тесты"}
},
{0,
{0,
{"B",1},0}
},
{0,82,8},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаПерезагрузитьВсеТесты",2,0,0,
{0,0},1,0},
{7,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаВыполнитьВыделенныеТесты",
{1,1,
{"ru","Выполнить выделенные (Ctrl+Enter)"}
},
{1,1,
{"ru","Команда выполнить выделенные тесты"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,0ce78048-0196-4f80-a781-9829cdb7f43e},"",-1,-1,1,0,""},"КомандаВыполнитьВыделенныеТесты",2,0,0,
{0,0},1,0},
{7,
{6,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОПроекте",
{1,1,
{"ru","О проекте xUnitFor1C"}
},
{1,1,
{"ru","О проекте xUnitFor1C"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,3b2a508b-f36e-4e0b-9dc0-70b2b56276a9},"",-1,-1,1,0,""},"ОПроекте",2,0,0,
{0,0},1,0},
{7,
{7,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ГенераторМакетовДанных",
{1,1,
{"ru","Генератор макетов данных"}
},
{1,1,
{"ru","Генератор макетов данных на базе реальных данных"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ГенераторМакетовДанных",3,0,0,
{0,0},1,0},
{7,
{8,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьГУИД",
{1,1,
{"ru","Показать ГУИД"}
},
{1,1,
{"ru","Показать ГУИД"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьГУИД",3,0,0,
{0,0},1,0},
{7,
{9,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаЗагрузитьТестыИзКонфигурации",
{1,1,
{"ru","Загрузить тесты из конфигурации"}
},
{1,1,
{"ru","Загрузить тесты из конфигурации"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаЗагрузитьТестыИзКонфигурации",3,0,0,
{0,0},1,0},
{7,
{10,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаЗагрузитьТестыИзКонфигурацииПоИмени",
{1,1,
{"ru","Загрузить тесты из конфигурации (имя теста начинается на Тест_*)"}
},
{1,1,
{"ru","Загрузить тесты из конфигурации (имя теста начинается на Тест_*)"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаЗагрузитьТестыИзКонфигурацииПоИмени",3,0,0,
{0,0},1,0},
{7,
{11,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаЗагрузитьТолькоВыделенныеТесты",
{1,1,
{"ru","Загрузить только выделенные тесты"}
},
{1,1,
{"ru","Команда загрузить только выделенные тесты"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаЗагрузитьТолькоВыделенныеТесты",3,0,0,
{0,0},1,0},
{7,
{12,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаРегистрацияПрохожденияТестовВЖР",
{1,1,
{"ru","Отметка о прогоне тестов в журнале регистрации"}
},
{1,1,
{"ru","Отметка о прогоне тестов в журнале регистрации"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаРегистрацияПрохожденияТестовВЖР",3,0,0,
{0,0},1,0},
{7,
{13,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаРегистрацияОшибокТестовВЖР",
{1,1,
{"ru","Отметка об ошибках тестов в журнале регистрации"}
},
{1,1,
{"ru","Отметка об ошибках тестов в журнале регистрации"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаРегистрацияОшибокТестовВЖР",3,0,0,
{0,0},1,0},
{7,
{14,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаВыполнятьТестыВСлучайномПорядке",
{1,1,
{"ru","Выполнение тестов в случайном порядке"}
},
{1,1,
{"ru","Команда выполнять тесты в случайном порядке"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаВыполнятьТестыВСлучайномПорядке",3,0,0,
{0,0},1,0},
{7,
{15,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаПерезагрузитьФорму",
{1,1,
{"ru","Перезагрузить браузер тестирования"}
},
{1,1,
{"ru","Команда перезагрузить форму"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаПерезагрузитьФорму",3,0,0,
{0,0},1,0},
{7,
{16,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаВключитьРежимОтладки",
{1,1,
{"ru","Команда включить режим отладки"}
},
{1,1,
{"ru","Команда включить режим отладки"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаВключитьРежимОтладки",3,0,0,
{0,0},1,0},
{7,
{17,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КомандаВыполнитьВыделенныеТестыСИсключением",
{1,1,
{"ru","Выполнить выделенные тесты с исключением"}
},
{1,1,
{"ru","Выполнить выделенные тесты с исключением"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаВыполнитьВыделенныеТестыСИсключением",3,0,0,
{0,0},1,0},
{7,
{18,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьОшибки",
{1,1,
{"ru","Показать ошибки"}
},
{1,1,
{"ru","Показать ошибки"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьОшибки",3,0,0,
{0,0},1,0}
},
{0,0},
{0,0},0,0}