
&НаКлиенте
Перем ПользовательскиеПутиСохр;

&НаКлиенте
Перем MiddleMan;

////////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙС АВТОМАТИЧЕСКИХ ТЕСТОВ

//#Область ИнтерфейсАвтоматическихТестов
	
//#КонецОбласти	


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем версию платформы для определения вызова процедур\функций для 8.2 или 8.3
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = Лев(СистемнаяИнформация.ВерсияПриложения, 3);
	
	ОбъектНаСервере = Объект();
	ЭтаФорма.Заголовок = ОбъектНаСервере.ЗаголовокФормы();
	
	ЗапретИспользованияИнформатора = Истина;
	
	Если ЗначениеЗаполнено(Параметры.Пути) Тогда
        ПутиПараметр = Параметры.Пути;
    КонецЕсли;
    
    //{ Состояния тестов - ВАЖЕН порядок заполнения в мЗначенияСостоянияТестов, используется в ЗапомнитьСамоеХудшееСостояние
    ЗначенияСостоянияТестов = Новый Структура;
    ЗначенияСостоянияТестов.Вставить("НеВыполнялся", 0);
    ЗначенияСостоянияТестов.Вставить("Прошел", 		 1);
    ЗначенияСостоянияТестов.Вставить("НеРеализован", 2);
    ЗначенияСостоянияТестов.Вставить("Сломался", 	 3);
	ЗначенияСостоянияТестов = Новый ФиксированнаяСтруктура(ЗначенияСостоянияТестов);
    //} 

    //{ Типы строк дерева тестов
    ЗначенияТиповСтроки = Новый Структура;
    ЗначенияТиповСтроки.Вставить("КаталогТестов",  0);
    ЗначенияТиповСтроки.Вставить("ТестовыйСлучай", 1);
    ЗначенияТиповСтроки.Вставить("ТестовыйМетод",  2);
	ЗначенияТиповСтроки = Новый ФиксированнаяСтруктура(ЗначенияТиповСтроки);
    //} 
    
    ЗначениеМодульИлиФорма = Новый Структура();
    ЗначениеМодульИлиФорма.Вставить("Модуль", 1);
    ЗначениеМодульИлиФорма.Вставить("Форма",  2);
	ЗначениеМодульИлиФорма = Новый ФиксированнаяСтруктура(ЗначениеМодульИлиФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПутиПараметр) Тогда
		ПользовательскиеПутиСохр = Пути;
		Пути = ПутиПараметр;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пути) Тогда
		
		ОбновитьНадписьПути();
		
		Попытка
			LoadAllTests();
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ТекстСообщения = НСтр("ru='ОШИБКА загрузки тестов: %ТекстОшибки%'; en='Error loading testcases: %ТекстОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", ТекстОшибки); 
			ВывестиСообщение(ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

// Обработка оповещений о загрузке или ходе выполнения тестов.
// 
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Возможные события:
	// 		xUnitFor1C.TestLoaded
	// 		xUnitFor1C.TestPassed
	// 		xUnitFor1C.TestNotInplemented
	// 		xUnitFor1C.TestFailed
	
	Если ИмяСобытия = "xUnitFor1C.TestPassed" Тогда
		
		ИндикаторВыполнения = ИндикаторВыполнения + 1; //Элементы.ИндикаторВыполнения.Значение = Элементы.ИндикаторВыполнения.Значение + 1;
		
	ИначеЕсли ИмяСобытия = "xUnitFor1C.TestNotImplemented" Тогда
		
		ИндикаторВыполнения = ИндикаторВыполнения + 1; //Элементы.ИндикаторВыполнения.Значение = Элементы.ИндикаторВыполнения.Значение + 1;
		
		Если Элементы.ИндикаторВыполнения.ЦветРамки <> WebЦвета.Красный Тогда
			Элементы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Золотой;
		КонецЕсли;
				
	ИначеЕсли ИмяСобытия = "xUnitFor1C.TestFailed" Тогда
		
		ИндикаторВыполнения = ИндикаторВыполнения + 1; //Элементы.ИндикаторВыполнения.Значение = Элементы.ИндикаторВыполнения.Значение + 1;
		Элементы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Красный;
		
	ИначеЕсли ИмяСобытия = "xUnitFor1C.LoadSubSystem" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Строка") И НЕ ПустаяСтрока(Параметр)  Тогда
			
			Пути.Очистить();
    		Пути.Добавить(Параметр);
			ОбновитьНадписьПути();
			LoadAllTests();		
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ПутиПараметр) Тогда
        Пути = ПользовательскиеПутиСохр;
	КонецЕсли;
	
КонецПроцедуры

//#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЦЫ ФОРМЫ ДЕРЕВОТЕСТОВ

//#Область ОбработчикиТаблицыФормы_ДеревоТестов

&НаКлиенте
Процедура ДеревоТестовПриАктивизацииСтроки(Элемент)
	Если Элементы.ДеревоТестов.ВыделенныеСтроки.Количество() <= 1 Тогда
		ТекcтКоманды = "Выполнить тест";
	Иначе
		ТекcтКоманды = "Выполнить выбранные тесты";
	КонецЕсли;
	Элементы.ДеревоТестовКонтекстноеМенюКомандаВыполнитьВыделенныеТесты.Заголовок = ТекcтКоманды;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ВключаяПодчиненные = Ложь)
	
	Для каждого СтрокаДерева из Объект.ДеревоТестов.ПолучитьЭлементы() Цикл
		Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
		Элементы.ДеревоТестов.Развернуть(Идентификатор, ВключаяПодчиненные);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(СтрокиДереваТестов, ОставитьРазвернутым)
	ЭлементДеревоТестов = Элементы.ДеревоТестов;
	Для каждого СтрокаДерева из СтрокиДереваТестов Цикл
		Если Не ОставитьРазвернутым Тогда
			Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
			Если СтрокаДерева.Состояние = ЗначенияСостоянияТестов.Сломался или 
				СтрокаДерева.Состояние = ЗначенияСостоянияТестов.НеРеализован Тогда
				
					ЭлементДеревоТестов.Развернуть(Идентификатор, Ложь);
			Иначе
					ЭлементДеревоТестов.Свернуть(Идентификатор);			
			КонецЕсли;
		КонецЕсли;
		СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(СтрокаДерева.ПолучитьЭлементы(), Ложь);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеВыполненияРодителей(СтрокаДереваТестов) Экспорт
	СтрокаРодителя = СтрокаДереваТестов.ПолучитьРодителя();
	Если СтрокаРодителя = Неопределено Тогда
		СтрокаРодителя = Объект.ДеревоТестов.НайтиПоИдентификатору(СтрокаДереваТестов.ПолучитьИдентификатор()).ПолучитьРодителя();
		Если СтрокаРодителя = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗапомнитьСамоеХудшееСостояние(СтрокаРодителя.Состояние, СтрокаДереваТестов.Состояние);
	ИзменитьСостояниеВыполненияРодителей(СтрокаРодителя);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустуюСтрокуДерева(СтрокаТеста, РодительскаяСтрока)
	Если СтрокаТеста <> Неопределено И СтрокаТеста.ПолучитьЭлементы().Количество() = 0 Тогда
		Если РодительскаяСтрока <> Неопределено Тогда
			РодительскаяСтрока.ПолучитьЭлементы().Удалить(СтрокаТеста);
		Иначе
			Объект.ДеревоТестов.ПолучитьЭлементы().Удалить(СтрокаТеста);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Функция ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(РодительскаяСтрока)
	коллекцияСтрок = РодительскаяСтрока.ПолучитьЭлементы();
	Если коллекцияСтрок.Количество() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	количествоТестов = 0;
	Для каждого СтрокаДерева из коллекцияСтрок Цикл
		лКоличество = ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(СтрокаДерева);
		СтрокаДерева.КоличествоТестов = лКоличество;
        количествоТестов = количествоТестов + лКоличество;
	КонецЦикла;
	Возврат количествоТестов;
КонецФункции

//#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

//#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнитьВсеТесты(Команда)	
	ОчиститьСообщения(); 
    RunAllTests();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерезагрузитьВсеТесты(Команда)
    LoadAllTests();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТестовыйНабор(Команда)
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("en='Choose a folder with testcases'; ru='Выберите каталог с тестовыми случаями'");
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Пути.Очистить();
        Пути.Добавить(ДиалогОткрытияФайла.Каталог);	
	Иначе
	    Возврат;
	КонецЕсли;
	
    ОбновитьНадписьПути();
    LoadAllTests();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТестовыеСлучаи(Команда)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Фильтр = НСтр("en='External processing form files (*.epf, *.erf)|*.epf; *.erf'; ru='Файлы внешних обработок (*.epf, *.erf)|*.epf; *.erf'");
	ДиалогОткрытияФайла.Заголовок = НСтр("en='Choose an external processing form file'; ru='Выберите файл с внешней обработкой'");
    Если ДиалогОткрытияФайла.Выбрать() Тогда
        Пути.Очистить();
        Для каждого ПолноеИмяФайла Из ДиалогОткрытияФайла.ВыбранныеФайлы Цикл
            Пути.Добавить(ПолноеИмяФайла);
        КонецЦикла;
    Иначе
        Возврат;
    КонецЕсли;

    ОбновитьНадписьПути();
    LoadAllTests();

	РазвернутьСтрокиДерева(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТолькоВыделенныеТесты(Команда)
	
	Пути.Очистить();
	МассивИдентификаторовСтрок = Элементы.ДеревоТестов.ВыделенныеСтроки;
	Для каждого Идентификатор Из МассивИдентификаторовСтрок Цикл
		
		СтрокаДерева = Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаДерева.ТипСтроки = ЗначенияТиповСтроки.ТестовыйМетод Тогда
			СтрокаДерева = СтрокаДерева.ПолучитьРодителя();
		КонецЕсли;
		
		Если Пути.НайтиПоЗначению(СтрокаДерева.ПолныйПуть) = Неопределено Тогда
	    	Пути.Добавить(СтрокаДерева.ПолныйПуть);
		КонецЕсли;
		
	КонецЦикла;

    ОбновитьНадписьПути();
    LoadAllTests();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьВыделенныеТесты(Команда)
	ОчиститьСообщения();

	МассивИдентификаторовСтрок = Элементы.ДеревоТестов.ВыделенныеСтроки;
	_ВыполнитьВыбранныеТесты(МассивИдентификаторовСтрок);
	
	Для каждого Идентификатор Из МассивИдентификаторовСтрок Цикл
		ИзменитьСостояниеВыполненияРодителей(Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор));
	КонецЦикла;
	
	СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(Объект.ДеревоТестов.ПолучитьЭлементы(), Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ГенераторМакетовДанных(Команда)
	ИмяИнструмента = "xddDataFixtureGen.epf";
	ОткрытьИнструмент(ИмяИнструмента);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьГУИД(Команда)
	ИмяИнструмента = "xddGuidShow.epf";
	ОткрытьИнструмент(ИмяИнструмента);
КонецПроцедуры

&НаКлиенте
Процедура ОПроекте(Команда)
	ЗапуститьПриложение("https://github.com/xDrivenDevelopment/xUnitFor1C/wiki");
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТестыИзКонфигурации(Команда)
	ЗагрузитьТестыИзКонфигурации("");
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТестыИзКонфигурацииПоИмени(Команда)
	ЗагрузитьТестыИзКонфигурации("Тест_");
КонецПроцедуры

&НаКлиенте
Процедура КомандаРегистрацияПрохожденияТестовВЖР(Команда)
	
	ИзменитьЗначениеРеквизитаИУстановитьПометкуНаКнопке("РегистрацияПрохожденияТестовВЖР", "КомандаРегистрацияПрохожденияТестовВЖР");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРегистрацияОшибокТестовВЖР(Команда)
	
	ИзменитьЗначениеРеквизитаИУстановитьПометкуНаКнопке("РегистрацияОшибокТестовВЖР", "КомандаРегистрацияОшибокТестовВЖР");
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерезагрузитьФорму(Команда)
	
	Перем ИмяРеквизита;
	ИмяРеквизита = ИмяРеквизитаПолныйПутьОбработки(); //"__ИмяФайла1678";
	
	путьФайла = ИмяФайлаВнешнейОбработки_ПерезагрузитьФорму();
	ПерезагрузитьФорму_НайтиИлиСоздатьРеквизитДляСохраненияПутиФайла(ИмяРеквизита);
	
	Если ПустаяСтрока(ЭтаФорма[ИмяРеквизита]) Тогда
		ЭтаФорма[ИмяРеквизита] = путьФайла;
	КонецЕсли;
	
	ИмяОбработки = ПодключитьНаСервереВнешнююОбработкуОтКлиента(ЭтаФорма[ИмяРеквизита], "");
	
	НоваяФорма = ПолучитьФорму(ЭтаФорма.ИмяФормы,,,Истина);	
	НоваяФорма.ПерезагрузитьФорму_НайтиИлиСоздатьРеквизитДляСохраненияПутиФайла(ИмяРеквизита);	
	НоваяФорма[ИмяРеквизита] = ЭтаФорма[ИмяРеквизита];
	
	ОткрытьФорму(НоваяФорма);
	
	Закрыть();
	
КонецПроцедуры

//#КонецОбласти



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//#Область СлужебныеПроцедурыИФункции


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПРОВЕДЕНИЯ ТЕСТИРОВАНИЯ 

//#Область СлужебныеПроцедурыИФункцииДляПроведенияТестирования

// { функции утверждения- проверки значений. 

&НаКлиенте
Процедура Проверить(_Истина, ДопСообщениеОшибки = "") Экспорт
	Если Не _Истина Тогда
		СообщениеОшибки = "Переданный параметр ("+Формат(_Истина, "БЛ=ложь; БИ=истина")+") не является Истиной, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИстину(_Истина, ДопСообщениеОшибки = "") Экспорт
	Проверить(_Истина, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЛожь(_Ложь, ДопСообщениеОшибки = "") Экспорт
	Если _Ложь Тогда
		СообщениеОшибки = "Переданный параметр ("+Формат(_Ложь, "БЛ=ложь; БИ=истина")+") не является Ложью, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 <> _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") не равны, а хотели, чтобы были равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 = _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") равны, а хотели, чтобы были не равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольше(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше <= _Меньше Тогда
		СообщениеОшибки = "Первый параметр ("+_Больше+") меньше или равен второму ("+_Меньше+") а хотели, чтобы был больше." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольшеИлиРавно(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше < _Меньше Тогда
		СообщениеОшибки = "Первый параметр ("+_Больше+") меньше второго ("+_Меньше+") а хотели, чтобы был больше или равен." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньше(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 >= проверяемоеЗначение2 Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> больше или равно, чем <"+проверяемоеЗначение2+">, а ожидалось меньше"+
				ФорматДСО(СообщениеОбОшибке);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньшеИлиРавно(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 > проверяемоеЗначение2 Тогда
		ВызватьИсключение "Значение <"+проверяемоеЗначение1+"> больше, чем <"+проверяемоеЗначение2+">, а ожидалось меньше или равно"+
				ФорматДСО(СообщениеОбОшибке);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнилось(СтрокаВыполнения, ДопСообщениеОшибки = "") Экспорт
	Попытка
		Выполнить(СтрокаВыполнения);
		Упало = Ложь;
	Исключение
		Упало = Истина;
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Упало Тогда
		СообщениеОшибки = "Хотели, чтобы алгоритм """+СтрокаВыполнения+""" выполнился, а он упал с ошибкой """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодВыполнился(Объект, ИмяМетода, ДопСообщениеОшибки = "") Экспорт
	СтрокаВыполнения = "Объект."+ИмяМетода+"()";
	
	Попытка
		Выполнить(СтрокаВыполнения);
		Упало = Ложь;
	Исключение
		Упало = Истина;
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Упало Тогда
		СообщениеОшибки = "Хотели, чтобы алгоритм """+СтрокаВыполнения+""" выполнился, а он упал с ошибкой """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеВыполнилось(СтрокаВыполнения, ОжидаемоеОписаниеОшибки, ДопСообщениеОшибки = "") Экспорт
	Попытка
		Выполнить(СтрокаВыполнения);
		Успех = Истина;
	Исключение
		Успех = Ложь;
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Успех Тогда
		ВызватьИсключение("Хотели, чтобы алгоритм """+СтрокаВыполнения+""" упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
	Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
		ВызватьИсключение("Хотели, чтобы алгоритм """+СтрокаВыполнения+""" упал с сообщением об ошибке """+ОжидаемоеОписаниеОшибки+""", а он упал с сообщением """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодНеВыполнился(Объект, ИмяМетода, ОжидаемоеОписаниеОшибки, ДопСообщениеОшибки = "") Экспорт
	СтрокаВыполнения = "Объект."+ИмяМетода+"()";
	
	Попытка
		Выполнить(СтрокаВыполнения);
		Успех = Истина;
	Исключение
		Успех = Ложь;
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Успех Тогда
		ВызватьИсключение("Хотели, чтобы алгоритм """+СтрокаВыполнения+""" упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
	Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
		ВызватьИсключение("Хотели, чтобы алгоритм """+СтрокаВыполнения+""" упал с сообщением об ошибке """+ОжидаемоеОписаниеОшибки+""", а он упал с сообщением """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

// проверка идет через ЗначениеЗаполнено, но мутабельные значение всегда считаем заполненными
&НаКлиенте
Процедура ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
    Попытка
        фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
    Исключение
        Возврат;
    КонецПопытки; 
    Если НЕ фЗаполнено Тогда
        ВызватьИсключение "Значение ("+ПроверяемоеЗначение+") не заполнено, а ожидалась заполненность" + ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	СообщениеОшибки = "Значение ("+ПроверяемоеЗначение+") заполнено, а ожидалась незаполненность" + ФорматДСО(ДопСообщениеОшибки);
	Попытка
        фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
    Исключение
        ВызватьИсключение СообщениеОшибки;
    КонецПопытки; 
    Если фЗаполнено Тогда
        ВызватьИсключение СообщениеОшибки;
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТип(значение, ТипИлиИмяТипа, ДопСообщениеОшибки = "") Экспорт
    Если ТипЗнч(ТипИлиИмяТипа) = Тип("Строка") Тогда
        искомыйТип = Тип(ТипИлиИмяТипа);
    ИначеЕсли ТипЗнч(ТипИлиИмяТипа) = Тип("Тип") Тогда
        искомыйТип = ТипИлиИмяТипа;
    Иначе
        ВызватьИсключение "ПроверитьТип: Тип значения параметра ТипИлиИмяТипа должен быть <Тип> или <Строка>, а получили <"+ ТипЗнч(ТипИлиИмяТипа) + ">" + ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
    Если ТипЗнч(значение) <> искомыйТип Тогда
        ВызватьИсключение "Типом значения <"+значение+"> является <"+ТипЗнч(значение)+">, а ожидался тип <"+ТипИлиИмяТипа+">."+ФорматДСО(ДопСообщениеОшибки);
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВхождение(строка, подстрокаПоиска, ДопСообщениеОшибки = "") Экспорт
	Если Найти(строка, подстрокаПоиска) = 0 Тогда
		СообщениеОшибки = "Искали в <"+строка+"> подстроку <"+подстрокаПоиска+">, но не нашли." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

//Коллекция - Массив, Структура, Соответствие, ФиксированныйМассив, ФиксированнаяСтруктура, ФиксированноеСоответствие, СписокЗначений
&НаКлиенте
Процедура ПроверитьВхождениеВКоллекцию(Элемент, Коллекция, ДопСообщениеОшибки = "") Экспорт
	Нашли = Неопределено;
	ТипКоллекции = ТипЗнч(Коллекция);
	Если ТипКоллекции = Тип("Массив") или ТипКоллекции = Тип("ФиксированныйМассив") Тогда
		Нашли = Коллекция.Найти(Элемент) <> Неопределено;
	ИначеЕсли ТипКоллекции = Тип("Структура") или ТипКоллекции = Тип("Соответствие") 
			или ТипКоллекции = Тип("ФиксированнаяСтруктура") или ТипКоллекции = Тип("ФиксированноеСоответствие") Тогда
		Для каждого КлючЗначение Из Коллекция Цикл
			Нашли = КлючЗначение.Значение = Элемент;
			Если Нашли Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипКоллекции = Тип("СписокЗначений") Тогда
		Нашли = Коллекция.НайтиПоЗначению(Элемент) <> Неопределено;
	КонецЕсли;
	Если Нашли = Неопределено Тогда
		СообщениеОшибки = "Утверждение ""ПроверитьВхождениеВКоллекцию"" не умеет работать с типом коллекции <"+ТипКоллекции+">." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
	Если Не Нашли Тогда
		СообщениеОшибки = "Не нашли элемент <"+Элемент+"> в коллекции, а хотели, чтобы он был в коллекции." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки = "") Экспорт
	ПроверитьВалидностьЗапросаСКДНаСервере(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры // ПроверитьВалидностьЗапросаСКД()

// Только для внутреннего использования
&НаСервере
Процедура ПроверитьВалидностьЗапросаСКДНаСервере(ТекстЗапроса, ДопСообщениеОшибки = "") 
	Объект().ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки);	
КонецПроцедуры // ПроверитьВалидностьЗапросаСКДНаСервере()

// }

//#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАГРУЗКИ ВЫПОЛНЕНИЯ ТЕСТОВ 

//#Область СлужебныеПроцедурыИФункцииЗагрузкиВыполненияТестов

&НаСервере
Функция Объект() Экспорт
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервере
Функция ВерсияСервер()
	Возврат Объект().Версия();
КонецФункции

//#Область ВнешнееAPI

// { ВНЕШНЕЕ API

// Процедура загружает тесты из внешних файлов и из тестируемой конфигурации
//
// Параметры:
//	Нет
&НаКлиенте
Процедура LoadAllTests() Экспорт
	ИнициализироватьИндикаторВыполнения();
	
	Объект.ДеревоТестов.ПолучитьЭлементы().Очистить();

	Для каждого ЭлементСписка Из Пути Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли 
		
		ПутьКТесту = ЭлементСписка.Значение;
		Если Найти(ВРег(ПутьКТесту), "МЕТАДАННЫЕ.") = 1 Тогда
            ЗагрузитьТестыКонфигурации(Объект.ДеревоТестов, ПутьКТесту);
		Иначе
	        ОбъектФайл = Новый Файл(ПутьКТесту);		
			Если ОбъектФайл.Существует() Тогда
	            ЗагрузитьТесты(Объект.ДеревоТестов, ОбъектФайл);
			Иначе
				ТекстСообщения = НСтр("en='File or directory does not exist ""%ПутьКТесту%""'; ru='Файл или каталог не существует ""%ПутьКТесту%""'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПутьКТесту%", ПутьКТесту); 
	            ВывестиОшибку(ТекстСообщения);
	        КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(Объект.ДеревоТестов);
	РазвернутьСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Функция RunAllTests() Экспорт
	//мОбъектUTR = Неопределено;
	
	МассивИдентификаторовСтрок = Новый Массив();
	Для каждого ЭлементДерева Из Объект.ДеревоТестов.ПолучитьЭлементы() Цикл
		МассивИдентификаторовСтрок.Добавить(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
	_ВыполнитьВыбранныеТесты(МассивИдентификаторовСтрок);
	
	СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(Объект.ДеревоТестов.ПолучитьЭлементы(), Истина);
КонецФункции

&НаКлиенте
Функция OpenBrowserForm() Экспорт
	ЭтаФорма.Открыть();
КонецФункции

&НаКлиенте
Функция SetHandlerObject(obj) Экспорт
	MiddleMan = obj;	
КонецФункции

// }
	
//#КонецОбласти 

&НаКлиенте
Процедура ЗагрузитьТесты(РодительскаяСтрока, ОбъектФайл)
	
	Перем ЭтоФайл, ЭтоКаталог;
	
	ЭтоФайл = ТипЗнч(ОбъектФайл) = Тип("Файл");
	Если ЭтоФайл Тогда
		ЭтоКаталог = ОбъектФайл.ЭтоКаталог();
	ИначеЕсли ТипЗнч(ОбъектФайл) = Тип("Структура") Тогда
		ЭтоКаталог = ОбъектФайл.ТипСтроки = ЗначенияТиповСтроки.КаталогТестов;
		ОбъектФайл.Вставить("Расширение", ".epf");
	КонецЕсли;
	
	GUID = Строка(Новый УникальныйИдентификатор);	
	Если ЭтоКаталог Тогда
		
		ПараметрыСтроки = ПолучитьПустуюСтруктуруПараметровСтроки();
		ПараметрыСтроки.Вставить("Имя", 				ОбъектФайл.Имя);
		ПараметрыСтроки.Вставить("ИмяТестовогоСлучая",	ОбъектФайл.Имя);
		ПараметрыСтроки.Вставить("_GUID", 				GUID);
		ПараметрыСтроки.Вставить("ТипСтроки",			ЗначенияТиповСтроки.КаталогТестов);
		ПараметрыСтроки.Вставить("ПолныйПуть",			ОбъектФайл.ПолноеИмя);
	
		СтрокаКаталога = ДобавитьСтрокуДереваТестов(РодительскаяСтрока, ПараметрыСтроки);  //TODO Развернуть, нужно ли тут оповещение ОповеститьОСобытии("TestLoaded", СтрокаТеста);?
		
		Если ЭтоФайл Тогда
			НайденныеФайлы = НайтиФайлы(ОбъектФайл.ПолноеИмя, "*", Ложь);
		Иначе
			НайденныеФайлы = ОбъектФайл.Строки;
		КонецЕсли;
	
		Для каждого Файл из НайденныеФайлы Цикл
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
			ЗагрузитьТесты(СтрокаКаталога, Файл);		
		КонецЦикла;
		
	ИначеЕсли ОбъектФайл.Расширение = ".epf" ИЛИ ОбъектФайл.Расширение = ".erf" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("GUID", GUID);
		ДополнительныеПараметры.Вставить("Расширение", ОбъектФайл.Расширение);
		ДополнительныеПараметры.Вставить("ВнешнийФайл", ЭтоФайл);
		ДополнительныеПараметры.Вставить("ИмяБезРасширения", ОбъектФайл.ИмяБезРасширения);
		
		Если ТипЗнч(РодительскаяСтрока) <> Тип("ДанныеФормыДерево") Тогда
			ДополнительныеПараметры.Вставить("Идентификатор", РодительскаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
		Если ЭтоФайл = Ложь	Тогда
			ВыполнитьПодключениеОбъектаНаКлиенте(Неопределено, ОбъектФайл.Имя, ОбъектФайл.ПолноеИмя, ДополнительныеПараметры);	
		ИначеЕсли ВерсияПлатформы = "8.3" Тогда
			#Если ТонкийКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
				Выполнить("Оповещение = Новый ОписаниеОповещения(""ВыполнитьПодключениеОбъектаНаКлиенте"", ЭтаФорма, ДополнительныеПараметры);
						|НачатьПомещениеФайла(Оповещение, , ОбъектФайл.ПолноеИмя, Ложь, УникальныйИдентификатор);");	
			#КонецЕсли		
		ИначеЕсли ВерсияПлатформы = "8.2" Тогда
			#Если ТонкийКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
				АдресХранилища = "";
				ПоместитьФайл(АдресХранилища, ОбъектФайл.ПолноеИмя, , Ложь, УникальныйИдентификатор);
				ВыполнитьПодключениеОбъектаНаКлиенте(Неопределено, АдресХранилища, ОбъектФайл.ПолноеИмя, ДополнительныеПараметры);	
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьПустуюСтрокуДерева(СтрокаКаталога, РодительскаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестыИзКонфигурации(ОтборПоИмениТеста)
	
	ПараметрыОткрытия = Новый Структура("ОтборПоИмениТеста, РежимОткрытияОкна ", ОтборПоИмениТеста, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИмяФормыВыбораПодсистемыУФ = СтрЗаменить(ЭтаФорма.ИмяФормы, "УправляемаяФорма", "ФормаВыбораПодсистемУФ");
	ОткрытьФорму(ИмяФормыВыбораПодсистемыУФ, ПараметрыОткрытия, ЭтаФорма); 

КонецПроцедуры


&НаКлиенте
Функция ЗагрузитьТестыКонфигурации(РодительскаяСтрока, Путь) Экспорт
	
	КоллекцияВстроенныхТестов = Новый Массив;
	КоллекцияВстроенныхТестовСервер(КоллекцияВстроенныхТестов, Путь);

	Для каждого Элемент Из КоллекцияВстроенныхТестов Цикл
		ЗагрузитьТесты(РодительскаяСтрока, Элемент);
	КонецЦикла;
	
КонецФункции // ЗагрузитьТестыКонфигурации()

&НаСервере
Функция КоллекцияВстроенныхТестовСервер(КоллекцияВстроенныхТестовСервер, Путь)
	
	ОсновнойОбъект = Объект();

	ДеревоВстроенныхТестов = Новый ДеревоЗначений;
	ДеревоВстроенныхТестов.Колонки.Добавить("Имя");
	ДеревоВстроенныхТестов.Колонки.Добавить("ИмяБезРасширения");
	ДеревоВстроенныхТестов.Колонки.Добавить("ПолноеИмя");
	ДеревоВстроенныхТестов.Колонки.Добавить("ТипСтроки");
	
	ОбъектМетаданных = ОсновнойОбъект.ПолучитьОбъектМетаданныхПоПути(Путь);
	Если ВРег(Лев(ОбъектМетаданных.ПолноеИмя(),11)) = "ПОДСИСТЕМА." Тогда
		ДобавитьИменаТестовПодсистемы(ДеревоВстроенныхТестов, ОбъектМетаданных);
	Иначе
		ДобавитьИмяВстроенногоТестовогоСлучая(ДеревоВстроенныхТестов, ОбъектМетаданных);
	КонецЕсли;

	ВыгрузитьИменаТестовИзДереваВСписокЗначений(ДеревоВстроенныхТестов.Строки, КоллекцияВстроенныхТестовСервер);
	
КонецФункции

&НаСервере
Функция ДобавитьИменаТестовПодсистемы(СтрокаДерева, МетаПодсистема) Экспорт
	
	СтрокаТеста = СтрокаДерева.Строки.Добавить();
	СтрокаТеста.Имя = МетаПодсистема.Имя;
	СтрокаТеста.ПолноеИмя = "Метаданные."+СтрЗаменить(МетаПодсистема.ПолноеИмя(), "Подсистема.", "Подсистемы.");
	СтрокаТеста.ТипСтроки = ЗначенияТиповСтроки.КаталогТестов;
	
	Для каждого МетаПодчиненнаяПодсистема из МетаПодсистема.Подсистемы цикл
		ДобавитьИменаТестовПодсистемы(СтрокаТеста, МетаПодчиненнаяПодсистема);
	КонецЦикла;	
	
	Для каждого МетаОбработка из МетаПодсистема.Состав цикл
		ДобавитьИмяВстроенногоТестовогоСлучая(СтрокаТеста, МетаОбработка);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ДобавитьИмяВстроенногоТестовогоСлучая(СтрокаДерева, МетаОбработка)
	НоваяСтрока = СтрокаДерева.Строки.Добавить();
	НоваяСтрока.Имя = МетаОбработка.Имя;
	НоваяСтрока.ИмяБезРасширения = МетаОбработка.Имя;
	НоваяСтрока.ПолноеИмя = "Метаданные."+СтрЗаменить(МетаОбработка.ПолноеИмя(), "Обработка.", "Обработки.");
	НоваяСтрока.ТипСтроки = ЗначенияТиповСтроки.ТестовыйСлучай;
КонецФункции

&НаСервере
Процедура ВыгрузитьИменаТестовИзДереваВСписокЗначений(СтрокиДереваВстроенныхТестов, КоллекцияВстроенныхТестов)
	Для каждого Строка Из СтрокиДереваВстроенныхТестов Цикл
		НоваяКоллекция = Новый Массив;
		ЭлементКоллекции = Новый Структура("Имя,ИмяБезРасширения,ПолноеИмя,ТипСтроки,Строки");
		ЭлементКоллекции.Имя = Строка.Имя;
		ЭлементКоллекции.ИмяБезРасширения = Строка.ИмяБезРасширения;
		ЭлементКоллекции.ПолноеИмя = Строка.ПолноеИмя;
		ЭлементКоллекции.ТипСтроки = Строка.ТипСтроки;
		ЭлементКоллекции.Строки = НоваяКоллекция;
		КоллекцияВстроенныхТестов.Добавить(ЭлементКоллекции);
		Если Строка.Строки.Количество() > 0 Тогда
			ВыгрузитьИменаТестовИзДереваВСписокЗначений(Строка.Строки, НоваяКоллекция);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПодключениеОбъектаНаКлиенте(Результат, АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Перем GUID;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("GUID", GUID);
	КонецЕсли;

	Идентификатор = ВыполнитьПодключениеОбъектаНаСервере(АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры);
	Для каждого Оповещение Из ОчередьОповещений Цикл
		СтрокаТеста = Объект.ДеревоТестов.НайтиПоИдентификатору(Оповещение.Значение);
		Если СтрокаТеста <> Неопределено Тогда
			ОповеститьОСобытии("TestLoaded", СтрокаТеста);
		КонецЕсли;
	КонецЦикла; 
	ОчередьОповещений.Очистить();
	
	Если Идентификатор <> Неопределено Тогда
		
		СтрокаКаталога = Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор);	
		
		РезультатПоиска = ТаблицаИменаФорм.НайтиСтроки(Новый Структура("GUID, ОсновнаяФорма", GUID, Истина));
		Если РезультатПоиска.Количество() Тогда
			ЗагрузитьСписокТестовыхФормИзОсновнойФормыОбъекта(ЭтаФорма, СтрокаКаталога, РезультатПоиска[0], ДополнительныеПараметры);					
		КонецЕсли;
		
		РезультатПоиска = ТаблицаИменаФорм.НайтиСтроки(Новый Структура("GUID", GUID));
		Для Каждого ЭлементПоиска Из РезультатПоиска Цикл
			ЗагрузитьТестыИзФормыОбъекта(ЭтаФорма, СтрокаКаталога, ЭлементПоиска, ДополнительныеПараметры);
		КонецЦикла;
		
		УдалитьПустуюСтрокуДерева(СтрокаКаталога, СтрокаКаталога.ПолучитьРодителя());
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ВыполнитьПодключениеОбъектаНаСервере(АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры)

	Перем GUID, Расширение, ЭтоВнешнийФайл, ИмяБезРасширения, Идентификатор;
	
	ЮнитОбъект = Объект();
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("GUID", GUID);
		ДополнительныеПараметры.Свойство("Расширение", Расширение);
		ДополнительныеПараметры.Свойство("ВнешнийФайл", ЭтоВнешнийФайл);
		ДополнительныеПараметры.Свойство("ИмяБезРасширения", ИмяБезРасширения);
		ДополнительныеПараметры.Свойство("Идентификатор", Идентификатор);
	КонецЕсли;
	
	Если ЭтоВнешнийФайл Тогда
		ПолныйПуть = ВыбранноеИмяФайла;
	Иначе
		ПолныйПуть = АдресХранилища;
	КонецЕсли;
	
	Если Расширение = ".epf" Тогда
		МенеджерВстроенногоОбъекта = Обработки;
		МенеджерВнешнегоОбъекта = ВнешниеОбработки;
	ИначеЕсли Расширение = ".erf" Тогда
		МенеджерВстроенногоОбъекта = Отчеты;
		МенеджерВнешнегоОбъекта = ВнешниеОтчеты;
	КонецЕсли;
	 
	Попытка
		Если ЭтоВнешнийФайл Тогда
			ИмяОбъекта = МенеджерВнешнегоОбъекта.Подключить(АдресХранилища, GUID, Ложь);
			ВнешнийОбъект = МенеджерВнешнегоОбъекта.Создать(GUID);
		Иначе
			ИмяОбъекта = АдресХранилища;
			ВнешнийОбъект = МенеджерВстроенногоОбъекта[ИмяОбъекта].Создать();		
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru='ОШИБКА загрузки тестов: %ТекстОшибки%, %ВыбранноеИмяФайла%'; en='Error loading testcases: %ТекстОшибки%, %ВыбранноеИмяФайла%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", ТекстОшибки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВыбранноеИмяФайла%", ВыбранноеИмяФайла);
		ЮнитОбъект.ВывестиСообщение(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
						
	ПараметрыСтроки = ПолучитьПустуюСтруктуруПараметровСтроки();
	ПараметрыСтроки.Вставить("Имя",	ИмяБезРасширения);
	ПараметрыСтроки.Вставить("ИмяТестовогоСлучая", ИмяБезРасширения);
	ПараметрыСтроки.Вставить("_GUID", GUID);
	ПараметрыСтроки.Вставить("ТипСтроки", ЗначенияТиповСтроки.ТестовыйСлучай);
	ПараметрыСтроки.Вставить("ПолныйПуть", ПолныйПуть);
	ПараметрыСтроки.Вставить("ЭтоВнутренняяОбработка", НЕ ЭтоВнешнийФайл);
	Если Идентификатор = Неопределено Тогда
		НоваяСтрока = ДобавитьСтрокуДереваТестов(Объект.ДеревоТестов, ПараметрыСтроки);	 //TODO Развернуть, нужно ли тут оповещение ОповеститьОСобытии("TestLoaded", СтрокаТеста);?
	Иначе
		НоваяСтрока = ДобавитьСтрокуДереваТестов(Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор), ПараметрыСтроки); //TODO Развернуть, нужно ли тут оповещение ОповеститьОСобытии("TestLoaded", СтрокаТеста);?
	КонецЕсли;
	
	ЗагрузитьСписокТестовыхФормИзМодуляОбъекта(ЮнитОбъект, НоваяСтрока, ВнешнийОбъект, ДополнительныеПараметры);
	ЗагрузитьТестыИзМодуляОбъекта(ЮнитОбъект, НоваяСтрока, ВнешнийОбъект);
	
	Возврат НоваяСтрока.ПолучитьИдентификатор();
				
КонецФункции // ВыполнитьПодключениеОбъектаНаСервере()


&НаКлиенте
Процедура ЗагрузитьТестыИзФормыОбъекта(ЮнитОбъект, Родитель, ВнешнийОбъект, ДополнительныеПараметры)
			
	Попытка
		ИмяФормыОбъекта = ПолучитьИмяФормыОбъекта(ВнешнийОбъект, ДополнительныеПараметры);
		ВнешняяФорма = ПолучитьФорму(ИмяФормыОбъекта, Новый Структура("АвтоТест"), ЭтаФорма);
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru='ОШИБКА загрузки тестов: %ТекстОшибки%'; en='Error loading testcases: %ТекстОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", ТекстОшибки);
		ЮнитОбъект.ВывестиСообщение(ТекстСообщения);
		Возврат;

	КонецПопытки;
	
	
	Попытка
    	МассивТестовыхМетодов = ВнешняяФорма.ПолучитьСписокТестов(ЮнитОбъект);
	Исключение
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЕстьОшибка_МетодОбъектаНеОбнаружен = ЮнитОбъект.ЕстьОшибка_МетодОбъектаНеОбнаружен(ПредставлениеОшибки, "ПолучитьСписокТестов");
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен Тогда
			ЮнитОбъект.ВывестиОшибку("Не удалось загрузить список тестов для модуля объекта:
				|  Ошибка получения списка тестовых случаев: " + ОписаниеОшибки());	
		КонецЕсли;

		Возврат;
		
	КонецПопытки;
	
	Для каждого ЭлементМассива Из МассивТестовыхМетодов Цикл
	
		ПараметрыСтроки = ПолучитьСтруктуруПараметровСтроки(ЭлементМассива, 
														Родитель.ПолныйПуть, 
														ВнешнийОбъект.ИмяОбъекта, 
														ЗначениеМодульИлиФорма.Форма,
														Родитель.ЭтоВнутренняяОбработка,
														ВнешнийОбъект.ИмяФормы); 		
														
		СтрокаТеста = Родитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТеста, ПараметрыСтроки);

		ОповеститьОСобытии("TestLoaded", СтрокаТеста);
				
	КонецЦикла;
			
КонецПроцедуры // ЗагрузитьТестыИзФормыОбъекта()

&НаКлиенте
Процедура ЗагрузитьСписокТестовыхФормИзОсновнойФормыОбъекта(ЮнитОбъект, Родитель, ВнешнийОбъект, ДополнительныеПараметры)
	
	Перем GUID;
	
	МассивТестовыхФорм = Новый Массив;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("GUID", GUID);
	КонецЕсли;
	
	Попытка
		ИмяФормыОбъекта = ПолучитьИмяФормыОбъекта(ВнешнийОбъект, ДополнительныеПараметры);
		ВнешняяФорма = ПолучитьФорму(ИмяФормыОбъекта, Новый Структура("АвтоТест"), ЭтаФорма);
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru='ОШИБКА загрузки тестовых форм из основной формы объекта: %ТекстОшибки%'; en='Error loading testforms from main object form: %ТекстОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", ТекстОшибки);
		ЮнитОбъект.ВывестиСообщение(ТекстСообщения);
		Возврат;

	КонецПопытки;
	
	Попытка
		
		МассивТестовыхФорм = ВнешняяФорма.ПолучитьСписокТестовыхФорм();
		
		ПараметрыОтбора = Новый Структура("GUID, ОсновнаяФорма", GUID, Ложь);
		РезультатОтбора = ТаблицаИменаФорм.НайтиСтроки(ПараметрыОтбора);
		Для Каждого ЭлементОтбора Из РезультатОтбора Цикл
			ТаблицаИменаФорм.Удалить(ЭлементОтбора);	
		КонецЦикла;
		
		Для Каждого ИмяТестовойФормы Из МассивТестовыхФорм Цикл
			Если ИмяТестовойФормы <> ВнешнийОбъект.ИмяФормы Тогда
				НоваяЗапись = ТаблицаИменаФорм.Добавить();
				НоваяЗапись.GUID = GUID;
				НоваяЗапись.ИмяФормы = ИмяТестовойФормы;
				НоваяЗапись.ИмяОбъекта = ВнешнийОбъект.ИмяОбъекта;
				НоваяЗапись.ОсновнаяФорма = Ложь;
			КонецЕсли;
		КонецЦикла;
		  
	Исключение
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЕстьОшибка_МетодОбъектаНеОбнаружен = ЕстьОшибка_МетодОбъектаНеОбнаружен(ПредставлениеОшибки, "ПолучитьСписокТестовыхФорм");
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен Тогда
			ЮнитОбъект.ВывестиОшибку("Не удалось загрузить список тестовых форм объекта:
				|  Ошибка получения списка тестовых форм: " + ОписаниеОшибки());
			Родитель.Состояние = ЗначенияСостоянияТестов.Сломался; // TODO: нужно ли отображение, что при получении списка форм вывалилась ошибка? 
		КонецЕсли;
		
	КонецПопытки;
		
КонецПроцедуры // ЗагрузитьСписокТестовыхФормИзОсновнойФормыОбъекта()


&НаСервере
Процедура ЗагрузитьТестыИзМодуляОбъекта(ЮнитОбъект, Родитель, ВнешнийОбъект)
		
	Попытка
		МассивТестовыхМетодов = ВнешнийОбъект.ПолучитьСписокТестов(ЮнитОбъект);
	Исключение
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЕстьОшибка_МетодОбъектаНеОбнаружен = ЕстьОшибка_МетодОбъектаНеОбнаружен(ПредставлениеОшибки, "ПолучитьСписокТестов");
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен Тогда
			ЮнитОбъект.ВывестиОшибку("Не удалось загрузить список тестов для модуля объекта:
				|  Ошибка получения списка тестовых случаев: " + ОписаниеОшибки());
			Родитель.Состояние = ЗначенияСостоянияТестов.Сломался;	
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
	МетаданныеИмя = ВнешнийОбъект.Метаданные().Имя;
	Для каждого ЭлементМассива Из МассивТестовыхМетодов Цикл
	
		ПараметрыСтроки = ПолучитьСтруктуруПараметровСтроки(ЭлементМассива, 
														МетаданныеИмя, 
														МетаданныеИмя, 
														ЗначениеМодульИлиФорма.Модуль, 
														Родитель.ЭтоВнутренняяОбработка);
														
		СтрокаТеста = Родитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТеста, ПараметрыСтроки);
		
		ОчередьОповещений.Добавить(СтрокаТеста.ПолучитьИдентификатор());
				
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьТестыИзМодуляОбъекта()

// Загружает список управляемых форм из которых нужно получить тестовые случаи
//
// Параметры:
//	ЮнитОбъект 	  			- ОбработкаОбъект 			- Преобразованный реквизит формы "Объект" в объект прикладного тип
//  Родитель   	  			- ДанныеФормыЭлементДерева 	- Элемент дерева "ДеревоТестов"
//  ВнешнийОбъект 			- ВнешняяОбработкаОбъект, 
//							  ВнешнийОтчетОбъект, 
//							  ОбработкаОбъект, 
//							  ОтчетОбъект 				- Объект содержащий тестовые случаи  
//  ДополнительныеПараметры - Структура 				- Структура с дополнительными параметрами
//		* GUID - Строка(36) - Уникальный идентификатор внешнего объекта 
//
&НаСервере
Процедура ЗагрузитьСписокТестовыхФормИзМодуляОбъекта(ЮнитОбъект, Родитель, ВнешнийОбъект, ДополнительныеПараметры)
	
	Перем GUID;
	
	МассивТестовыхФорм = Новый Массив;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("GUID", GUID);
	КонецЕсли;

	// Обычные формы при проведении тестов в управляемом режиме не поддерживаются  
	ТипФормыОбъекта = Метаданные.СвойстваОбъектов.ТипФормы.Управляемая;
	
	Попытка
		МассивТестовыхФорм = ВнешнийОбъект.ПолучитьСписокТестовыхФорм();
	Исключение
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЕстьОшибка_МетодОбъектаНеОбнаружен = ЕстьОшибка_МетодОбъектаНеОбнаружен(ПредставлениеОшибки, "ПолучитьСписокТестовыхФорм");
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен Тогда
			ЮнитОбъект.ВывестиОшибку("Не удалось загрузить список тестовых форм объекта:
				|  Ошибка получения списка тестовых форм: " + ОписаниеОшибки());
			Родитель.Состояние = ЗначенияСостоянияТестов.Сломался; // TODO: нужно ли отображение, что при получении списка форм вывалилась ошибка? 
		КонецЕсли;
		
	КонецПопытки;
		
	МетаданныеОбъекта = ВнешнийОбъект.Метаданные();
	Если МетаданныеОбъекта.ОсновнаяФорма <> Неопределено Тогда
		ИмяОсновнойФормы = МетаданныеОбъекта.ОсновнаяФорма.Имя;
	ИначеЕсли МетаданныеОбъекта.ДополнительнаяФорма <> Неопределено Тогда
		ИмяОсновнойФормы = МетаданныеОбъекта.ДополнительнаяФорма.Имя;
	Иначе
		ИмяОсновнойФормы = Неопределено;	
	КонецЕсли;
	
	Для каждого Форма Из МетаданныеОбъекта.Формы Цикл
		Если Форма.ТипФормы = ТипФормыОбъекта Тогда
			Если Форма.Имя <> ИмяОсновнойФормы Тогда
				Если МассивТестовыхФорм.Найти(Форма.Имя) = Неопределено Тогда
					Продолжить;	
				КонецЕсли;
			КонецЕсли;
			
			НоваяЗапись = ТаблицаИменаФорм.Добавить();
			НоваяЗапись.GUID = GUID;
			НоваяЗапись.ИмяФормы = Форма.Имя;
			НоваяЗапись.ИмяОбъекта = МетаданныеОбъекта.Имя;
			НоваяЗапись.ОсновнаяФорма = Форма.Имя = ИмяОсновнойФормы;
			
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры // ЗагрузитьСписокТестовыхФормИзМодуляОбъекта()


// Функция возвращает полное имя формы объекта
//
&НаКлиенте
Функция ПолучитьИмяФормыОбъекта(ВнешнийОбъект, ДополнительныеПараметры)
	
	Перем Расширение, ЭтоВнешнийФайл;	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("Расширение", Расширение);
		ДополнительныеПараметры.Свойство("ВнешнийФайл", ЭтоВнешнийФайл);
	КонецЕсли;
	
	ИмяФормыОбъекта = "%Объект%.%ИмяОбъекта%.Форма.%ИмяФормы%";
	ИмяФормыОбъекта = СтрЗаменить(ИмяФормыОбъекта, "%ИмяФормы%", ВнешнийОбъект.ИмяФормы);
	ИмяФормыОбъекта = СтрЗаменить(ИмяФормыОбъекта, "%ИмяОбъекта%", ВнешнийОбъект.ИмяОбъекта);
	Если 		 ЭтоВнешнийФайл И Расширение = ".epf" Тогда
		ИмяФормыОбъекта = СтрЗаменить(ИмяФормыОбъекта, "%Объект%", "ВнешняяОбработка");
	ИначеЕсли 	 ЭтоВнешнийФайл И Расширение = ".erf" Тогда
		ИмяФормыОбъекта = СтрЗаменить(ИмяФормыОбъекта, "%Объект%", "ВнешнийОтчет");	
	ИначеЕсли НЕ ЭтоВнешнийФайл И Расширение = ".epf" Тогда
		ИмяФормыОбъекта = СтрЗаменить(ИмяФормыОбъекта, "%Объект%", "Обработка");	
	ИначеЕсли НЕ ЭтоВнешнийФайл И Расширение = ".erf" Тогда
		ИмяФормыОбъекта = СтрЗаменить(ИмяФормыОбъекта, "%Объект%", "Отчет");	
	Иначе
		ИмяФормыОбъекта = Неопределено; 
	КонецЕсли;
	
	Возврат ИмяФормыОбъекта;
	
КонецФункции // ПолучитьИмяФормыОбъекта()

// Функция добавляет новую строку в ДеревоЗначений, которая соответствует тестовому случаю
//
// Возвращаемое значение:
//	НоваяСтрока - ДанныеФормыЭлементДерева - Новая строка в дереве тестов
//
&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьСтрокуДереваТестов(Родитель, ПараметрыСтроки)
	
	НоваяСтрока = Родитель.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыСтроки);
	
	//ОповеститьОСобытии("TestLoaded", НоваяСтрока); //TODO Возможно удалить всю функцию?
	
	Возврат НоваяСтрока;
	
КонецФункции // ДобавитьСтрокуДереваТестов()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПустуюСтруктуруПараметровСтроки()
	
	ПараметрыСтроки = Новый Структура;
	ПараметрыСтроки.Вставить("Имя");
	ПараметрыСтроки.Вставить("ИмяТестовогоСлучая");
	ПараметрыСтроки.Вставить("_GUID");
	ПараметрыСтроки.Вставить("Состояние");
	ПараметрыСтроки.Вставить("ТипСтроки");
	ПараметрыСтроки.Вставить("ПолныйПуть");
	ПараметрыСтроки.Вставить("МодульИлиФорма");
	ПараметрыСтроки.Вставить("ПараметрыТеста");
	ПараметрыСтроки.Вставить("КоличествоТестов");
	ПараметрыСтроки.Вставить("ЕстьПараметрыТеста");
	ПараметрыСтроки.Вставить("ТестовыйСлучайОбъектМетаданныхИмя");
	ПараметрыСтроки.Вставить("ЭтоВнутренняяОбработка");
	
	Возврат ПараметрыСтроки;
	
КонецФункции // ПолучитьПустуюСтруктуруПараметровСтроки()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруПараметровСтроки(ЭлементМассива, ПолныйПуть, МетаданныеИмя, МодульИлиФорма, ЭтоВнутренняяОбработка, ИмяОсновнойУправляемойФормы = "")
	
	ПараметрыСтроки = ПолучитьПустуюСтруктуруПараметровСтроки();
	Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
		ПараметрыСтроки.Вставить("Имя", ЭлементМассива);
		ПараметрыСтроки.Вставить("ИмяТестовогоСлучая", ЭлементМассива);
	Иначе
		ПредставлениеТеста = ?(ЭлементМассива.Свойство("ПредставлениеТеста") и ЗначениеЗаполнено(ЭлементМассива.ПредставлениеТеста), ЭлементМассива.ПредставлениеТеста, ЭлементМассива.ИмяТеста);
		ПараметрыСтроки.Вставить("Имя", ПредставлениеТеста);
		ПараметрыСтроки.Вставить("ИмяТестовогоСлучая", ЭлементМассива.ИмяТеста);
		
		ЗаданоСпециальноеПредставлениеТеста = ПараметрыСтроки.Имя <> ПараметрыСтроки.ИмяТестовогоСлучая;
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(ЭлементМассива);
		ПараметрыСтроки.Вставить("ПараметрыТеста", СписокЗначений);
		ПараметрыСтроки.Вставить("ЕстьПараметрыТеста", Истина);
			
		Если Не ЗаданоСпециальноеПредставлениеТеста Тогда
			ОписаниеПараметра = "<пусто>";
			Если ЭлементМассива.Свойство("Параметр") Тогда
				ОписаниеПараметра = "" + ЭлементМассива.Параметр;
			КонецЕсли;
			ПараметрыСтроки.Вставить("Имя", ЭлементМассива.ИмяТеста +  "( " + ОписаниеПараметра + " )");
		КонецЕсли;
	КонецЕсли;

	ПараметрыСтроки.Вставить("_GUID", Строка(Новый УникальныйИдентификатор));
	ПараметрыСтроки.Вставить("ТипСтроки", 2); // ЗначенияТиповСтроки.ТестовыйМетод
	ПараметрыСтроки.Вставить("ПолныйПуть", ПолныйПуть);
	ПараметрыСтроки.Вставить("МодульИлиФорма", МодульИлиФорма);
	ПараметрыСтроки.Вставить("ТестовыйСлучайОбъектМетаданныхИмя", МетаданныеИмя);
	ПараметрыСтроки.Вставить("ЭтоВнутренняяОбработка", ЭтоВнутренняяОбработка);
	ПараметрыСтроки.Вставить("ИмяОсновнойУправляемойФормы", ИмяОсновнойУправляемойФормы);	
	
	Возврат ПараметрыСтроки;
	
КонецФункции // ПолучитьСтруктуруПараметровСтроки() 


//#Область ОбработкаПараметровЗапуска

// { Обработка параметров запуска

&НаКлиенте
Процедура ЗаписатьКодВозвратаВЛогФайл(ПутьКФайлуЛога, КодВозврата)
	Если НЕ ПустаяСтрока(ПутьКФайлуЛога) Тогда
		Попытка
			Запись = Новый ЗаписьТекста(ПутьКФайлуЛога);
			Запись.ЗаписатьСтроку(КодВозврата);
			Запись.Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

// Пример строки запуска - "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования"
//	"C:\Program Files (x86)\1cv82\8.2.18.96\bin\1cv8c.exe" /DisableStartupMessages /Execute E:\ТестыИМ\xddTestRunner.epf /S "as-msk-a6122\im_test" /Out "E:\ТестыИМ\Тесты\log.txt"  /C "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования" /LogUI
&НаКлиенте
Функция ОбработатьПараметрыЗапуска(СтрокаПараметровЗапуска)
	
	ПараметрыЗапуска = РазобратьПараметрыЗапускаСервер(СтрокаПараметровЗапуска);
	Если ПараметрыЗапуска = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	естьКоманда_ВыполнитьТестирование 	= ПараметрыЗапуска.Выполнить;
	естьКоманда_Загрузить 				= ПараметрыЗапуска.Загрузить;
	путьКТестам 						= ПараметрыЗапуска.ПутьТестов;
	лЗавершитьРаботуПослеТестирования 	= ПараметрыЗапуска.ОстановитьСистему;
	
	ПутьОтчетаТестирования 	= ПараметрыЗапуска.ПутьОтчета;
	ТипОтчетаОТестировании 	= ПараметрыЗапуска.ФорматОтчета;
	ПутьКФайлуЛога 			= ПараметрыЗапуска.ПутьКодаВозврата;
	
	Объект.РегистрацияПрохожденияТестовВЖР 	= ПараметрыЗапуска.РегистрацияПрохожденияТестовВЖР;
	Элементы.КомандаРегистрацияПрохожденияТестовВЖР.Пометка = Объект.РегистрацияПрохожденияТестовВЖР;
	
	Объект.РегистрацияОшибокТестовВЖР 		= ПараметрыЗапуска.РегистрацияОшибокТестовВЖР;
	Элементы.КомандаРегистрацияОшибокТестовВЖР.Пометка = Объект.РегистрацияОшибокТестовВЖР;
		
	мЭтоВнутренняяОбработка = ПараметрыЗапуска.ВстроенныеТесты;
	
	Если ЗначениеЗаполнено(путьКТестам) Тогда
	    ПутиПараметр.Добавить(путьКТестам);
        ПользовательскиеПутиСохр = Пути;
        Пути = ПутиПараметр;
    КонецЕсли;
    
	Если Не естьКоманда_Загрузить Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаписатьКодВозвратаВЛогФайл(ПутьКФайлуЛога, "1"); //По умолчанию считаем что ошибка. Перед завершением работы запишем 0.

	ОбновитьНадписьПути();
	
	Попытка
		LoadAllTests();
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		ТекстСообщения 	= НСтр("ru='ОШИБКА загрузки тестов: %ТекстОшибки%'; en='Error loading testcases: %ТекстОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", ТекстОшибки); 
		ВывестиСообщение(ТекстСообщения);
		
		Если лЗавершитьРаботуПослеТестирования Тогда
			ЗавершитьРаботуСистемы(Ложь);
			Возврат Ложь;
		КонецЕсли;
		
	КонецПопытки;

	Если естьКоманда_ВыполнитьТестирование Тогда
		
		Попытка
			RunAllTests();
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			ТекстСообщения 	= НСтр("ru='ОШИБКА выполнения тестов: %ТекстОшибки%'; en='Error running testcases: %ТекстОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", ТекстОшибки); 
			ВывестиСообщение(ТекстСообщения);
			
			Если лЗавершитьРаботуПослеТестирования Тогда
				ЗавершитьРаботуСистемы(Ложь);
				Возврат Ложь;
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если лЗавершитьРаботуПослеТестирования Тогда
		
		ЗаписатьКодВозвратаВЛогФайл(ПутьКФайлуЛога, "0");
		ЗавершитьРаботуСистемы(Ложь);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция РазобратьПараметрыЗапускаСервер(СтрокаПараметровЗапуска)
	Возврат Объект().РазобратьПараметрыЗапуска(СтрокаПараметровЗапуска);
КонецФункции

// }

//#КонецОбласти



&НаКлиенте
Процедура ОбновитьНадписьПути()
	
	Если Пути.Количество() = 1 Тогда
        ПутиНадпись = Пути[0].Значение;
        Элементы.ПутиНадпись.МногострочныйРежим = Ложь;
    Иначе
        ПутиНадпись = "";
        КонечныйИндекс = Пути.Количество() - 1;
        Для Индекс = 0 По КонечныйИндекс Цикл
            Если Индекс = КонечныйИндекс Тогда
                ПутиНадпись = ПутиНадпись + Пути[Индекс].Значение;
            Иначе
                ПутиНадпись = ПутиНадпись + Пути[Индекс].Значение + Символы.ПС;
            КонецЕсли;
        КонецЦикла;
        Элементы.ПутиНадпись.МногострочныйРежим = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура изменяет значение реквизита обработки и устанавливает пометку на кнопке командной панели
//
// Параметры:
//	ИмяРеквизитаОбъекта 	 - Строка - Имя реквизита типа "Булево"
//  ИмяКнопкиКоманднойПанели - Строка - Имя кнопки командной панели для которой нужно изменить реквизит "Пометка"
//
&НаКлиенте
Процедура ИзменитьЗначениеРеквизитаИУстановитьПометкуНаКнопке(ИмяРеквизитаОбработки, ИмяКнопкиКоманднойПанели)
	
	Объект[ИмяРеквизитаОбработки] = НЕ Объект[ИмяРеквизитаОбработки];
	Элементы[ИмяКнопкиКоманднойПанели].Пометка = Объект[ИмяРеквизитаОбработки];
	
КонецПроцедуры // ИзменитьЗначениеРеквизитаИУстановитьПометкуНаКнопке()



&НаКлиенте
Функция ВывестиОшибку(Ошибка) Экспорт
	ТипОбъектаОшибка = ТипЗнч(Ошибка);
		
	Если ТипОбъектаОшибка = Тип("Структура") Тогда
		ВывестиСообщение("[" + Ошибка.ИмяТестовогоНабора + ": " + Ошибка.ИмяТестовогоСлучая + "] " + Ошибка.Описание, СтатусСообщения.Важное);
	ИначеЕсли ТипОбъектаОшибка = Тип("ИнформацияОбОшибке") Тогда
		ВывестиСообщение(Ошибка.Описание, СтатусСообщения.Важное);
	Иначе
		ВывестиСообщение(Ошибка, СтатусСообщения.Важное);
	КонецЕсли;
КонецФункции

// Выводит сообщение. В тестах ВСЕГДА должна использоваться ВМЕСТО метода Сообщить().
// 
&НаКлиенте
Функция ВывестиСообщение(ТекстСообщения, Статус = Неопределено)	Экспорт
	Если MiddleMan <> Неопределено Тогда
		Если НЕ ОповеститьОСобытии("Message", ТекстСообщения) Тогда
			ОповеститьОСобытии("ВывестиСообщение", ТекстСообщения);
		КонецЕсли;
    Иначе
		Сообщить(ТекстСообщения);	
	КонецЕсли;
КонецФункции

// Вызывает исключение с заданным текстом ошибки для прерывания выполнения тестового случая.
// 
&НаКлиенте
Функция ПрерватьТест(ТекстОшибки) Экспорт
	
	ВызватьИсключение ТекстОшибки;
	
КонецФункции


//#КонецОбласти

//#КонецОбласти



// { Методы генерации тестовых данных

// количествоСозданныхОбъектов учитывает только созданные элементы справочников, документы и пользователей ИБ. Записи регистров сведений не считаются!
&НаКлиенте
Функция СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, количествоСозданныхОбъектов = 0) Экспорт
	Данные = СоздатьДанныеПоТабличномуДокументуСервер(ТабличныйДокумент, количествоСозданныхОбъектов);
	Возврат Данные;
КонецФункции

&НаСервере
Функция СоздатьДанныеПоТабличномуДокументуСервер(ТабличныйДокумент, количествоСозданныхОбъектов = 0) Экспорт
	Данные = Объект().СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, количествоСозданныхОбъектов);
	Возврат Неопределено; //Данные;
КонецФункции
//}




	



// { работа с тестами



&НаСервере
Функция ПолучитьИмяОсновнойУправляемойФормы(имОбработки)
	Попытка
		лМетаданные = ВнешниеОбработки.Создать(имОбработки).Метаданные();
	Исключение
		лМетаданные = Метаданные.Обработки[имОбработки];
	КонецПопытки;
	//метаФорма = лМетаданные.ОсновнаяФорма;
	МассивФорм = Новый Массив;
	МассивФорм.Добавить(лМетаданные.ОсновнаяФорма);
	МассивФорм.Добавить(лМетаданные.ДополнительнаяФорма);
	Для каждого метаФорма Из МассивФорм Цикл
		Если метаФорма = Неопределено Тогда
			Продолжить;



		КонецЕсли;
		Если метаФорма.ТипФормы = Метаданные.СвойстваОбъектов.ТипФормы.Управляемая Тогда
			Возврат метаФорма.Имя;
		КонецЕсли;
	КонецЦикла;
		//Если метаФорма = Неопределено Тогда
		//	метаФорма = лМетаданные.ДополнительнаяФорма;
		//	Если метаФорма = Неопределено Тогда
		//		Возврат "";
		//	КонецЕсли;
		//КонецЕсли;
		//
		//Если метаФорма.ТипФормы = Метаданные.СвойстваОбъектов.ТипФормы.Управляемая Тогда
		//	Возврат метаФорма.Имя;
		//КонецЕсли;
	Возврат "";
КонецФункции

&НаКлиенте
Функция ПолучитьТестОбъект(ИдентификаторОбработки, имяОсновнойУправляемойФормы)
    Попытка
    	Возврат ПолучитьФорму("ВнешняяОбработка." + ИдентификаторОбработки + ".Форма." + имяОсновнойУправляемойФормы);
    Исключение
	    Попытка
	    	Возврат ПолучитьФорму("Обработка." + ИдентификаторОбработки + ".Форма." + имяОсновнойУправляемойФормы);
	    Исключение
	        Возврат Неопределено;
	    КонецПопытки;
    КонецПопытки;
КонецФункции

&НаКлиенте
Функция ПодключитьНаСервереВнешнююОбработкуОтКлиента(ПолныйПутьФайлаОбработки, ИдентификаторОбработки)
	
	Перем ИмяПодключеннойВнешнейОбработки;
	
	Если ЕстьВстроеннаяОбработкаСервер(ИдентификаторОбработки) Тогда
		ИмяПодключеннойВнешнейОбработки = ИдентификаторОбработки;
	Иначе
		
		ИмяВнешнейОбработки = "";
		#Если ТонкийКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
			
			Если ВерсияПлатформы = "8.3" Тогда
				Выполнить("Оповещение = Новый ОписаниеОповещения(""ПодключитьВнешнююОбработкуСервер"", ЭтаФорма, ИдентификаторОбработки);
						|НачатьПомещениеФайла(Оповещение, , ПолныйПутьФайлаОбработки, Ложь);");	// Адрес действителен только на 1 вызов сервера!		
			ИначеЕсли ВерсияПлатформы = "8.2" Тогда
				АдресХранилища = "";
				ПоместитьФайл(АдресХранилища, ПолныйПутьФайлаОбработки, , Ложь); // Адрес действителен только на 1 вызов сервера!
				ПодключитьВнешнююОбработкуСервер(Неопределено, АдресХранилища, ПолныйПутьФайлаОбработки, ИдентификаторОбработки);	
			КонецЕсли;
			
			ИмяПодключеннойВнешнейОбработки = ИмяВнешнейОбработки;
			
		#КонецЕсли
		
	КонецЕсли;
	
	Возврат ИмяПодключеннойВнешнейОбработки;
	
КонецФункции

&НаСервере
Процедура ПодключитьВнешнююОбработкуСервер(Результат, АдресХранилища, ВыбранноеИмяФайла, ИдентификаторОбработки)
	
    ИмяВнешнейОбработки = ВнешниеОбработки.Подключить(АдресХранилища, ИдентификаторОбработки, Ложь); // подключаю не в безопасном режиме
	
КонецПроцедуры



&НаСервереБезКонтекста
Функция ЕстьВстроеннаяОбработкаСервер(ИдентификаторОбработки)
	Возврат Метаданные.Обработки.Найти(ИдентификаторОбработки) <> Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеВстроеннойОбработкиСервер(ИдентификаторОбработки)
	Возврат Метаданные.Обработки.Найти(ИдентификаторОбработки).Представление();
КонецФункции


&НаКлиенте
Функция ПолучитьТестовыеСлучаи(ТестовыйСлучайОбъект, ТестовыйСлучайИмяФайла)
    Попытка
    	МассивТестовыхМетодов = ТестовыйСлучайОбъект.ПолучитьСписокТестов(ЭтаФорма);
	Исключение
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ;
		
		// TODO если не использовать переменную ниже, а поставить вызов метода в условие, то будет глюк - внутрь условия не попадаем !
		ЕстьОшибка_МетодОбъектаНеОбнаружен = ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, "ПолучитьСписокТестов");
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен Тогда
	    	ВывестиОшибку("Тестовый случай не загружен: " + ТестовыйСлучайИмяФайла + "
	        |  Ошибка получения списка тестовых случаев: " + ОписаниеОшибки());
		КонецЕсли;

    	Возврат Неопределено;
    КонецПопытки;
    	
	Если ТипЗнч(МассивТестовыхМетодов) <> Тип("Массив") Тогда
		ВывестиОшибку("Тест не загружен: " + ТестовыйСлучайИмяФайла + "
		|  Ошибка получения списка тестовых случаев: вместо массива 
        |имен тестовых случаев получен объект <" + Строка(ТипЗнч(МассивТестовыхМетодов)) + ">");

		Возврат Неопределено;			
	КонецЕсли;
	
	Возврат МассивТестовыхМетодов;
КонецФункции

&НаКлиенте
Функция _ВыполнитьВыбранныеТесты(МассивИдентификаторовСтрок)
	Перем ТипОтчетаОТестировании;
	ПередВыполнениемТестовСервер();
	ИнициализироватьИндикаторВыполнения(МассивИдентификаторовСтрок.Количество());
	
	датаНачалаТестирования = ТекущаяДата();
	
	СтрокиДереваТестов = Новый Массив;
	Для каждого Идентификатор Из МассивИдентификаторовСтрок Цикл
		СтрокиДереваТестов.Добавить(Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор));
	КонецЦикла;
	
	СостояниеРезультат = _ВыполнитьТесты(СтрокиДереваТестов);
	
	ТипОтчетаОТестировании = ?(ПустаяСтрока(ЭтаФорма.ТипОтчетаОТестировании), "mxl", ЭтаФорма.ТипОтчетаОТестировании);
		
	табДок = ПолучитьОтчетТестирования(датаНачалаТестирования, ТипОтчетаОТестировании);
	
	имяФайлаТестирования = "лог_тестирования";
	
	файлФайлаТестирования = Новый Файл(ПутьОтчетаТестирования);
	Если файлФайлаТестирования.Существует() И НЕ файлФайлаТестирования.ЭтоКаталог() Тогда 
		имяФайлаТестирования = файлФайлаТестирования.ИмяБезРасширения;
		ПутьОтчетаТестирования = файлФайлаТестирования.Путь;
	ИначеЕсли НЕ файлФайлаТестирования.Существует() И НЕ ПустаяСтрока(файлФайлаТестирования.Расширение) Тогда 
		имяФайлаТестирования = файлФайлаТестирования.ИмяБезРасширения;
		ПутьОтчетаТестирования = файлФайлаТестирования.Путь;
	КонецЕсли;
	
	ПутьОтчетаТестирования = ДополнитьСлешВПуть(ПутьОтчетаТестирования);

	Если табДок <> Неопределено Тогда
		Если НЕ ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			ЗаписатьФайлОтчетТестирования(табДок, имяФайлаТестирования);
		КонецЕсли;
		
		табДок.Показать("Отчет об автоматическом тестировании, xUnitFor1C v." + ВерсияСервер());
	Иначе // все тесты прошли
		Если НЕ ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			УдалитьФайлыОтчетовТестирования(имяФайлаТестирования);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеРезультат;
КонецФункции

&НаКлиенте
Процедура ЗаписатьФайлОтчетТестирования(табДок, имяФайлаТестирования)
	Если ТипОтчетаОТестировании = "xml" Тогда
		ЗаписьXML = Новый ЗаписьXML;
		Попытка
			ЗаписьXML.ОткрытьФайл(ПутьОтчетаТестирования + имяФайлаТестирования + "."+ТипОтчетаОТестировании);
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			ЗаписьXML.ЗаписатьБезОбработки(табДок.ПолучитьТекст());
			ЗаписьXML.Закрыть();
		Исключение
		КонецПопытки;
	Иначе
		
		Попытка
			табДок.Записать(ПутьОтчетаТестирования + имяФайлаТестирования + "."+ТипОтчетаОТестировании, ТипФайлаТабличногоДокумента[ТипОтчетаОТестировании]);
		Исключение
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлыОтчетовТестирования(имяФайлаТестирования)

	Попытка
		УдалитьФайлы(ПутьОтчетаТестирования + "\" + имяФайлаТестирования + ".xlsx");
	Исключение
	КонецПопытки;

	Попытка
		УдалитьФайлы(ПутьОтчетаТестирования + "\" + имяФайлаТестирования + ".mxl");
	Исключение
	КонецПопытки;
	
КонецПроцедуры
 
&НаКлиенте
Функция _ВыполнитьТесты(СтрокиДереваТестов) Экспорт
	СостояниеРезультат = ЗначенияСостоянияТестов.НеВыполнялся;
	Для каждого СтрокаДереваТестов из СтрокиДереваТестов Цикл
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли 
		
		Если СтрокаДереваТестов.ТипСтроки = ЗначенияТиповСтроки.ТестовыйМетод Тогда

			ВсегоТестов = ВсегоТестов + 1; //Объект.мВсегоТестов = Объект.мВсегоТестов + 1;
			
			НовоеСостояние = ВыполнитьТестВЗависимостиОтВидаТеста_МодульИлиФорма(СтрокаДереваТестов, СписокОшибок);
				//Если СтрокаДереваТестов.МодульИлиФорма = ЗначениеМодульИлиФорма.Форма Тогда
				//	НовоеСостояние = ВыполнитьТест(СтрокаДереваТестов);
				//Иначе
				//		//#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
				//		//	
				//		//	НовоеСостояние = ВыполнитьТестТолстыйКлиент(СтрокаДереваТестов.ПолучитьИдентификатор());
				//		//	
				//		//#Иначе
				//		
				//	НовоеСостояние = ВыполнитьТестНаСервере(СтрокаДереваТестов.ПолучитьИдентификатор(), СписокОшибок);
				//		
				//		//#КонецЕсли
				//КонецЕсли;
		Иначе
			НовоеСостояние = _ВыполнитьТесты(СтрокаДереваТестов.ПолучитьЭлементы());
		КонецЕсли;
		
		СтрокаДереваТестов.Состояние = НовоеСостояние;
		ЗапомнитьСамоеХудшееСостояние(СостояниеРезультат, НовоеСостояние);
	КонецЦикла;
	
	Возврат СостояниеРезультат;
КонецФункции

&НаКлиенте
Функция ВыполнитьТестВЗависимостиОтВидаТеста_МодульИлиФорма(СтрокаДереваТестов, СписокОшибок)
	Если Объект.РегистрацияПрохожденияТестовВЖР Тогда
		Родитель = Объект.ДеревоТестов.НайтиПоИдентификатору(СтрокаДереваТестов.ПолучитьИдентификатор()).ПолучитьРодителя();
		ЗарегистрироватьНачалоПрохожденияТестаСервер(СтрокаДереваТестов.ИмяТестовогоСлучая, Родитель.ПолныйПуть);
	КонецЕсли;

	Если СтрокаДереваТестов.МодульИлиФорма = ЗначениеМодульИлиФорма.Форма Тогда
		СостояниеРезультат = ВыполнитьТест(СтрокаДереваТестов);
    Иначе
				//#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
				//	
				//	НовоеСостояние = ВыполнитьТестТолстыйКлиент(СтрокаДереваТестов.ПолучитьИдентификатор());
				//	
				//#Иначе
				
		КоличествоОшибокДо = СписокОшибок.Количество();
		
		ОповеститьОСобытии("TestStart", СтрокаДереваТестов);
		СостояниеРезультат = ВыполнитьТестНаСервере(СтрокаДереваТестов.ПолучитьИдентификатор(), СписокОшибок);
		
		Если КоличествоОшибокДо <> СписокОшибок.Количество() Тогда
			ОповеститьОСобытии("TestFailed", СтрокаДереваТестов);
		Иначе
			ОповеститьОСобытии("TestPassed", СтрокаДереваТестов);			
		КонецЕсли;
		
				//#КонецЕсли
	КонецЕсли;

	СтрокаДереваТестов.Состояние = СостояниеРезультат;
	
	Возврат СостояниеРезультат;
КонецФункции

&НаКлиенте
Функция ВыполнитьТест(СтрокаДереваТестов) Экспорт
	Перем Тест; // специально локальная переменная для исключения циклических ссылок

	ИдентификаторСтроки = СтрокаДереваТестов.ПолучитьИдентификатор();
	
	ИмяТестовогоМетода	= СтрокаДереваТестов.ИмяТестовогоСлучая; //Имя;
	ПолноеИмяТестовогоМетода = СтрокаДереваТестов.Имя;
	
	Если ПустаяСтрока(СтрокаДереваТестов.ТестовыйСлучайОбъектМетаданныхИмя) Тогда
		Возврат ЗначенияСостоянияТестов.НеВыполнялся;
	КонецЕсли;
	
	полныйПуть = СтрокаДереваТестов.ПолныйПуть;
	
	ТестовыйСлучайОбъектМетаданныхИмя = СтрокаДереваТестов.ТестовыйСлучайОбъектМетаданныхИмя;
	Попытка
        лИмяОбработки = ПодключитьНаСервереВнешнююОбработкуОтКлиента(полныйПуть, ТестовыйСлучайОбъектМетаданныхИмя);
	Исключение
		ВывестиОшибку("Тест не загружен: " + полныйПуть + "Ошибка: " + ОписаниеОшибки());

		Возврат ЗначенияСостоянияТестов.Сломался;
	КонецПопытки;
	
	ТекущаяДата = ТекущаяДата();
	Попытка
		Тест = ПолучитьТестОбъект(ТестовыйСлучайОбъектМетаданныхИмя, СтрокаДереваТестов.ИмяОсновнойУправляемойФормы);
		массивТестов = ПолучитьТестовыеСлучаи(Тест, полныйПуть); // возможно, что тест сохранит у себя ссылку на браузер
		ПроверитьЗаполненность(массивТестов, "Не удалось получить тестовые случаи");
	Исключение
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ;
		СостояниеВыполнения = ВывестиОшибкуВыполненияТеста(ПолноеИмяТестовогоМетода, текстОшибки, СтрокаДереваТестов, ОписаниеОшибки(), ИнформацияОбОшибке());
		
		Тест = Неопределено; // для исключения циклических ссылок
		
		Возврат СостояниеВыполнения;
		
	КонецПопытки;
	
	СостояниеВыполнения = ЗначенияСостоянияТестов.НеВыполнялся;
	
	параметрыТеста = СтрокаДереваТестов.ПараметрыТеста;
	естьПараметры = СтрокаДереваТестов.ЕстьПараметрыТеста;
	
	естьТранзакция = Ложь;
	Если естьПараметры Тогда
		естьТранзакция = ?(ТипЗнч(параметрыТеста) = Тип("Структура"), параметрыТеста, параметрыТеста[0].Значение).Свойство("Транзакция", естьТранзакция) 
			или ТипЗнч(естьТранзакция) = Тип("Булево") и естьТранзакция;
		Если естьТранзакция Тогда
			#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
				НачатьТранзакцию();
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
		//TODO Если первый раз запуск setup оказался неуспешным, то при повторном прогоне без перезагрузки
		// не выполнять, также не выполнять для следующих тестовых случаев.
	лСостояниеВыполнения = ВыполнитьПроцедуруТестовогоСлучая(Тест, "ПередЗапускомТеста", ПолноеИмяТестовогоМетода, СтрокаДереваТестов);
	Если лСостояниеВыполнения <> Неопределено Тогда
		СостояниеВыполнения = лСостояниеВыполнения;
	КонецЕсли;
	Если СостояниеВыполнения = ЗначенияСостоянияТестов.Сломался Тогда
		Возврат ЗначенияСостоянияТестов.Сломался;
	КонецЕсли;
		
	переданПараметрТеста = Ложь;
	параметрТеста = "";
	
	Если естьПараметры Тогда
		лПараметрыТеста = ?(ТипЗнч(параметрыТеста) = Тип("Структура"), параметрыТеста, параметрыТеста[0].Значение);
		переданПараметрТеста = лПараметрыТеста.Свойство("Параметр", параметрТеста);
		
		Если переданПараметрТеста Тогда
			строкаПараметров = "параметрТеста";	
		КонецЕсли;
	КонецЕсли;
	
	ОповеститьОСобытии("TestStart", СтрокаДереваТестов);
	
	Попытка
		
		Выполнить("Тест." + ИмяТестовогоМетода + "(" + строкаПараметров + ");");
		
		СостояниеВыполнения = ЗначенияСостоянияТестов.Прошел;
		ОповеститьОСобытии("TestPassed", СтрокаДереваТестов);
	Исключение
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ; //Ошибка.Описание + ". " + Ошибка.Причина.Описание + ". Номер строки: " + Ошибка.НомерСтроки;
		
		Если ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, ИмяТестовогоМетода) Тогда
				//Если Найти(текстОшибки, "Метод объекта не обнаружен ("+ИмяТестовогоМетода+")") > 0 Тогда
			СостояниеВыполнения = ЗначенияСостоянияТестов.НеРеализован;
			ОповеститьОСобытии("TestNotImplemented", СтрокаДереваТестов);
		Иначе
			СостояниеВыполнения = ВывестиОшибкуВыполненияТеста(ПолноеИмяТестовогоМетода, текстОшибки, СтрокаДереваТестов, ОписаниеОшибки(), ИнформацияОбОшибке());
		КонецЕсли;
	КонецПопытки;	
	
	лСостояниеВыполнения = ВыполнитьПроцедуруТестовогоСлучая(Тест, "ПослеЗапускаТеста", ПолноеИмяТестовогоМетода, СтрокаДереваТестов);
	Если лСостояниеВыполнения <> Неопределено Тогда
		СостояниеВыполнения = ЗапомнитьСамоеХудшееСостояние(СостояниеВыполнения, лСостояниеВыполнения); //СостояниеВыполнения = лСостояниеВыполнения;
	КонецЕсли;
	
	Если естьТранзакция Тогда
			#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
				ОтменитьТранзакцию();
			#КонецЕсли
		//ОтменитьТранзакцию_сервер();
	КонецЕсли;
	
	Тест = Неопределено; // для исключения циклических ссылок
	
	СтрокаДереваТестов = Объект.ДеревоТестов.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтрокаДереваТестов.ВремяВыполнения = Число(ТекущаяДата()-ТекущаяДата);
	Возврат СостояниеВыполнения;
КонецФункции


&НаСервере
Функция ВыполнитьТестНаСервере(ИдентификаторСтрокиТестовогоМетода, СписокОшибокРез)
    Возврат Объект().ВыполнитьТест(Объект.ДеревоТестов.НайтиПоИдентификатору(ИдентификаторСтрокиТестовогоМетода), СписокОшибокРез);
КонецФункции

&НаКлиенте
Функция ВыполнитьПроцедуруТестовогоСлучая(Тест, ИмяПроцедуры, ИмяТестовогоСлучая, СтрокаДереваТестов)
	СостояниеВыполнения = Неопределено;
	
	Попытка
		Выполнить("Тест." + ИмяПроцедуры + "();");
	Исключение
		Ошибка = ИнформацияОбОшибке();
		текстОшибки = ПодробноеПредставлениеОшибки(Ошибка) ;
		
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, ИмяПроцедуры) Тогда
				//Если Найти(текстОшибки, "Метод объекта не обнаружен (" + ИмяПроцедуры + ")") = 0 Тогда
			СостояниеВыполнения = ВывестиОшибкуВыполненияТеста(ИмяТестовогоСлучая, текстОшибки, СтрокаДереваТестов, ОписаниеОшибки(), ИнформацияОбОшибке());
		КонецЕсли;
	КонецПопытки;

	Возврат СостояниеВыполнения;

КонецФункции

&НаСервере
Процедура ПередВыполнениемТестовСервер()
	СписокОшибок = Новый СписокЗначений;
	ВсегоТестов = 0;
КонецПроцедуры

// Возвращаем Неопределено, если все тесты прошли
&НаСервере
Функция ПолучитьОтчетТестирования(датаНачалаТестирования, ТипОтчета =  "mxl") Экспорт
		
	Если ТипОтчета = "xml" Тогда
		
		ДеревоТестов = ДанныеФормыВЗначение(Объект.ДеревоТестов, Тип("ДеревоЗначений"));
		Текст = Объект().ВывестиОтчетТестированияВФорматеJunitXML(ДеревоТестов, датаНачалаТестирования, ВсегоТестов, СписокОшибок);
		
		ТабДокумент = Новый ТекстовыйДокумент;
		ТабДокумент.УстановитьТекст(Текст);
		Возврат ТабДокумент;
		
	КонецЕсли;
		
	КоличествоОшибок = СписокОшибок.Количество();
	Если КоличествоОшибок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПрошлоВремени = ТекущаяДата() - датаНачалаТестирования;
	
	ТабДок = Новый ТабличныйДокумент;
	макет = Объект().ПолучитьМакет("ОтчетТестирования");

	Секция = макет.ПолучитьОбласть("Заголовок"); //"R1C1:R6C1");
	Секция.Параметры.ВсегоТестов = ВсегоТестов;
	Секция.Параметры.КоличествоОшибок = СписокОшибок.Количество();
	Секция.Параметры.ПрошлоВремени = ПрошлоВремени;
	Секция.Параметры.ПрошлоВремениСтрока = формат(Дата(1,1,1) + ПрошлоВремени, "ДЛФ=T");
	Секция.Параметры.ВремяВыполненияОдногоТеста = ?(ВсегоТестов = 0, "", Формат(ПрошлоВремени / ВсегоТестов * 1000, "ЧЦ=15; ЧДЦ=2"));
	ТабДок.Вывести(Секция);

	ТабДок.НачатьАвтогруппировкуСтрок();
	
	Для Каждого Ошибка Из СписокОшибок Цикл
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли 

		ВывестиОшибкуВМакет(ТабДок, макет, Ошибка.Значение);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	
	Возврат ТабДок;
КонецФункции

Процедура ВывестиОшибкуВМакет(ТабДок, макет, _Ошибка)
	Секция = макет.ПолучитьОбласть("НаименованиеНабора");
	ЗаполнитьЗначенияСвойств(Секция.Параметры, _Ошибка);
	ТабДок.Вывести(Секция, 1);
	
	Секция = макет.ПолучитьОбласть("НаименованиеТеста");
	ЗаполнитьЗначенияСвойств(Секция.Параметры, _Ошибка);
	ТабДок.Вывести(Секция, 2);
	
	Если _Ошибка.ЕстьПараметрыТеста Тогда
		Секция = макет.ПолучитьОбласть("ПараметрыТеста");
		ЗаполнитьЗначенияСвойств(Секция.Параметры, _Ошибка);
			//Секция.Область("R4C1").Текст = "Параметр метода: "+_Ошибка.ПараметрыТеста;
		ТабДок.Вывести(Секция, 2);
	КонецЕсли;
	
	ИнфоОшибки = _Ошибка.ИнфоОшибки;
	Пока ИнфоОшибки <> Неопределено Цикл
		Секция = макет.ПолучитьОбласть("R1C1:R4C3");
		Секция.Область("R1C3").Текст = ИнфоОшибки.ИмяМодуля + ", строка № "+ИнфоОшибки.НомерСтроки;
		Секция.Область("R2C3").Текст = ИнфоОшибки.ИсходнаяСтрока;
		Секция.Область("R3C3").Текст = ИнфоОшибки.Описание;
		
		ТабДок.Вывести(Секция, 3);
		
		ИнфоОшибки = ИнфоОшибки.Причина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВывестиОшибкуВыполненияТеста(ПолноеИмяТестовогоМетода, текстОшибки, СтрокаДереваТестов, СообщениеОбОшибке, ИнфоОшибки)

	СостояниеВыполнения = ЗначенияСостоянияТестов.Сломался;
	
	СтруктураОшибки = Новый Структура;
	
	стИнфоОшибки = Новый Структура("ИмяМодуля,ИсходнаяСтрока,НомерСтроки,Описание");
	ЗаполнитьЗначенияСвойств(стИнфоОшибки, ИнфоОшибки);
	стИнфоОшибки.Вставить("Причина",  Неопределено);
	
	стИнфоОшибкиЦикл = стИнфоОшибки;
	ИнфоОшибки = ИнфоОшибки.Причина;
	Пока ИнфоОшибки <> Неопределено Цикл  // Артур TODO
		стИнфоОшибкиЦикл.Причина = Новый Структура("ИмяМодуля,ИсходнаяСтрока,НомерСтроки,Описание");
		стИнфоОшибкиЦикл = стИнфоОшибкиЦикл.Причина;
		ЗаполнитьЗначенияСвойств(стИнфоОшибкиЦикл, ИнфоОшибки);
		стИнфоОшибкиЦикл.Вставить("Причина",  Неопределено);

		ИнфоОшибки = ИнфоОшибки.Причина;
	КонецЦикла;
	
	Родитель = Объект.ДеревоТестов.НайтиПоИдентификатору(СтрокаДереваТестов.ПолучитьИдентификатор()).ПолучитьРодителя();
	СтруктураОшибки.Вставить("ИмяТестовогоНабора", Родитель.Имя);
	СтруктураОшибки.Вставить("ИмяТестовогоСлучая", ПолноеИмяТестовогоМетода);				
	
	СтруктураОшибки.Вставить("Описание", текстОшибки);
	
	СтруктураОшибки.Вставить("СообщениеОбОшибке",     СообщениеОбОшибке);
	СтруктураОшибки.Вставить("ИнфоОшибки",            стИнфоОшибки);
	СтруктураОшибки.Вставить("ЕстьПараметрыТеста",    СтрокаДереваТестов.ЕстьПараметрыТеста);
	СтруктураОшибки.Вставить("ПараметрыТеста",        СтрокаДереваТестов.ПараметрыТеста);
	СтруктураОшибки.Вставить("ПолныйПуть",            СтрокаДереваТестов.ПолныйПуть);
	СтруктураОшибки.Вставить("УИДСтрокиДерева",       СтрокаДереваТестов._guid);
	
	СписокОшибок.Добавить(СтруктураОшибки);
	
	ВывестиОшибку(СтруктураОшибки);
	
	ОповеститьОСобытии("TestFailed", СтрокаДереваТестов);

	Возврат СостояниеВыполнения;

КонецФункции

&НаКлиенте
Функция ОповеститьОСобытии(ИмяСобытия, Аргумент1 = Неопределено)
	рез = Истина;
	Если MiddleMan <> Неопределено Тогда
		Попытка
			Выполнить("MiddleMan." + ИмяСобытия + "(Аргумент1);");
		Исключение
			рез = Ложь;
		КонецПопытки;
	КонецЕсли;
	#Если Клиент Тогда 
		Оповестить("xUnitFor1C." + ИмяСобытия, Аргумент1);
	#КонецЕсли
	Возврат рез;
	
КонецФункции

&НаКлиенте
Функция ЗапомнитьСамоеХудшееСостояние(ТекущееСостояние, НовоеСостояние)
    ТекущееСостояние = Макс(ТекущееСостояние, НовоеСостояние); // TODO некоторый хак, который зависит от порядка заполнения в мЗначенияСостоянияТестов
	Возврат ТекущееСостояние;
КонецФункции

&НаСервере
Процедура ЗарегистрироватьНачалоПрохожденияТестаСервер(ИмяТестовогоСлучая, ПолныйПуть)
	Объект().ЗарегистрироватьНачалоПрохожденияТеста(ИмяТестовогоСлучая, ПолныйПуть);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Символы.ПС + ДопСообщениеОшибки;
КонецФункции

&НаКлиенте
Функция Новый_НаборТестов() Экспорт
	Возврат Новый Массив;
КонецФункции

&НаКлиенте
Функция НаборТестов_Добавить(НаборТестов, ИмяТестовогоСлучая, П1 = Неопределено, П2 = Неопределено, П3 = Неопределено,
                             П4 = Неопределено, П5 = Неопределено, П6 = Неопределено, П7 = Неопределено) Экспорт
    НаборТестов.Добавить(ИмяТестовогоСлучая);

    Возврат НаборТестов;
КонецФункции

Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, имяМетода)
	Возврат Найти(текстОшибки, "Метод объекта не обнаружен ("+имяМетода+")") > 0;
КонецФункции

// Функция ДополнитьСлешВПуть
//
// Параметры:
// ИмяКаталога
//
// Описание:
// Функция дополняет и возвращает слеш в путь в конец строки, если он отсутствует
//
&НаКлиенте
Функция ДополнитьСлешВПуть(Знач Каталог)
	разделитель = "\";

	СисИнфо = Новый СистемнаяИнформация;
	Если Найти(Строка(СисИнфо.ТипПлатформы), "Linux")>0 Тогда 
		разделитель = "/";
	КонецЕсли;
		
	Если Прав(Каталог, 1) <> разделитель Тогда
		Каталог = Каталог + разделитель;
	КонецЕсли;
	Возврат Каталог;
КонецФункции

//////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ








// }

// { блок кода для переоткрытия формы


&НаКлиенте
Функция ИмяРеквизитаПолныйПутьОбработки()
	Возврат "__ИмяФайла1678";
КонецФункции

//&НаСервере
//Процедура СоздатьКнопкуПерезагрузитьФормуНаКоманднойПанелиФормы(заголовокКнопки = "Перезагрузить форму", ТолькоВоВсехДействиях = Истина)
//	//Добавляем новую команду
//	Кмд = ЭтаФорма.Команды.Добавить("ПерезагрузитьФорму_168733");
//	Кмд.Действие = "ПерезагрузитьФорму";
//	Кмд.Заголовок = заголовокКнопки; //"Перезагрузить форму";
//	
//	лКоманднаяПанель = Элементы.Найти("ФормаКоманднаяПанель");
//	нашлиКоманднуюПанель = лКоманднаяПанель <> Неопределено;
//	Если нашлиКоманднуюПанель Тогда
//		нашлиКоманднуюПанель = лКоманднаяПанель.Вид = ВидГруппыФормы.КоманднаяПанель;
//	КонецЕсли;
//	
//	лВладелецФормы = ?(нашлиКоманднуюПанель, лКоманднаяПанель, ЭтаФорма);
//	
//	//Добавляем новую кнопку
//	Элемент2 = ЭтаФорма.Элементы.Добавить("ПерезагрузитьФорму_168733", Тип("КнопкаФормы"), лВладелецФормы);
//	Элемент2.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели; //ОбычнаяКнопка;
//	Элемент2.ИмяКоманды = Кмд.Имя; //"Команда1";
//	Элемент2.ТолькоВоВсехДействиях = ТолькоВоВсехДействиях;
//КонецПроцедуры

&НаСервере
Процедура ПерезагрузитьФорму_НайтиИлиСоздатьРеквизитДляСохраненияПутиФайла(имяРеквизита) Экспорт
    // Добавляем новый реквизит в форму. Попыт
    // ка нужна для уже существующего реквизита
    Попытка
	    ДобавляемыеРеквизиты = Новый Массив;
	    Реквизит = Новый РеквизитФормы(имяРеквизита, Новый ОписаниеТипов("Строка"), , "Введите строку", Истина);
	    ДобавляемыеРеквизиты.Добавить(Реквизит);
	    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
    Исключение
    КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ИмяФайлаВнешнейОбработки_ПерезагрузитьФорму()
	Возврат Объект().ИспользуемоеИмяФайла;
КонецФункции

//}



// Экспорт нужен для тестов
&НаКлиенте
Функция  ОткрытьИнструмент(ИмяИнструмента) Экспорт
	рез = Неопределено;
	Файл = Новый Файл(ИспользуемоеИмяФайла());
	Если НЕ Файл.Существует() Тогда
		Сообщить("Не удалось найти путь к xddTestRunner");
		Сообщить("Не удалось открыть инструмент <"+ИмяИнструмента+">");
		Возврат рез;
	КонецЕсли;
	ПутьВнешнихИнструментов = Файл.Путь;
	
	ПутьИнструмента = ПутьВнешнихИнструментов + ИмяИнструмента;
	Файл = Новый Файл(ПутьИнструмента);
	Если Не Файл.Существует() Тогда
		Сообщить("Инструмент <"+ИмяИнструмента+"> не найден в каталоге <"+ПутьИнструмента+">");
		Возврат рез;
	КонецЕсли;
	
	ИдентификаторИнструмента = Строка(Новый УникальныйИдентификатор());
	
    лИмяОбработки = ПодключитьНаСервереВнешнююОбработкуОтКлиента(ПутьИнструмента, ИдентификаторИнструмента);
	
	ИмяОсновнойУправляемойФормы = ПолучитьИмяОсновнойУправляемойФормы(лИмяОбработки);
	Если ИмяОсновнойУправляемойФормы = "" Тогда
		Сообщить("Инструмент <"+ИмяИнструмента+">: не удалось вычислить основную управляемую форму по метаданным!");
		Возврат рез;
	КонецЕсли;
	
	ФормаИнструмента = ПолучитьТестОбъект(ИдентификаторИнструмента, имяОсновнойУправляемойФормы);
	Если ФормаИнструмента = Неопределено Тогда
		Сообщить("Инструмент <"+ИмяИнструмента+">: не удалось получить основную управляемую форму!");
		Возврат рез;
	КонецЕсли;
	ОткрытьФорму(ФормаИнструмента);
	//ФормаИнструмента = Неопределено;
	Возврат ФормаИнструмента;
КонецФункции


&НаКлиенте
Функция ИспользуемоеИмяФайла() Экспорт
	Возврат ИспользуемоеИмяФайлаСервер();
КонецФункции

&НаСервере
Функция ИспользуемоеИмяФайлаСервер()
	ОсновнойОбъект = Объект();
	НайденноеИмяФайла = Неопределено;
	Выполнить("НайденноеИмяФайла = ОсновнойОбъект.ИспользуемоеИмяФайла;");
	
	Возврат НайденноеИмяФайла;
КонецФункции


&НаКлиенте
Функция МетаданныеИмя() Экспорт
	Возврат МетаданныеИмяСервер();
КонецФункции

&НаСервере
Функция МетаданныеИмяСервер()
	ОсновнойОбъект = Объект();
	НайденноеИмя = ОсновнойОбъект.Метаданные().Имя;
	
	Возврат НайденноеИмя;
КонецФункции



&НаКлиенте
Процедура ИнициализироватьИндикаторВыполнения(КоличествоТестовыхСлучаев = 0)
	
	Элементы.ИндикаторВыполнения.МаксимальноеЗначение = КоличествоТестовыхСлучаев;
	ИндикаторВыполнения = 1; //Элементы.ИндикаторВыполнения.Значение = 1;
	Элементы.ИндикаторВыполнения.ЦветРамки = Новый Цвет(0, 174, 0); // Зеленый.
	
	ОбновитьОтображениеДанных();	
КонецПроцедуры


//}

