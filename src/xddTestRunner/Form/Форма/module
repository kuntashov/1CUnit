////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мМассивПиктограммСостояний;
Перем мМассивПиктограммТиповСтроки;

Перем мЭтоВнутренняяОбработка;
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Открывает диалог выбора каталога тестов.
// Возвращает Истину, если каталог выбран и ложь в противном случае.
// Путь к выбранному каталогу запоминается в реквизите формы Путь.
// 
Функция ВыбратьКаталогТестов()
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Каталог = ПервыйПуть();
	
	Если ДиалогВыбораКаталога.Выбрать() Тогда
		
		УстановитьНовыйПуть(ДиалогВыбораКаталога.Каталог);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Открывает диалог выбора подсистем тестов
//
Функция ВыбратьПодсистему(ОтборПоИмениТеста)
	ФормаВыбораПодсистем = ЭтотОбъект.ПолучитьФорму("ФормаВыбораПодсистемы");
	ФормаВыбораПодсистем.РежимВыбора = Истина;
	ФормаВыбораПодсистем.ОбработкаОбъект = ЭтотОбъект;
	ФормаВыбораПодсистем.ОтборПоИмениТеста = ОтборПоИмениТеста;
	РезультатВыбораПодсистемы = ФормаВыбораПодсистем.ОткрытьМодально();
	
	Если РезультатВыбораПодсистемы <> Неопределено Тогда
		УстановитьНовыйПуть(РезультатВыбораПодсистемы);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Разворачивает строки табличного поля дерева тестов.
// По умолчанию разворачивается только самый верхний уровень.
// 
Процедура РазвернутьСтрокиДерева(ВключаяПодчиненные = Ложь)
	
	Для каждого СтрокаДерева из ДеревоТестов.Строки Цикл
		ЭлементыФормы.тпДеревоТестов.Развернуть(СтрокаДерева, ВключаяПодчиненные);
	КонецЦикла;	
	
КонецПроцедуры

Процедура СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(СтрокиДереваТестов, ОставитьРазвернутым)
	ЭлементДеревоТестов = ЭлементыФормы.тпДеревоТестов;
	Для каждого СтрокаДерева из СтрокиДереваТестов Цикл
		Если Не ОставитьРазвернутым Тогда
			Если СтрокаДерева.Состояние = мЗначенияСостоянияТестов.Сломался или 
				СтрокаДерева.Состояние = мЗначенияСостоянияТестов.НеРеализован Тогда
				
					ЭлементДеревоТестов.Развернуть(СтрокаДерева, Ложь);
			ИначеЕсли СтрокаДерева.Состояние <> мЗначенияСостоянияТестов.НеВыполнялся Тогда
					ЭлементДеревоТестов.Свернуть(СтрокаДерева);			
			КонецЕсли;
		КонецЕсли;
		СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(СтрокаДерева.Строки, Ложь);
	КонецЦикла;	
	
КонецПроцедуры

Функция ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(РодительскаяСтрока)
	коллекцияСтрок = РодительскаяСтрока.Строки;
	Если коллекцияСтрок.Количество() = 0 Тогда
		Возврат 1; // строка теста
	КонецЕсли;
	количествоТестов = 0;
	Для каждого СтрокаДерева из коллекцияСтрок Цикл
		лКоличество = ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(СтрокаДерева);
		СтрокаДерева.КоличествоТестов = лКоличество;
        количествоТестов = количествоТестов + лКоличество;
	КонецЦикла;
	Возврат количествоТестов;
КонецФункции

// Устанавливает начальное состояние индикатора выполнения тестов.
// 
Процедура ИнициализироватьИндикаторВыполнения(КоличествоТестовыхСлучаев = 0)
	
	ЭлементыФормы.ИндикаторВыполнения.МаксимальноеЗначение = КоличествоТестовыхСлучаев;
	ЭлементыФормы.ИндикаторВыполнения.Значение = 0;
	ЭлементыФормы.ИндикаторВыполнения.ЦветРамки = Новый Цвет(0, 174, 0); // Зеленый.
	
КонецПроцедуры

Процедура ЗагрузитьТестыВЗависимостиОтВидаТестов()
	Если мЭтоВнутренняяОбработка Тогда
		
		Форма_ЗагрузитьОбработкиКонфигурации();
		
	Иначе
		
		Форма_ЗагрузитьТестовыеНаборы();
		
	КонецЕсли; 
КонецПроцедуры

Функция ПолучитьИмяДляСохраненияПараметров()
	Возврат Метаданные().Имя + "_Параметры";
КонецФункции

// Пример строки запуска для внешних файлов - "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования"
//	"C:\Program Files (x86)\1cv82\8.2.18.96\bin\1cv8c.exe" /DisableStartupMessages /Execute E:\ТестыИМ\xddTestRunner.epf /S "as-msk-a6122\im_test" /Out "E:\ТестыИМ\Тесты\log.txt"  /C "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования" /LogUI
//
// Пример строки запуска для внутренний тестов-обработок - "ЭтоТестИзКонфигурации;Тесты_Команда_Тестировать;Подсистемы.Тестирование;ЗавершитьРаботуПослеТестирования"
//	"C:\Program Files (x86)\1cv82\8.2.18.96\bin\1cv8c.exe" /DisableStartupMessages /Execute E:\ТестыИМ\xddTestRunner.epf /S "as-msk-a6122\im_test" /Out "E:\ТестыИМ\Тесты\log.txt"  /C "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования" /LogUI
Функция ОбработатьПараметрыЗапуска(СтрокаПараметровЗапуска)
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметровЗапуска);
	Если ПараметрыЗапуска = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоЗапускВПакетномРежиме = Истина;
	УстановитьЗначенияНастроекПоУмолчанию();
	
	естьКоманда_ВыполнитьТестирование = ПараметрыЗапуска.Выполнить;
	естьКоманда_Загрузить = ПараметрыЗапуска.Загрузить;
	путьКТестам = ПараметрыЗапуска.ПутьТестов;
	лЗавершитьРаботуПослеТестирования = ПараметрыЗапуска.ОстановитьСистему;
	
	ПутьОтчетаТестирования = ПараметрыЗапуска.ПутьОтчета;
	ТипОтчетаОТестировании = ПараметрыЗапуска.ФорматОтчета;
	ПутьКФайлуЛога = ПараметрыЗапуска.ПутьКодаВозврата;
	//РегистрацияПрохожденияТестовВЖР = ПараметрыЗапуска.РегистрацияПрохожденияТестовВЖР;
	мЭтоВнутренняяОбработка = ПараметрыЗапуска.ВстроенныеТесты;
	//ВыводЛогаВФорматеTeamCity = ПараметрыЗапуска.ВыводЛогаВФорматеTeamCity;
	//СлучайныйПорядокВыполнения = ПараметрыЗапуска.СлучайныйПорядокВыполнения;
	
	ЭтаФорма.ЗавершитьРаботуПослеТестирования = лЗавершитьРаботуПослеТестирования;
	
	ЗаписатьКодВозвратаВЛогФайл(ПутьКФайлуЛога, "1"); //По умолчанию считаем что ошибка. Перед завершением работы запишем 0. 
	
	Если естьКоманда_ВыполнитьТестирование Тогда
		Если НЕ мЭтоВнутренняяОбработка Тогда
			ОписаниеОшибки = "ОШИБКА загрузки тестов: Ожидали, что каталог/файл тестов будет существовать, а он не существует.";
			Если Не ПроверитьСуществованиеФайла(путьКТестам, ОписаниеОшибки, лЗавершитьРаботуПослеТестирования) Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЕсли; 
				
		ФайлИлиКаталогОтчетовТестирования = Новый Файл(ПутьОтчетаТестирования);
		ОписаниеОшибки = "ОШИБКА загрузки тестов: Ожидали, что каталог отчетов тестирования будет существовать, а он не существует.";
		Если Не ПроверитьСуществованиеФайла(ФайлИлиКаталогОтчетовТестирования.Путь, ОписаниеОшибки, лЗавершитьРаботуПослеТестирования) Тогда
			Возврат Истина;
		КонецЕсли; 
		
	КонецЕсли;
	
	УстановитьНовыйПуть(путьКТестам);
	Попытка
		ЗагрузитьТестыВЗависимостиОтВидаТестов();
	Исключение
		текстОшибки = ОписаниеОшибки();
		ВывестиСообщение("ОШИБКА загрузки тестов: "+текстОшибки);
		Если лЗавершитьРаботуПослеТестирования Тогда
			ЗавершитьРаботуСистемы(Ложь);
			Возврат Истина;
		КонецЕсли;
	КонецПопытки;
	
	Если естьКоманда_ВыполнитьТестирование Тогда
		Попытка
			ВыполнитьВсеТесты();
		Исключение
			текстОшибки = ОписаниеОшибки();
			ВывестиСообщение("ОШИБКА выполнения тестов: "+текстОшибки);
			Если лЗавершитьРаботуПослеТестирования Тогда
				ЗавершитьРаботуСистемы(Ложь);
				Возврат Истина;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПроверитьСуществованиеФайла(ПутьФайла, Знач ОписаниеОшибки, ЗавершитьРаботуПослеТестирования)
	Файл = Новый Файл(ПутьФайла);
	Если НЕ Файл.Существует() Тогда
		ОписаниеОшибки = ОписаниеОшибки + "путь <"+ПутьФайла+">";
		ВывестиСообщение(ОписаниеОшибки);
		ЗарегистрироватьОшибкуЗапускаТестирования(Файл.ПолноеИмя, ОписаниеОшибки);
		
		Если ЗавершитьРаботуПослеТестирования Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Процедура УстановитьПоУмолчаниюОбработчикКоманды_ЗагрузитьТесты()
	НужнаяКнопка = ЭлементыФормы.КнопкаЗагрузитьТесты;
	Кнопки = НужнаяКнопка.Кнопки;
	Если ЭтоВнешняяОбработка() Тогда
		Кнопка = Кнопки.ЗагрузитьВсеТесты;
	Иначе
		Кнопка = Кнопки.ЗагрузитьТестыИзКонфигурации_ИмяТеста;
	КонецЕсли; 		
	
	НужнаяКнопка.УстановитьДействие("Нажатие", Кнопка.Действие);
	Кнопка.Картинка = НужнаяКнопка.Картинка;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Настройки = ХранилищеОбщихНастроек.Загрузить("xUnitFor1C");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		ПолучитьФлагИзНастроек(Настройки, "ЗапретИспользованияИнформатора", ЗапретИспользованияИнформатора);
	КонецЕсли;
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(ПараметрЗапуска);
	Если ПараметрыЗапуска = Неопределено Тогда
		БылаОшибкаПриПредыдущейЗагрузке = СохраненнаяНастройка_БылаОшибкаПриПредыдущейЗагрузке();
		Если БылаОшибкаПриПредыдущейЗагрузке И НЕ ЗапретИспользованияИнформатора Тогда
			Текст = "Возникла ошибка при предыдущей загрузке тестов со включенным Информатором. Хотите временно отключить использование Информатора?"+Символы.ПС+Символы.ПС+
				"Для постоянного отключения Информатора воспользуйтесь формой настроек";
			Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, 0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЗапретИспользованияИнформатора = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПодключитьИнформатор();
КонецПроцедуры

Процедура ПриОткрытии()
	ЭтаФорма.Заголовок = ЭтотОбъект.ЗаголовокФормы();
	УстановитьПоУмолчаниюОбработчикКоманды_ЗагрузитьТесты();
	
	Если ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	ВосстановитьНастройки();
	
	Если ЗначениеЗаполнено(Пути) Тогда
		
		БылаОшибкаПриПредыдущейЗагрузке = СохраненнаяНастройка_БылаОшибкаПриПредыдущейЗагрузке();
		
		Если БылаОшибкаПриПредыдущейЗагрузке Тогда
			Текст = "Возникла ошибка при предыдущей загрузке тестов. Хотите отменить загрузку тестов?";
			Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, 0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Пути.Очистить();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	УстановитьНастройку_БылаОшибкаПриПредыдущейЗагрузке(Истина);
	
	Попытка
		
		ОбновитьНадписьПути();
		
		ЗагрузитьТестыВЗависимостиОтВидаТестов();
	Исключение
		УстановитьНастройку_БылаОшибкаПриПредыдущейЗагрузке(Ложь);
		ВызватьИсключение;		
	КонецПопытки;
	
	УстановитьНастройку_БылаОшибкаПриПредыдущейЗагрузке(Ложь);
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Если Не ЭтоЗапускВПакетномРежиме Тогда
		СохранитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещений о загрузке или ходе выполнения тестов.
// 
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Возможные события:
	// 		xUnitFor1C.TestLoaded
	// 		xUnitFor1C.TestPassed
	// 		xUnitFor1C.TestNotInplemented
	// 		xUnitFor1C.TestFailed
	
	Если ИмяСобытия = "xUnitFor1C.TestPassed" Тогда
		
		ЭлементыФормы.ИндикаторВыполнения.Значение = ЭлементыФормы.ИндикаторВыполнения.Значение + 1;
		
	ИначеЕсли ИмяСобытия = "xUnitFor1C.TestNotImplemented" Тогда
		
		ЭлементыФормы.ИндикаторВыполнения.Значение = ЭлементыФормы.ИндикаторВыполнения.Значение + 1;
		
		Если ЭлементыФормы.ИндикаторВыполнения.ЦветРамки <> WebЦвета.Красный Тогда
			ЭлементыФормы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Золотой;
		КонецЕсли;
				
	ИначеЕсли ИмяСобытия = "xUnitFor1C.TestFailed" Тогда
		
		ЭлементыФормы.ИндикаторВыполнения.Значение = ЭлементыФормы.ИндикаторВыполнения.Значение + 1;
		ЭлементыФормы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Красный;
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ СТРАНИЦЫ "Тестирование"

Процедура ВыполнитьВыделенныеТесты(Элемент, ВызыватьИсключение = Ложь)
	// В случае множественного выделения в общем случае у нас могут быть одновременно выделены 
	// как строки на уровне обработок тестирования и папок, но и отдельные тестовые случаи.
	// Поэтому мы предварительно из выделенных строк получаем ТОЛЬКО строки, соответствующие 
	// тестовым случаям. При этом, если выделена строка обработки или папка, то значит надо выполнить
	// все тестовые случае, реализованные в этой обработке (или все тестовые случаи, реализованные во
	// всех обработках в выделенной папке). 
	
	ВыделенныеСтроки = ЭлементыФормы.тпДеревоТестов.ВыделенныеСтроки;	
	
	Если СлучайныйПорядокВыполнения Тогда
		МассивТестовыхСлучаев = ПолучитьСтрокиДереваВСлучайномПорядке(ВыделенныеСтроки);
	Иначе
		МассивТестовыхСлучаев = ПолучитьТолькоТестовыеМетодыИзДерева(ВыделенныеСтроки);
	КонецЕсли; 
	
	ИнициализироватьИндикаторВыполнения(МассивТестовыхСлучаев.Количество());
	
	датаНачалаТестирования = ТекущаяДата();
	ОчиститьСообщения();
	ВыполнитьТесты(МассивТестовыхСлучаев, ВызыватьИсключение);
	
	ОбновитьСостояниеВыбранныхСтрок(ВыделенныеСтроки);
	ОбновитьСостояниеРодителейВыбранныхСтрок(ВыделенныеСтроки);
	СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(ДеревоТестов.Строки, Истина);
	
	Если ПустаяСтрока(ТипОтчетаОТестировании) Тогда
		ТипОтчетаОТестировании = "mxl";
	КонецЕсли;
	
	табДок = ПолучитьОтчетТестирования(ДеревоТестов, датаНачалаТестирования, ТипОтчетаОТестировании, мСписокОшибок, мВсегоТестов);
	
	имяФайлаТестирования = "лог_тестирования";
	файлФайлаТестирования = Новый Файл(ПутьОтчетаТестирования);
	Если файлФайлаТестирования.Существует() И НЕ файлФайлаТестирования.ЭтоКаталог() Тогда 
		имяФайлаТестирования = файлФайлаТестирования.ИмяБезРасширения;
		ПутьОтчетаТестирования = файлФайлаТестирования.Путь;
	ИначеЕсли НЕ файлФайлаТестирования.Существует() И НЕ ПустаяСтрока(файлФайлаТестирования.Расширение) Тогда 
		имяФайлаТестирования = файлФайлаТестирования.ИмяБезРасширения;
		ПутьОтчетаТестирования = файлФайлаТестирования.Путь;
	КонецЕсли;
	
	Если табДок <> Неопределено Тогда
		
		Если НЕ ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			ЗаписатьФайлОтчетТестирования(табДок, имяФайлаТестирования);
		КонецЕсли;
		
		табДок.Показать("Отчет об автоматическом тестировании, xUnitFor1C v." + Версия());
	Иначе // все тесты прошли
		Если НЕ ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			УдалитьФайлыОтчетовТестирования(имяФайлаТестирования);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура КнопкаВыполнитьВыделенныйНажатие(Элемент)
	
	ВыполнитьВыделенныеТесты(Элемент);
	
КонецПроцедуры

Процедура КоманднаяПанельКонтекстноеМенюПоляТестовВыполнитьТестСИсключением(Элемент)
	
	ВыполнитьВыделенныеТесты(Элемент, Истина);
	
КонецПроцедуры



Процедура КнопкаВыполнитьВсеТестыНажатие(Элемент)
	
	ВыполнитьВсеТесты();
		
КонецПроцедуры

Процедура ВыполнитьВсеТесты()
	
	ИнициализироватьИндикаторВыполнения(мКоличествоТестовыхСлучаев);
	
	датаНачалаТестирования = ТекущаяДата();
	
	КодРезультатаТестирования = RunAllTests();

	СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(ДеревоТестов.Строки, Истина);
	
	Если ПустаяСтрока(ТипОтчетаОТестировании) Тогда
		ТипОтчетаОТестировании = "mxl";
	КонецЕсли;
	
	табДок = ПолучитьОтчетТестирования(ДеревоТестов, датаНачалаТестирования, ТипОтчетаОТестировании, мСписокОшибок, мВсегоТестов);
	
	имяФайлаТестирования = "лог_тестирования";
	
	файлФайлаТестирования = Новый Файл(ПутьОтчетаТестирования);
	Если файлФайлаТестирования.Существует() И НЕ файлФайлаТестирования.ЭтоКаталог() Тогда 
		имяФайлаТестирования = файлФайлаТестирования.ИмяБезРасширения;
		ПутьОтчетаТестирования = файлФайлаТестирования.Путь;
	ИначеЕсли НЕ файлФайлаТестирования.Существует() И НЕ ПустаяСтрока(файлФайлаТестирования.Расширение) Тогда 
		имяФайлаТестирования = файлФайлаТестирования.ИмяБезРасширения;
		ПутьОтчетаТестирования = файлФайлаТестирования.Путь;
	КонецЕсли;
	
	ПутьОтчетаТестирования = ДополнитьСлешВПуть(ПутьОтчетаТестирования);
	
	Если табДок <> Неопределено Тогда
		
		Если НЕ ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			ЗаписатьФайлОтчетТестирования(табДок, имяФайлаТестирования);
		КонецЕсли;
		
		табДок.Показать("Отчет об автоматическом тестировании, xUnitFor1C v." + Версия());
	Иначе // все тесты прошли
		Если НЕ ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			УдалитьФайлыОтчетовТестирования(имяФайлаТестирования);
		КонецЕсли;
	КонецЕсли;
	
	
	Если ЭтаФорма.ЗавершитьРаботуПослеТестирования Тогда
		
		ЗаписатьКодВозвратаВЛогФайл(ПутьКФайлуЛога, "0", КодРезультатаТестирования);
		
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьФайлОтчетТестирования(табДок, имяФайлаТестирования)
	Если ТипОтчетаОТестировании = "xml" Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ОбъявлениеXML = ЗаписьXML.Закрыть();
		
		ЗаписьXML = Новый ЗаписьXML;
		Попытка
			ЗаписьXML.ОткрытьФайл(ПутьОтчетаТестирования + имяФайлаТестирования + "."+ТипОтчетаОТестировании);
			ЗаписьXML.ЗаписатьБезОбработки(ОбъявлениеXML + " " + табДок.ПолучитьТекст());// таким образом файл будет записан всего один раз, и не будет проблем с обработкой на билд-сервере TeamCity
			ЗаписьXML.Закрыть();
		Исключение
		КонецПопытки;
	Иначе
		
		Попытка
			табДок.Записать(ПутьОтчетаТестирования + имяФайлаТестирования + "."+ТипОтчетаОТестировании, ТипФайлаТабличногоДокумента[ТипОтчетаОТестировании]);
		Исключение
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьФайлыОтчетовТестирования(имяФайлаТестирования)

	Попытка
		УдалитьФайлы(ПутьОтчетаТестирования + "\" + имяФайлаТестирования + ".xlsx");
	Исключение
	КонецПопытки;

	Попытка
		УдалитьФайлы(ПутьОтчетаТестирования + "\" + имяФайлаТестирования + ".mxl");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура КнопкаЗагрузитьТестыИзКонфигурации(Кнопка)
	ЗагрузитьТестыИзКонфигурации("");
КонецПроцедуры

Процедура КнопкаЗагрузитьТестыИзКонфигурации_ИмяТеста(Кнопка)
	ЗагрузитьТестыИзКонфигурации("Тест_");
КонецПроцедуры

Процедура ЗагрузитьТестыИзКонфигурации(ОтборПоИмениТеста)
	
	Если ВыбратьПодсистему(ОтборПоИмениТеста) Тогда
		мЭтоВнутренняяОбработка = Истина;
			
		Форма_ЗагрузитьОбработкиКонфигурации();
	КонецЕсли;

КонецПроцедуры

Процедура КнопкаЗагрузитьТестыНажатие(Элемент)
	
	Если ВыбратьКаталогТестов() Тогда
				
		ДобавитьВИсториюКонтекст("ИсторияВыбораМест", Пути.ВыгрузитьЗначения());
		Форма_ЗагрузитьТестовыеНаборы();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаЗагрузитьТестыЗагрузитьТестКейс(Кнопка)
		
	ДиалогВыбораТеста = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораТеста.Фильтр = "Обработка-тест (*.epf)|*.epf|Все файлы|*";
	ДиалогВыбораТеста.МножественныйВыбор = Истина;
	ДиалогВыбораТеста.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораТеста.Каталог = ПервыйПуть();
	
	Если ДиалогВыбораТеста.Выбрать() Тогда
		
		Пути.Очистить();
		Для каждого ПолноеИмяФайла Из ДиалогВыбораТеста.ВыбранныеФайлы Цикл
			Пути.Добавить(ПолноеИмяФайла);
		КонецЦикла;		
		ДобавитьВИсториюКонтекст("ИсторияВыбораФайлов", Пути.ВыгрузитьЗначения());
		
		Форма_ЗагрузитьТестовыеНаборы();
		
	КонецЕсли;
			
КонецПроцедуры

Процедура КоманднаяПанельКонтекстноеМенюПоляТестовКомандаЗагрузитьТолькоВыделенныеТесты(Кнопка)
	Пути.Очистить();

	ВыделенныеСтроки = ЭлементыФормы.тпДеревоТестов.ВыделенныеСтроки;
	МассивТестовыхСлучаев = ПолучитьТолькоТестовыеМетодыИзДерева(ВыделенныеСтроки);
	
	Для каждого СтрокаДерева Из МассивТестовыхСлучаев Цикл
		
		Если СтрокаДерева.ТипСтроки = мЗначенияТиповСтроки.ТестовыйМетод Тогда
			СтрокаДерева = РодительскаяСтрока(СтрокаДерева);
		КонецЕсли;
		
		Если Пути.НайтиПоЗначению(СтрокаДерева.ПолныйПуть) = Неопределено Тогда
			Пути.Добавить(СтрокаДерева.ПолныйПуть);
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьВИсториюКонтекст("ИсторияВыбораФайлов", Пути.ВыгрузитьЗначения());
	
	Форма_ЗагрузитьТестовыеНаборы();
КонецПроцедуры

Процедура КнопкаПерезагрузитьНажатие(Элемент)
	
	ЗагрузитьТестыВЗависимостиОтВидаТестов();

КонецПроцедуры

Процедура Форма_ЗагрузитьТестовыеНаборы()
	мЭтоВнутренняяОбработка = Ложь;
	
	ИнициализироватьИндикаторВыполнения();
	
	ОбновитьНадписьПути();
	
	ЗагрузитьВсеТесты(Пути.ВыгрузитьЗначения());

	ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(ДеревоТестов);
	РазвернутьСтрокиДерева();
КонецПроцедуры

Процедура Форма_ЗагрузитьОбработкиКонфигурации()
	ИнициализироватьИндикаторВыполнения();
	
	ДеревоТестов.Строки.Очистить();
	
	ОбновитьНадписьПути();
	
	ЗагрузитьТестыКонфигурации(ПервыйПуть());
	
	ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(ДеревоТестов);
	РазвернутьСтрокиДерева(мКоличествоТестовыхСлучаев < 30);
КонецПроцедуры

// Процедура для кнопки "Переоткрыть"
// Закрывает и вновь открывает текущую форму.
// 
Процедура КнопкаПерезагрузитьПерезагрузитьБраузерТестирования(Кнопка)
	
	Для каждого МетаФорма Из ЭтаФорма.Метаданные().Формы Цикл
		ТекФорма = ПолучитьФорму(МетаФорма); // может возвращать неопределено, если есть управляемая форма
		Если ТекФорма <> Неопределено И ТекФорма.Открыта() Тогда
			ТекФорма.Закрыть();
			Если ТекФорма = ЭтаФорма Тогда
				Если Не ЭтоВнешняяОбработка() Тогда
					Обработки["xddTestRunner"].Создать().ПолучитьФорму(МетаФорма.Имя).Открыть();
				Иначе
					НайденноеИмяФайла = Неопределено;
					Выполнить("НайденноеИмяФайла = ЭтотОбъект.ИспользуемоеИмяФайла;");
					ВнешниеОбработки.Создать(НайденноеИмяФайла).ПолучитьФорму(МетаФорма.Имя).Открыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура КнопкаЗагрузитьТестыОткрытьНастройки(Кнопка)
	ФормаНастроек = ЭтотОбъект.ПолучитьФорму("ФормаНастроек");
	ФормаНастроек.ОбработкаОбъект = ЭтотОбъект;
	Результат = ФормаНастроек.ОткрытьМодально();
	
	//Если Результат <> Неопределено Тогда
	//	УстановитьНовыйПуть(РезультатВыбораПодсистемы);
	//	Возврат Истина;
	//КонецЕсли;
	//
	//Возврат Ложь;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ДеревоТестов

Процедура тпДеревоТестовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ПиктограммаСостояния.УстановитьКартинку(мМассивПиктограммСостояний[ДанныеСтроки.Состояние]);		
	ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(мМассивПиктограммТиповСтроки[ДанныеСтроки.ТипСтроки]);		
	ОформлениеСтроки.Ячейки.ПолныйПуть.УстановитьТекст(СтрЗаменить(ДанныеСтроки.ПолныйПуть, ПутиНадпись, "..."));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура КнопкаЗагрузитьТестыИнформацияОПроекте(Кнопка)
	ЗапуститьПриложение("https://github.com/xDrivenDevelopment/xUnitFor1C/wiki");
КонецПроцедуры

Процедура КнопкаИнструментыГенераторМакетовДанных(Кнопка)
	ИмяИнструмента = "xddDataFixtureGen";
	ОткрытьИнструмент(ИмяИнструмента, "Форма");
КонецПроцедуры

Процедура КнопкаИнструментыПоказатьГУИД(Кнопка)
	ИмяИнструмента = "xddGuidShow";
	ОткрытьИнструмент(ИмяИнструмента, "Форма");
КонецПроцедуры

Процедура ОткрытьИнструмент(ИмяИнструмента, ИмяФормы)
	Перем ПутьИнструмента;
	Если ЭтоВнешняяОбработка() Тогда
		ПутьВнешнихИнструментов = ПолныйПутьКаталогаОбработки();
		Если НЕ ПустаяСтрока(ПутьВнешнихИнструментов)  Тогда
			ПутьИнструмента = ПутьВнешнихИнструментов + ИмяИнструмента+".epf";
			Файл = Новый Файл(ПутьИнструмента);
			Если Не Файл.Существует() Тогда
				Сообщить("Инструмент <"+ИмяИнструмента+"> не найден в каталоге <"+ПутьИнструмента+">");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Метаданные.Обработки.Найти(ИмяИнструмента) <> Неопределено Тогда
			ПутьИнструмента = ИмяИнструмента;
		Иначе
			Сообщить("Инструмент/встроенная обработка <"+ИмяИнструмента+"> не найден в конфигурации");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутьИнструмента) Тогда
		Обработка = СоздатьОбъектВнешнейОбработкиОтключаяБезопасныйРежим(ПутьИнструмента);
		НоваяФорма = Обработка.ПолучитьФорму(ИмяФормы);
		Если НоваяФорма = Неопределено Тогда
			Сообщить("Инструмент <"+ИмяИнструмента+">: не удалось получить основную форму!");
			Возврат;
		КонецЕсли;
		НоваяФорма.Открыть();
		НоваяФорма = Неопределено;	
	КонецЕсли;
КонецПроцедуры

Функция ПолныйПутьКаталогаОбработки() Экспорт
	Рез = "";
	Если ЭтоВнешняяОбработка() Тогда
		НайденноеИмяФайла = Неопределено;
		Выполнить("НайденноеИмяФайла = ЭтотОбъект.ИспользуемоеИмяФайла;");
		файл = Новый Файл(НайденноеИмяФайла);
		Рез = файл.Путь;
	КонецЕсли;
	Возврат Рез;
КонецФункции

Процедура тпДеревоТестовПриАктивизацииСтроки(Элемент)
	Если ЭлементыФормы.тпДеревоТестов.ВыделенныеСтроки.Количество() <= 1 Тогда
		ТекcтКоманды = "Выполнить тест";
	Иначе
		ТекcтКоманды = "Выполнить выбранные тесты";
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельКонтекстноеМенюПоляТестов.Кнопки.ВыполнитьТест.Текст = ТекcтКоманды;
КонецПроцедуры

Процедура КнопкаРегистрацияПрохожденияТестовВЖР(Кнопка)
	РегистрацияПрохожденияТестовВЖР = ?(РегистрацияПрохожденияТестовВЖР, Ложь, Истина);
	ЭлементыФормы.КнопкаЗагрузитьТесты.Кнопки.РегистрацияПрохожденияТестовВЖР.Пометка = РегистрацияПрохожденияТестовВЖР;
КонецПроцедуры

Процедура КнопкаРегистрацияОшибокТестовВЖР(Кнопка)
	РегистрацияОшибокТестовВЖР = ?(РегистрацияОшибокТестовВЖР, Ложь, Истина);
	ЭлементыФормы.КнопкаЗагрузитьТесты.Кнопки.РегистрацияОшибокТестовВЖР.Пометка = РегистрацияОшибокТестовВЖР;
КонецПроцедуры

Процедура КнопкаСлучайныйПорядокВыполненияТестов(Кнопка)
	СлучайныйПорядокВыполнения = ?(СлучайныйПорядокВыполнения, Ложь, Истина);
	ЭлементыФормы.КнопкаЗагрузитьТесты.Кнопки.СлучайныйПорядокВыполненияТестов.Пометка = СлучайныйПорядокВыполнения;
КонецПроцедуры

Процедура ОбновитьНадписьПути()
	
	Если Пути.Количество() = 1 Тогда
		ПутиНадпись = Пути[0].Значение;
		ЭлементыФормы.ПутиНадпись.МногострочныйРежим = Ложь;
	Иначе
		ПутиНадпись = "";
		КонечныйИндекс = Пути.Количество() - 1;
		Для Индекс = 0 По КонечныйИндекс Цикл
			Если Индекс = КонечныйИндекс Тогда
				ПутиНадпись = ПутиНадпись + Пути[Индекс].Значение;
			Иначе
				ПутиНадпись = ПутиНадпись + Пути[Индекс].Значение + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.ПутиНадпись.МногострочныйРежим = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНовыйПуть(НовыйПуть)
	Пути.Очистить();
	Пути.Добавить(НовыйПуть);		
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// ИСТОРИЯ ВЫБОРА ТЕСТОВ

Процедура ДобавитьВИсториюКонтекст(ИмяИстории, Путь)
	
	ДобавитьВИсторию(ЭтаФорма, ИмяИстории, Путь, ДлинаИстории, "Подключаемый_КомандаЗагрузитьТестыИзИстории");
	
КонецПроцедуры

Процедура ДобавитьВИсторию(Форма, ИмяИстории, Путь, ДлинаИстории, Действие)
	Перем Пути;
	
	История = Форма[ИмяИстории];
	Элементы = Форма.ЭлементыФормы;
	
	Если ТипЗнч(Путь) <> Тип("Массив") Тогда
		Пути = Новый Массив;
		Пути.Добавить(Путь);
	Иначе
		Пути = Путь;
	КонецЕсли;
	
	КоманднаяПанель = ЭлементыФормы.КнопкаЗагрузитьТесты;
	КоманднаяПанель.Кнопки.Добавить("", ТипКнопкиКоманднойПанели.Разделитель, "", Новый Действие(Действие));
	
	Для Каждого ВыбранныйПуть Из Пути Цикл
		Элемент = История.НайтиПоЗначению(ВыбранныйПуть);
		Если Элемент = Неопределено Тогда
			История.Вставить(0, ВыбранныйПуть);
			Если История.Количество() = ДлинаИстории + 1 Тогда
				История.Удалить(ДлинаИстории);
			Иначе
				ИмяКнопки = ПолучитьИмяКнопкиИстории(ИмяИстории, История.Количество() - 1);
		        НоваяКнопка = КоманднаяПанель.Кнопки.Добавить(ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, "", Новый Действие(Действие));
			КонецЕсли;
		Иначе
			Индекс = История.Индекс(Элемент);
			Если Индекс > 0 Тогда
				История.Сдвинуть(Элемент, -Индекс);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для к=0 По История.Количество()-1 Цикл
		Элемент = История[к];
		Кнопка = КоманднаяПанель.Кнопки.Найти(ПолучитьИмяКнопкиИстории(ИмяИстории, к));
		Если Кнопка <> Неопределено Тогда
			Кнопка.Текст = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИмяКнопкиИстории(ИмяИстории, ИндексИстории)
	Возврат ИмяИстории + "_"+Формат(ИндексИстории, "ЧН=0; ЧГ=0");
КонецФункции

Процедура Подключаемый_КомандаЗагрузитьТестыИзИстории(Кнопка)
	Массив = РазложитьСтрокуВМассивПодстрок(Кнопка.Имя, "_");
	ИмяИстории = Массив[0];
	ПунктИстории = Число(Массив[1]);
	НайденныйПуть = ЭтаФорма[ИмяИстории].Получить(ПунктИстории).Значение;

	УстановитьНовыйПуть(ЭтаФорма[ИмяИстории].Получить(ПунктИстории).Значение);
	
	ДобавитьВИсториюКонтекст(ИмяИстории, Пути.ВыгрузитьЗначения());
	
	ОбновитьНадписьПути();
	Форма_ЗагрузитьТестовыеНаборы();	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКИ

Процедура УстановитьЗначенияНастроекПоУмолчанию()
	
	РегистрацияПрохожденияТестовВЖР = Ложь;
	РегистрацияОшибокТестовВЖР = Ложь;
	РежимОтладки = Ложь;
	СлучайныйПорядокВыполнения = Ложь;
	мЭтоВнутренняяОбработка = Ложь;
	
	Пути.Очистить();
	
КонецПроцедуры

Процедура СохранитьНастройки()
	
	Настройки = ХранилищеОбщихНастроек.Загрузить("xUnitFor1C");
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Настройки = Новый Структура;
	КонецЕсли;
	
	Настройки.Вставить("РегистрацияПрохожденияТестовВЖР", РегистрацияПрохожденияТестовВЖР);
	Настройки.Вставить("РегистрацияОшибокТестовВЖР", РегистрацияОшибокТестовВЖР);
	Настройки.Вставить("РежимОтладки", РежимОтладки);
	Настройки.Вставить("СлучайныйПорядокВыполнения", СлучайныйПорядокВыполнения);
	Настройки.Вставить("мЭтоВнутренняяОбработка", мЭтоВнутренняяОбработка);
	Настройки.Вставить("ЗапретИспользованияИнформатора", ЗапретИспользованияИнформатора);
	
	Настройки.Вставить("Пути", Пути.ВыгрузитьЗначения());
	
	Настройки.Вставить("ДлинаИстории", ДлинаИстории);
	Настройки.Вставить("ИсторияВыбораМест", ИсторияВыбораМест.ВыгрузитьЗначения());
	Настройки.Вставить("ИсторияВыбораФайлов", ИсторияВыбораФайлов.ВыгрузитьЗначения());
	
	ХранилищеОбщихНастроек.Сохранить("xUnitFor1C",, Настройки);
	
	УстановитьНастройку_БылаОшибкаПриПредыдущейЗагрузке(Ложь);
	
КонецПроцедуры

Процедура ВосстановитьНастройки()

	ДлинаИсторииПоУмолчанию = 10;
	
	Настройки = ХранилищеОбщихНастроек.Загрузить("xUnitFor1C");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		ПолучитьФлагИзНастроек(Настройки, "РегистрацияПрохожденияТестовВЖР", РегистрацияПрохожденияТестовВЖР);
		ПолучитьФлагИзНастроек(Настройки, "РегистрацияОшибокТестовВЖР", РегистрацияОшибокТестовВЖР);
		ПолучитьФлагИзНастроек(Настройки, "РежимОтладки", РежимОтладки);
		ПолучитьФлагИзНастроек(Настройки, "СлучайныйПорядокВыполнения", СлучайныйПорядокВыполнения);
		ПолучитьФлагИзНастроек(Настройки, "мЭтоВнутренняяОбработка", мЭтоВнутренняяОбработка);
		
		ПолучитьФлагИзНастроек(Настройки, "ЗапретИспользованияИнформатора", ЗапретИспользованияИнформатора);
		
		Если Настройки.Свойство("Пути") Тогда
			Пути.ЗагрузитьЗначения(Настройки.Пути);
		КонецЕсли;
		
		Если Не Настройки.Свойство("ДлинаИстории", ДлинаИстории) Или Не ЗначениеЗаполнено(ДлинаИстории) Тогда
			ДлинаИстории = ДлинаИсторииПоУмолчанию;
		КонецЕсли;
		Если Настройки.Свойство("ИсторияВыбораМест") Тогда
			ДобавитьВИсториюКонтекст("ИсторияВыбораМест", Настройки.ИсторияВыбораМест);
		КонецЕсли;
		Если Настройки.Свойство("ИсторияВыбораФайлов") Тогда
			ДобавитьВИсториюКонтекст("ИсторияВыбораФайлов", Настройки.ИсторияВыбораФайлов);
		КонецЕсли;
	Иначе
		ДлинаИстории = ДлинаИсторииПоУмолчанию;
	КонецЕсли;
	
	ЭлементыФормы.КнопкаЗагрузитьТесты.Кнопки.РегистрацияПрохожденияТестовВЖР.Пометка = РегистрацияПрохожденияТестовВЖР;
	ЭлементыФормы.КнопкаЗагрузитьТесты.Кнопки.РегистрацияОшибокТестовВЖР.Пометка = РегистрацияОшибокТестовВЖР;
	ЭлементыФормы.КнопкаЗагрузитьТесты.Кнопки.СлучайныйПорядокВыполненияТестов.Пометка = СлучайныйПорядокВыполнения;
	//ЭлементыФормы.КнопкаЗагрузитьТесты.Кнопки.КомандаВключитьРежимОтладки.Пометка = РежимОтладки;
	
КонецПроцедуры

Функция ПолучитьФлагИзНастроек(Настройки, ИмяНастройки, РезЗначениеНастройки)
	Настройки.Свойство(ИмяНастройки, РезЗначениеНастройки);
	РезЗначениеНастройки = ?(Тип("Булево") = ТипЗнч(РезЗначениеНастройки), РезЗначениеНастройки, Ложь);
КонецФункции
	
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Функция ДополнитьСлешВПуть
//
// Параметры:
// ИмяКаталога
//
// Описание:
// Функция дополняет и возвращает слеш в путь в конец строки, если он отсутствует
//
Функция ДополнитьСлешВПуть(Знач Каталог)
	разделитель = "\";

	СисИнфо = Новый СистемнаяИнформация;
	Если Найти(Строка(СисИнфо.ТипПлатформы), "Linux")>0 Тогда 
		разделитель = "/";
	КонецЕсли;
		
	Если Прав(Каталог, 1) <> разделитель Тогда
		Каталог = Каталог + разделитель;
	КонецЕсли;
	Возврат Каталог;
КонецФункции

Функция ПервыйПуть()
	Возврат ?(Пути.Количество() > 0, Пути[0].Значение, "");	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

//{ Состояния тестов
мМассивПиктограммСостояний = Новый Массив(4);
мМассивПиктограммСостояний[мЗначенияСостоянияТестов.НеВыполнялся]	= ЭлементыФормы.ПолеКартинкиСерый.Картинка; 
мМассивПиктограммСостояний[мЗначенияСостоянияТестов.Сломался]		= ЭлементыФормы.ПолеКартинкиКрасный.Картинка;
мМассивПиктограммСостояний[мЗначенияСостоянияТестов.НеРеализован]	= ЭлементыФормы.ПолеКартинкиЖелтый.Картинка;
мМассивПиктограммСостояний[мЗначенияСостоянияТестов.Прошел]			= ЭлементыФормы.ПолеКартинкиЗеленый.Картинка;
мМассивПиктограммСостояний = Новый ФиксированныйМассив(мМассивПиктограммСостояний);
//} Состояния тестов

//{ Типы строк дерева тестов
мМассивПиктограммТиповСтроки = Новый Массив(4);
мМассивПиктограммТиповСтроки[мЗначенияТиповСтроки.КаталогТестов]	= ЭлементыФормы.ПолеКартинкиКаталогТестов.Картинка;
мМассивПиктограммТиповСтроки[мЗначенияТиповСтроки.ТестовыйСлучай]	= ЭлементыФормы.ПолеКартинкиТест.Картинка;
мМассивПиктограммТиповСтроки[мЗначенияТиповСтроки.ТестовыйМетод] 	= ЭлементыФормы.ПолеКартинкиТестовыйСлучай.Картинка;
мМассивПиктограммТиповСтроки[мЗначенияТиповСтроки.Подсистема]	 	= ЭлементыФормы.ПолеКартинкиПодсистема.Картинка;
мМассивПиктограммТиповСтроки = Новый ФиксированныйМассив(мМассивПиктограммТиповСтроки);
//} Типы строк дерева тестов

мЭтоВнутренняяОбработка = Ложь;